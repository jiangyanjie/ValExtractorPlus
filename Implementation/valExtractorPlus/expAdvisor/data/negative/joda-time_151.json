{
    "id": 151,
    "expression": "types",
    "projectName": "joda-time",
    "commitID": "6f157ae0dd7d524cf8eeae2a5da0f62080b686a0",
    "filePath": "src/main/java/org/joda/time/Partial.java",
    "occurrences": 18,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 193,
                "startColumnNumber": 12,
                "endLineNumber": 193,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 193,
                        "startColumnNumber": 12,
                        "endLineNumber": 193,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "types == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 193,
                        "startColumnNumber": 8,
                        "endLineNumber": 195,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (types == null) {\n  throw new IllegalArgumentException(\"Types array must not be null\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 193,
                    "startColumnNumber": 12,
                    "endLineNumber": 193,
                    "endColumnNumber": 25
                },
                "nodeContext": "types == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 199,
                "startColumnNumber": 29,
                "endLineNumber": 199,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 199,
                        "startColumnNumber": 29,
                        "endLineNumber": 199,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "types.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 199,
                        "startColumnNumber": 12,
                        "endLineNumber": 199,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "values.length != types.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 153,
                        "startLineNumber": 199,
                        "startColumnNumber": 8,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (values.length != types.length) {\n  throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 199,
                    "startColumnNumber": 12,
                    "endLineNumber": 199,
                    "endColumnNumber": 41
                },
                "nodeContext": "values.length != types.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 202,
                "startColumnNumber": 12,
                "endLineNumber": 202,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 202,
                        "startColumnNumber": 12,
                        "endLineNumber": 202,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "types.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 202,
                        "startColumnNumber": 12,
                        "endLineNumber": 202,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "types.length == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 202,
                        "startColumnNumber": 8,
                        "endLineNumber": 206,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (types.length == 0) {\n  iTypes=types;\n  iValues=values;\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 202,
                    "startColumnNumber": 12,
                    "endLineNumber": 202,
                    "endColumnNumber": 29
                },
                "nodeContext": "types.length == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 203,
                "startColumnNumber": 21,
                "endLineNumber": 203,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 203,
                        "startColumnNumber": 12,
                        "endLineNumber": 203,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "iTypes=types",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 203,
                        "startColumnNumber": 12,
                        "endLineNumber": 203,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "iTypes=types;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 202,
                        "startColumnNumber": 31,
                        "endLineNumber": 206,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  iTypes=types;\n  iValues=values;\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 202,
                        "startColumnNumber": 8,
                        "endLineNumber": 206,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (types.length == 0) {\n  iTypes=types;\n  iValues=values;\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 203,
                    "startColumnNumber": 12,
                    "endLineNumber": 203,
                    "endColumnNumber": 27
                },
                "nodeContext": "iTypes=types;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 207,
                "startColumnNumber": 28,
                "endLineNumber": 207,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 207,
                        "startColumnNumber": 28,
                        "endLineNumber": 207,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "types.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 207,
                        "startColumnNumber": 24,
                        "endLineNumber": 207,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "i < types.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 201,
                        "startLineNumber": 207,
                        "startColumnNumber": 8,
                        "endLineNumber": 211,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  if (types[i] == null) {\n    throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 207,
                    "startColumnNumber": 24,
                    "endLineNumber": 207,
                    "endColumnNumber": 40
                },
                "nodeContext": "i < types.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 208,
                "startColumnNumber": 16,
                "endLineNumber": 208,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 208,
                        "startColumnNumber": 16,
                        "endLineNumber": 208,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "types[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 208,
                        "startColumnNumber": 16,
                        "endLineNumber": 208,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "types[i] == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 138,
                        "startLineNumber": 208,
                        "startColumnNumber": 12,
                        "endLineNumber": 210,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (types[i] == null) {\n  throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 162,
                        "startLineNumber": 207,
                        "startColumnNumber": 47,
                        "endLineNumber": 211,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (types[i] == null) {\n    throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 201,
                        "startLineNumber": 207,
                        "startColumnNumber": 8,
                        "endLineNumber": 211,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  if (types[i] == null) {\n    throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 208,
                    "startColumnNumber": 16,
                    "endLineNumber": 208,
                    "endColumnNumber": 32
                },
                "nodeContext": "types[i] == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 213,
                "startColumnNumber": 28,
                "endLineNumber": 213,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 213,
                        "startColumnNumber": 28,
                        "endLineNumber": 213,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "types.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 213,
                        "startColumnNumber": 24,
                        "endLineNumber": 213,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "i < types.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 213,
                    "startColumnNumber": 24,
                    "endLineNumber": 213,
                    "endColumnNumber": 40
                },
                "nodeContext": "i < types.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 214,
                "startColumnNumber": 41,
                "endLineNumber": 214,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 214,
                        "startColumnNumber": 41,
                        "endLineNumber": 214,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "types[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 214,
                        "startColumnNumber": 30,
                        "endLineNumber": 214,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "loopType=types[i]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 214,
                        "startColumnNumber": 12,
                        "endLineNumber": 214,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "DateTimeFieldType loopType=types[i];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 214,
                    "startColumnNumber": 12,
                    "endLineNumber": 214,
                    "endColumnNumber": 50
                },
                "nodeContext": "DateTimeFieldType loopType=types[i];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 220,
                "startColumnNumber": 40,
                "endLineNumber": 220,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 220,
                        "startColumnNumber": 40,
                        "endLineNumber": 220,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 220,
                        "startColumnNumber": 40,
                        "endLineNumber": 220,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 219,
                        "startColumnNumber": 59,
                        "endLineNumber": 220,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 219,
                        "startColumnNumber": 30,
                        "endLineNumber": 220,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 180,
                        "startLineNumber": 219,
                        "startColumnNumber": 24,
                        "endLineNumber": 220,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 228,
                        "startLineNumber": 218,
                        "startColumnNumber": 53,
                        "endLineNumber": 221,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 502,
                        "startLineNumber": 218,
                        "startColumnNumber": 20,
                        "endLineNumber": 224,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (lastUnitField.isSupported()) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else {\n  throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 542,
                        "startLineNumber": 217,
                        "startColumnNumber": 58,
                        "endLineNumber": 225,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (lastUnitField.isSupported()) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 41,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 584,
                        "startLineNumber": 217,
                        "startColumnNumber": 16,
                        "endLineNumber": 225,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (loopUnitField.isSupported() == false) {\n  if (lastUnitField.isSupported()) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 220,
                    "startColumnNumber": 40,
                    "endLineNumber": 220,
                    "endColumnNumber": 62
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 223,
                "startColumnNumber": 40,
                "endLineNumber": 223,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 223,
                        "startColumnNumber": 40,
                        "endLineNumber": 223,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 223,
                        "startColumnNumber": 40,
                        "endLineNumber": 223,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 150,
                        "startLineNumber": 222,
                        "startColumnNumber": 59,
                        "endLineNumber": 223,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 180,
                        "startLineNumber": 222,
                        "startColumnNumber": 30,
                        "endLineNumber": 223,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 187,
                        "startLineNumber": 222,
                        "startColumnNumber": 24,
                        "endLineNumber": 223,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 221,
                        "startColumnNumber": 27,
                        "endLineNumber": 224,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 502,
                        "startLineNumber": 218,
                        "startColumnNumber": 20,
                        "endLineNumber": 224,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (lastUnitField.isSupported()) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else {\n  throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 542,
                        "startLineNumber": 217,
                        "startColumnNumber": 58,
                        "endLineNumber": 225,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (lastUnitField.isSupported()) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 41,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 584,
                        "startLineNumber": 217,
                        "startColumnNumber": 16,
                        "endLineNumber": 225,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (loopUnitField.isSupported() == false) {\n  if (lastUnitField.isSupported()) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 223,
                    "startColumnNumber": 40,
                    "endLineNumber": 223,
                    "endColumnNumber": 62
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 229,
                "startColumnNumber": 28,
                "endLineNumber": 229,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 229,
                        "startColumnNumber": 28,
                        "endLineNumber": 229,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 229,
                        "startColumnNumber": 28,
                        "endLineNumber": 229,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 131,
                        "startLineNumber": 228,
                        "startColumnNumber": 55,
                        "endLineNumber": 229,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 161,
                        "startLineNumber": 228,
                        "startColumnNumber": 26,
                        "endLineNumber": 229,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 228,
                        "startColumnNumber": 20,
                        "endLineNumber": 229,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 208,
                        "startLineNumber": 227,
                        "startColumnNumber": 33,
                        "endLineNumber": 230,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 229,
                    "startColumnNumber": 28,
                    "endLineNumber": 229,
                    "endColumnNumber": 50
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 231,
                "startColumnNumber": 24,
                "endLineNumber": 231,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 231,
                        "startColumnNumber": 24,
                        "endLineNumber": 231,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 231,
                        "startColumnNumber": 24,
                        "endLineNumber": 231,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "types[i - 1].getRangeDurationType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 231,
                        "startColumnNumber": 24,
                        "endLineNumber": 231,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "types[i - 1].getRangeDurationType() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 43,
                    "startLineNumber": 231,
                    "startColumnNumber": 24,
                    "endLineNumber": 231,
                    "endColumnNumber": 67
                },
                "nodeContext": "types[i - 1].getRangeDurationType() == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 234,
                "startColumnNumber": 44,
                "endLineNumber": 234,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 234,
                        "startColumnNumber": 44,
                        "endLineNumber": 234,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 234,
                        "startColumnNumber": 44,
                        "endLineNumber": 234,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 142,
                        "startLineNumber": 233,
                        "startColumnNumber": 63,
                        "endLineNumber": 234,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 233,
                        "startColumnNumber": 34,
                        "endLineNumber": 234,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 233,
                        "startColumnNumber": 28,
                        "endLineNumber": 234,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 232,
                        "startColumnNumber": 69,
                        "endLineNumber": 235,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 280,
                        "startLineNumber": 232,
                        "startColumnNumber": 24,
                        "endLineNumber": 235,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (loopType.getRangeDurationType() == null) {\n  throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 328,
                        "startLineNumber": 231,
                        "startColumnNumber": 69,
                        "endLineNumber": 236,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 234,
                    "startColumnNumber": 44,
                    "endLineNumber": 234,
                    "endColumnNumber": 66
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 239,
                "startColumnNumber": 36,
                "endLineNumber": 239,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 239,
                        "startColumnNumber": 36,
                        "endLineNumber": 239,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 239,
                        "startColumnNumber": 36,
                        "endLineNumber": 239,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 238,
                        "startColumnNumber": 63,
                        "endLineNumber": 239,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 169,
                        "startLineNumber": 238,
                        "startColumnNumber": 34,
                        "endLineNumber": 239,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 238,
                        "startColumnNumber": 28,
                        "endLineNumber": 239,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 237,
                        "startColumnNumber": 69,
                        "endLineNumber": 240,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 277,
                        "startLineNumber": 237,
                        "startColumnNumber": 24,
                        "endLineNumber": 240,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (loopType.getRangeDurationType() == null) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1167,
                        "startLineNumber": 236,
                        "startColumnNumber": 27,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 239,
                    "startColumnNumber": 36,
                    "endLineNumber": 239,
                    "endColumnNumber": 58
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 241,
                "startColumnNumber": 55,
                "endLineNumber": 241,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 241,
                        "startColumnNumber": 55,
                        "endLineNumber": 241,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 241,
                        "startColumnNumber": 55,
                        "endLineNumber": 241,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "types[i - 1].getRangeDurationType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 241,
                        "startColumnNumber": 55,
                        "endLineNumber": 241,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "types[i - 1].getRangeDurationType().getField(iChronology)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 241,
                        "startColumnNumber": 38,
                        "endLineNumber": 241,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 241,
                        "startColumnNumber": 24,
                        "endLineNumber": 241,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1167,
                        "startLineNumber": 236,
                        "startColumnNumber": 27,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 89,
                    "startLineNumber": 241,
                    "startColumnNumber": 24,
                    "endLineNumber": 241,
                    "endColumnNumber": 113
                },
                "nodeContext": "DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 245,
                "startColumnNumber": 36,
                "endLineNumber": 245,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 245,
                        "startColumnNumber": 36,
                        "endLineNumber": 245,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 245,
                        "startColumnNumber": 36,
                        "endLineNumber": 245,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 244,
                        "startColumnNumber": 63,
                        "endLineNumber": 245,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 169,
                        "startLineNumber": 244,
                        "startColumnNumber": 34,
                        "endLineNumber": 245,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 244,
                        "startColumnNumber": 28,
                        "endLineNumber": 245,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 243,
                        "startColumnNumber": 74,
                        "endLineNumber": 246,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 282,
                        "startLineNumber": 243,
                        "startColumnNumber": 24,
                        "endLineNumber": 246,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (lastRangeField.compareTo(loopRangeField) < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1167,
                        "startLineNumber": 236,
                        "startColumnNumber": 27,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 245,
                    "startColumnNumber": 36,
                    "endLineNumber": 245,
                    "endColumnNumber": 58
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 249,
                "startColumnNumber": 44,
                "endLineNumber": 249,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 249,
                        "startColumnNumber": 44,
                        "endLineNumber": 249,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "types[i - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 249,
                        "startColumnNumber": 44,
                        "endLineNumber": 249,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "types[i - 1].getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 142,
                        "startLineNumber": 248,
                        "startColumnNumber": 63,
                        "endLineNumber": 249,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 248,
                        "startColumnNumber": 34,
                        "endLineNumber": 249,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 248,
                        "startColumnNumber": 28,
                        "endLineNumber": 249,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 247,
                        "startColumnNumber": 75,
                        "endLineNumber": 250,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 286,
                        "startLineNumber": 247,
                        "startColumnNumber": 24,
                        "endLineNumber": 250,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (lastRangeField.compareTo(loopRangeField) == 0) {\n  throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1167,
                        "startLineNumber": 236,
                        "startColumnNumber": 27,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 231,
                        "startColumnNumber": 20,
                        "endLineNumber": 251,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (types[i - 1].getRangeDurationType() == null) {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n else {\n  if (loopType.getRangeDurationType() == null) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n  DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n  if (lastRangeField.compareTo(loopRangeField) < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n  if (lastRangeField.compareTo(loopRangeField) == 0) {\n    throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 136,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 230,
                        "startColumnNumber": 80,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1647,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1878,
                        "startLineNumber": 227,
                        "startColumnNumber": 16,
                        "endLineNumber": 252,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (compare < 0) {\n  throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n}\n else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n  if (types[i - 1].getRangeDurationType() == null) {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n else {\n    if (loopType.getRangeDurationType() == null) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n    DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n    if (lastRangeField.compareTo(loopRangeField) < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n    if (lastRangeField.compareTo(loopRangeField) == 0) {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2581,
                        "startLineNumber": 216,
                        "startColumnNumber": 23,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2592,
                        "startLineNumber": 216,
                        "startColumnNumber": 12,
                        "endLineNumber": 253,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i > 0) {\n  if (loopUnitField.isSupported() == false) {\n    if (lastUnitField.isSupported()) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else {\n      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n    }\n  }\n  int compare=lastUnitField.compareTo(loopUnitField);\n  if (compare < 0) {\n    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n  }\n else   if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n    if (types[i - 1].getRangeDurationType() == null) {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n else {\n      if (loopType.getRangeDurationType() == null) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n      DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n      if (lastRangeField.compareTo(loopRangeField) < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n      if (lastRangeField.compareTo(loopRangeField) == 0) {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 228,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2802,
                        "startLineNumber": 213,
                        "startColumnNumber": 47,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 252,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2841,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < types.length; i++) {\n  DateTimeFieldType loopType=types[i];\n  DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n  if (i > 0) {\n    if (loopUnitField.isSupported() == false) {\n      if (lastUnitField.isSupported()) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else {\n        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n      }\n    }\n    int compare=lastUnitField.compareTo(loopUnitField);\n    if (compare < 0) {\n      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n    }\n else     if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n      if (types[i - 1].getRangeDurationType() == null) {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n else {\n        if (loopType.getRangeDurationType() == null) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n        DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n        if (lastRangeField.compareTo(loopRangeField) < 0) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n        if (lastRangeField.compareTo(loopRangeField) == 0) {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n    }\n  }\n  lastUnitField=loopUnitField;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 265,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 249,
                    "startColumnNumber": 44,
                    "endLineNumber": 249,
                    "endColumnNumber": 66
                },
                "nodeContext": "types[i - 1].getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        },
        {
            "nodeContext": "types",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 257,
                "startColumnNumber": 39,
                "endLineNumber": 257,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 257,
                        "startColumnNumber": 39,
                        "endLineNumber": 257,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "types.clone()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 257,
                        "startColumnNumber": 17,
                        "endLineNumber": 257,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "(DateTimeFieldType[])types.clone()",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 257,
                        "startColumnNumber": 8,
                        "endLineNumber": 257,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "iTypes=(DateTimeFieldType[])types.clone()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 257,
                        "startColumnNumber": 8,
                        "endLineNumber": 257,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "iTypes=(DateTimeFieldType[])types.clone();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3905,
                        "startLineNumber": 189,
                        "startColumnNumber": 83,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4461,
                        "startLineNumber": 178,
                        "startColumnNumber": 4,
                        "endLineNumber": 260,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Constructs a Partial with the specified fields and values. The fields must be specified in the order largest to smallest. <p> The constructor uses the specified chronology.\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\npublic Partial(DateTimeFieldType[] types,int[] values,Chronology chronology){\n  super();\n  chronology=DateTimeUtils.getChronology(chronology).withUTC();\n  iChronology=chronology;\n  if (types == null) {\n    throw new IllegalArgumentException(\"Types array must not be null\");\n  }\n  if (values == null) {\n    throw new IllegalArgumentException(\"Values array must not be null\");\n  }\n  if (values.length != types.length) {\n    throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n  }\n  if (types.length == 0) {\n    iTypes=types;\n    iValues=values;\n    return;\n  }\n  for (int i=0; i < types.length; i++) {\n    if (types[i] == null) {\n      throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n    }\n  }\n  DurationField lastUnitField=null;\n  for (int i=0; i < types.length; i++) {\n    DateTimeFieldType loopType=types[i];\n    DurationField loopUnitField=loopType.getDurationType().getField(iChronology);\n    if (i > 0) {\n      if (loopUnitField.isSupported() == false) {\n        if (lastUnitField.isSupported()) {\n          throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n        }\n else {\n          throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n        }\n      }\n      int compare=lastUnitField.compareTo(loopUnitField);\n      if (compare < 0) {\n        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n      }\n else       if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n        if (types[i - 1].getRangeDurationType() == null) {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n else {\n          if (loopType.getRangeDurationType() == null) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          DurationField lastRangeField=types[i - 1].getRangeDurationType().getField(iChronology);\n          DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);\n          if (lastRangeField.compareTo(loopRangeField) < 0) {\n            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \"+ loopType.getName());\n          }\n          if (lastRangeField.compareTo(loopRangeField) == 0) {\n            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \"+ loopType.getName());\n          }\n        }\n      }\n    }\n    lastUnitField=loopUnitField;\n  }\n  iTypes=(DateTimeFieldType[])types.clone();\n  chronology.validate(this,values);\n  iValues=(int[])values.clone();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 410,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 257,
                    "startColumnNumber": 8,
                    "endLineNumber": 257,
                    "endColumnNumber": 53
                },
                "nodeContext": "iTypes=(DateTimeFieldType[])types.clone();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.joda.time.DateTimeFieldType[]"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 193,
            "startColumnNumber": 12,
            "endLineNumber": 193,
            "endColumnNumber": 17
        },
        {
            "charLength": 5,
            "startLineNumber": 199,
            "startColumnNumber": 29,
            "endLineNumber": 199,
            "endColumnNumber": 34
        },
        {
            "charLength": 5,
            "startLineNumber": 202,
            "startColumnNumber": 12,
            "endLineNumber": 202,
            "endColumnNumber": 17
        },
        {
            "charLength": 5,
            "startLineNumber": 203,
            "startColumnNumber": 21,
            "endLineNumber": 203,
            "endColumnNumber": 26
        },
        {
            "charLength": 5,
            "startLineNumber": 207,
            "startColumnNumber": 28,
            "endLineNumber": 207,
            "endColumnNumber": 33
        },
        {
            "charLength": 5,
            "startLineNumber": 208,
            "startColumnNumber": 16,
            "endLineNumber": 208,
            "endColumnNumber": 21
        },
        {
            "charLength": 5,
            "startLineNumber": 213,
            "startColumnNumber": 28,
            "endLineNumber": 213,
            "endColumnNumber": 33
        },
        {
            "charLength": 5,
            "startLineNumber": 214,
            "startColumnNumber": 41,
            "endLineNumber": 214,
            "endColumnNumber": 46
        },
        {
            "charLength": 5,
            "startLineNumber": 220,
            "startColumnNumber": 40,
            "endLineNumber": 220,
            "endColumnNumber": 45
        },
        {
            "charLength": 5,
            "startLineNumber": 223,
            "startColumnNumber": 40,
            "endLineNumber": 223,
            "endColumnNumber": 45
        },
        {
            "charLength": 5,
            "startLineNumber": 229,
            "startColumnNumber": 28,
            "endLineNumber": 229,
            "endColumnNumber": 33
        },
        {
            "charLength": 5,
            "startLineNumber": 231,
            "startColumnNumber": 24,
            "endLineNumber": 231,
            "endColumnNumber": 29
        },
        {
            "charLength": 5,
            "startLineNumber": 234,
            "startColumnNumber": 44,
            "endLineNumber": 234,
            "endColumnNumber": 49
        },
        {
            "charLength": 5,
            "startLineNumber": 239,
            "startColumnNumber": 36,
            "endLineNumber": 239,
            "endColumnNumber": 41
        },
        {
            "charLength": 5,
            "startLineNumber": 241,
            "startColumnNumber": 55,
            "endLineNumber": 241,
            "endColumnNumber": 60
        },
        {
            "charLength": 5,
            "startLineNumber": 245,
            "startColumnNumber": 36,
            "endLineNumber": 245,
            "endColumnNumber": 41
        },
        {
            "charLength": 5,
            "startLineNumber": 249,
            "startColumnNumber": 44,
            "endLineNumber": 249,
            "endColumnNumber": 49
        },
        {
            "charLength": 5,
            "startLineNumber": 257,
            "startColumnNumber": 39,
            "endLineNumber": 257,
            "endColumnNumber": 44
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 13
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 13
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 13
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 11
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 16
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 16
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 16
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 16
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 16
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 4
        }
    ]
}