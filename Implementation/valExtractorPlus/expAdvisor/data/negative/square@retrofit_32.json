{
    "id": 32,
    "expression": "request",
    "projectName": "square@retrofit",
    "commitID": "63cd5c8e26a3d2041dec6709d9a5ca3e410718d6",
    "filePath": "retrofit/src/main/java/retrofit/RestAdapter.java",
    "occurrences": 8,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 400,
                "startColumnNumber": 49,
                "endLineNumber": 400,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 400,
                        "startColumnNumber": 49,
                        "endLineNumber": 400,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "request.getMethod()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 400,
                        "startColumnNumber": 12,
                        "endLineNumber": 400,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 400,
                        "startColumnNumber": 4,
                        "endLineNumber": 400,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 400,
                        "startColumnNumber": 4,
                        "endLineNumber": 400,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 85,
                    "startLineNumber": 400,
                    "startColumnNumber": 4,
                    "endLineNumber": 400,
                    "endColumnNumber": 89
                },
                "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 400,
                "startColumnNumber": 70,
                "endLineNumber": 400,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 400,
                        "startColumnNumber": 70,
                        "endLineNumber": 400,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "request.getUrl()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 400,
                        "startColumnNumber": 12,
                        "endLineNumber": 400,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 400,
                        "startColumnNumber": 4,
                        "endLineNumber": 400,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 400,
                        "startColumnNumber": 4,
                        "endLineNumber": 400,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 85,
                    "startLineNumber": 400,
                    "startColumnNumber": 4,
                    "endLineNumber": 400,
                    "endColumnNumber": 89
                },
                "nodeContext": "log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 403,
                "startColumnNumber": 27,
                "endLineNumber": 403,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 403,
                        "startColumnNumber": 27,
                        "endLineNumber": 403,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "request.getHeaders()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 88,
                        "startLineNumber": 403,
                        "startColumnNumber": 6,
                        "endLineNumber": 405,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "for (Header header : request.getHeaders()) {\n  log.log(header.toString());\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 402,
                        "startColumnNumber": 58,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1259,
                        "startLineNumber": 402,
                        "startColumnNumber": 4,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 403,
                    "startColumnNumber": 27,
                    "endLineNumber": 403,
                    "endColumnNumber": 47
                },
                "nodeContext": "request.getHeaders()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 408,
                "startColumnNumber": 25,
                "endLineNumber": 408,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 408,
                        "startColumnNumber": 25,
                        "endLineNumber": 408,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "request.getBody()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 408,
                        "startColumnNumber": 18,
                        "endLineNumber": 408,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "body=request.getBody()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 408,
                        "startColumnNumber": 6,
                        "endLineNumber": 408,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "TypedOutput body=request.getBody();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 402,
                        "startColumnNumber": 58,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1259,
                        "startLineNumber": 402,
                        "startColumnNumber": 4,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 408,
                    "startColumnNumber": 6,
                    "endLineNumber": 408,
                    "endColumnNumber": 43
                },
                "nodeContext": "TypedOutput body=request.getBody();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 422,
                "startColumnNumber": 15,
                "endLineNumber": 422,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 422,
                        "startColumnNumber": 15,
                        "endLineNumber": 422,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "request.getHeaders()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 422,
                        "startColumnNumber": 15,
                        "endLineNumber": 422,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "request.getHeaders().isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 422,
                        "startColumnNumber": 14,
                        "endLineNumber": 422,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "!request.getHeaders().isEmpty()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 422,
                        "startColumnNumber": 10,
                        "endLineNumber": 424,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "if (!request.getHeaders().isEmpty()) {\n  log.log(\"\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 551,
                        "startLineNumber": 421,
                        "startColumnNumber": 59,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 68,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 602,
                        "startLineNumber": 421,
                        "startColumnNumber": 8,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 78,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 931,
                        "startLineNumber": 409,
                        "startColumnNumber": 24,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 125,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 409,
                        "startColumnNumber": 6,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 129,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 402,
                        "startColumnNumber": 58,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1259,
                        "startLineNumber": 402,
                        "startColumnNumber": 4,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 422,
                    "startColumnNumber": 14,
                    "endLineNumber": 422,
                    "endColumnNumber": 45
                },
                "nodeContext": "!request.getHeaders().isEmpty()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 427,
                "startColumnNumber": 55,
                "endLineNumber": 427,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 427,
                        "startColumnNumber": 22,
                        "endLineNumber": 427,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "Utils.readBodyToBytesIfNecessary(request)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 427,
                        "startColumnNumber": 12,
                        "endLineNumber": 427,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "request=Utils.readBodyToBytesIfNecessary(request)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 427,
                        "startColumnNumber": 12,
                        "endLineNumber": 427,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "request=Utils.readBodyToBytesIfNecessary(request);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 212,
                        "startLineNumber": 425,
                        "startColumnNumber": 49,
                        "endLineNumber": 429,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "{\n  request=Utils.readBodyToBytesIfNecessary(request);\n  body=request.getBody();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 251,
                        "startLineNumber": 425,
                        "startColumnNumber": 10,
                        "endLineNumber": 429,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "if (!(body instanceof TypedByteArray)) {\n  request=Utils.readBodyToBytesIfNecessary(request);\n  body=request.getBody();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 551,
                        "startLineNumber": 421,
                        "startColumnNumber": 59,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 68,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 602,
                        "startLineNumber": 421,
                        "startColumnNumber": 8,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 78,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 931,
                        "startLineNumber": 409,
                        "startColumnNumber": 24,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 125,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 409,
                        "startColumnNumber": 6,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 129,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 402,
                        "startColumnNumber": 58,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1259,
                        "startLineNumber": 402,
                        "startColumnNumber": 4,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 427,
                    "startColumnNumber": 12,
                    "endLineNumber": 427,
                    "endColumnNumber": 64
                },
                "nodeContext": "request=Utils.readBodyToBytesIfNecessary(request);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 428,
                "startColumnNumber": 19,
                "endLineNumber": 428,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 428,
                        "startColumnNumber": 19,
                        "endLineNumber": 428,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "request.getBody()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 428,
                        "startColumnNumber": 12,
                        "endLineNumber": 428,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "body=request.getBody()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 428,
                        "startColumnNumber": 12,
                        "endLineNumber": 428,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "body=request.getBody();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 212,
                        "startLineNumber": 425,
                        "startColumnNumber": 49,
                        "endLineNumber": 429,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "{\n  request=Utils.readBodyToBytesIfNecessary(request);\n  body=request.getBody();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 251,
                        "startLineNumber": 425,
                        "startColumnNumber": 10,
                        "endLineNumber": 429,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "if (!(body instanceof TypedByteArray)) {\n  request=Utils.readBodyToBytesIfNecessary(request);\n  body=request.getBody();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 551,
                        "startLineNumber": 421,
                        "startColumnNumber": 59,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 68,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 602,
                        "startLineNumber": 421,
                        "startColumnNumber": 8,
                        "endLineNumber": 434,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n  log.log(new String(bodyBytes,bodyCharset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 78,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 931,
                        "startLineNumber": 409,
                        "startColumnNumber": 24,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 125,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 409,
                        "startColumnNumber": 6,
                        "endLineNumber": 435,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  long bodyLength=body.length();\n  bodySize=bodyLength + \"-byte\";\n  if (bodyLength != -1) {\n    log.log(\"Content-Length: \" + bodyLength);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n    log.log(new String(bodyBytes,bodyCharset));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 129,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 402,
                        "startColumnNumber": 58,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1259,
                        "startLineNumber": 402,
                        "startColumnNumber": 4,
                        "endLineNumber": 438,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.toString());\n  }\n  String bodySize=\"no\";\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    long bodyLength=body.length();\n    bodySize=bodyLength + \"-byte\";\n    if (bodyLength != -1) {\n      log.log(\"Content-Length: \" + bodyLength);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n      log.log(new String(bodyBytes,bodyCharset));\n    }\n  }\n  log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 428,
                    "startColumnNumber": 12,
                    "endLineNumber": 428,
                    "endColumnNumber": 37
                },
                "nodeContext": "body=request.getBody();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 440,
                "startColumnNumber": 11,
                "endLineNumber": 440,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 440,
                        "startColumnNumber": 4,
                        "endLineNumber": 440,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "return request;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1381,
                        "startLineNumber": 399,
                        "startColumnNumber": 80,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1555,
                        "startLineNumber": 398,
                        "startColumnNumber": 2,
                        "endLineNumber": 441,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nRequest logAndReplaceRequest(String name,Request request) throws IOException {\n  log.log(String.format(\"---> %s %s %s\",name,request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.toString());\n    }\n    String bodySize=\"no\";\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      long bodyLength=body.length();\n      bodySize=bodyLength + \"-byte\";\n      if (bodyLength != -1) {\n        log.log(\"Content-Length: \" + bodyLength);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        String bodyCharset=MimeUtil.parseCharset(body.mimeType());\n        log.log(new String(bodyBytes,bodyCharset));\n      }\n    }\n    log.log(String.format(\"---> END %s (%s body)\",name,bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 440,
                    "startColumnNumber": 4,
                    "endLineNumber": 440,
                    "endColumnNumber": 19
                },
                "nodeContext": "return request;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "retrofit.client.Request"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 400,
            "startColumnNumber": 49,
            "endLineNumber": 400,
            "endColumnNumber": 56
        },
        {
            "charLength": 7,
            "startLineNumber": 400,
            "startColumnNumber": 70,
            "endLineNumber": 400,
            "endColumnNumber": 77
        },
        {
            "charLength": 7,
            "startLineNumber": 403,
            "startColumnNumber": 27,
            "endLineNumber": 403,
            "endColumnNumber": 34
        },
        {
            "charLength": 7,
            "startLineNumber": 408,
            "startColumnNumber": 25,
            "endLineNumber": 408,
            "endColumnNumber": 32
        },
        {
            "charLength": 7,
            "startLineNumber": 422,
            "startColumnNumber": 15,
            "endLineNumber": 422,
            "endColumnNumber": 22
        },
        {
            "charLength": 7,
            "startLineNumber": 427,
            "startColumnNumber": 55,
            "endLineNumber": 427,
            "endColumnNumber": 62
        },
        {
            "charLength": 7,
            "startLineNumber": 428,
            "startColumnNumber": 19,
            "endLineNumber": 428,
            "endColumnNumber": 26
        },
        {
            "charLength": 7,
            "startLineNumber": 440,
            "startColumnNumber": 11,
            "endLineNumber": 440,
            "endColumnNumber": 18
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 1
        }
    ]
}