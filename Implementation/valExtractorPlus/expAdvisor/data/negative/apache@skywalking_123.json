{
    "id": 123,
    "expression": "witnessMethods()",
    "projectName": "apache@skywalking",
    "commitID": "e0a4c44036b33eadc0add7f91a2e5fd6caca7098",
    "filePath": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "witnessMethods()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 76,
                "startColumnNumber": 45,
                "endLineNumber": 76,
                "endColumnNumber": 61
            },
            "astNodeNumber": 2,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 76,
                        "startColumnNumber": 28,
                        "endLineNumber": 76,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "witnessMethods=witnessMethods()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 76,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "List<WitnessMethod> witnessMethods=witnessMethods();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1945,
                        "startLineNumber": 54,
                        "startColumnNumber": 80,
                        "endLineNumber": 95,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String interceptorDefineClassName=this.getClass().getName();\n  String transformClassName=typeDescription.getTypeName();\n  if (StringUtil.isEmpty(transformClassName)) {\n    LOGGER.warn(\"classname of being intercepted is not defined by {}.\",interceptorDefineClassName);\n    return null;\n  }\n  LOGGER.debug(\"prepare to enhance class {} by {}.\",transformClassName,interceptorDefineClassName);\n  WitnessFinder finder=WitnessFinder.INSTANCE;\n  String[] witnessClasses=witnessClasses();\n  if (witnessClasses != null) {\n    for (    String witnessClass : witnessClasses) {\n      if (!finder.exist(witnessClass,classLoader)) {\n        LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness class {} is not existed.\",transformClassName,interceptorDefineClassName,witnessClass);\n        return null;\n      }\n    }\n  }\n  List<WitnessMethod> witnessMethods=witnessMethods();\n  if (!CollectionUtil.isEmpty(witnessMethods)) {\n    for (    WitnessMethod witnessMethod : witnessMethods) {\n      if (!finder.exist(witnessMethod,classLoader)) {\n        LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness method {} is not existed.\",transformClassName,interceptorDefineClassName,witnessMethod);\n        return null;\n      }\n    }\n  }\n  DynamicType.Builder<?> newClassBuilder=this.enhance(typeDescription,builder,classLoader,context);\n  context.initializationStageCompleted();\n  LOGGER.debug(\"enhance class {} by {} completely.\",transformClassName,interceptorDefineClassName);\n  return newClassBuilder;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2531,
                        "startLineNumber": 44,
                        "startColumnNumber": 4,
                        "endLineNumber": 95,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Main entrance of enhancing the class.\n * @param typeDescription target class description.\n * @param builder         byte-buddy's builder to manipulate target class's bytecode.\n * @param classLoader     load the given transformClass\n * @return the new builder, or <code>null</code> if not be enhanced.\n * @throws PluginException when set builder failure.\n */\npublic DynamicType.Builder<?> define(TypeDescription typeDescription,DynamicType.Builder<?> builder,ClassLoader classLoader,EnhanceContext context) throws PluginException {\n  String interceptorDefineClassName=this.getClass().getName();\n  String transformClassName=typeDescription.getTypeName();\n  if (StringUtil.isEmpty(transformClassName)) {\n    LOGGER.warn(\"classname of being intercepted is not defined by {}.\",interceptorDefineClassName);\n    return null;\n  }\n  LOGGER.debug(\"prepare to enhance class {} by {}.\",transformClassName,interceptorDefineClassName);\n  WitnessFinder finder=WitnessFinder.INSTANCE;\n  String[] witnessClasses=witnessClasses();\n  if (witnessClasses != null) {\n    for (    String witnessClass : witnessClasses) {\n      if (!finder.exist(witnessClass,classLoader)) {\n        LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness class {} is not existed.\",transformClassName,interceptorDefineClassName,witnessClass);\n        return null;\n      }\n    }\n  }\n  List<WitnessMethod> witnessMethods=witnessMethods();\n  if (!CollectionUtil.isEmpty(witnessMethods)) {\n    for (    WitnessMethod witnessMethod : witnessMethods) {\n      if (!finder.exist(witnessMethod,classLoader)) {\n        LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness method {} is not existed.\",transformClassName,interceptorDefineClassName,witnessMethod);\n        return null;\n      }\n    }\n  }\n  DynamicType.Builder<?> newClassBuilder=this.enhance(typeDescription,builder,classLoader,context);\n  context.initializationStageCompleted();\n  LOGGER.debug(\"enhance class {} by {} completely.\",transformClassName,interceptorDefineClassName);\n  return newClassBuilder;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 190,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 76,
                    "startColumnNumber": 8,
                    "endLineNumber": 76,
                    "endColumnNumber": 62
                },
                "nodeContext": "List<WitnessMethod> witnessMethods=witnessMethods();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.skywalking.apm.agent.core.plugin.WitnessMethod>"
        }
    ],
    "positionList": [
        {
            "charLength": 16,
            "startLineNumber": 76,
            "startColumnNumber": 45,
            "endLineNumber": 76,
            "endColumnNumber": 61
        }
    ],
    "layoutRelationDataList": []
}