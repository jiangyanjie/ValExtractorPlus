{
    "id": 317,
    "expression": "record",
    "projectName": "NationalSecurityAgency@ghidra",
    "commitID": "e5df6fdd7bbc13dadc918bafa0f4f5767e74e1a7",
    "filePath": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/symbol/SymbolDatabaseAdapterV1.java",
    "occurrences": 9,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 113,
                "startColumnNumber": 6,
                "endLineNumber": 113,
                "endColumnNumber": 12
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 113,
                        "startColumnNumber": 6,
                        "endLineNumber": 113,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "record == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 113,
                        "startColumnNumber": 2,
                        "endLineNumber": 115,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (record == null) {\n  return null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 113,
                    "startColumnNumber": 6,
                    "endLineNumber": 113,
                    "endColumnNumber": 20
                },
                "nodeContext": "record == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 116,
                "startColumnNumber": 66,
                "endLineNumber": 116,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 116,
                        "startColumnNumber": 66,
                        "endLineNumber": 116,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "record.getKey()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 116,
                        "startColumnNumber": 17,
                        "endLineNumber": 116,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 116,
                        "startColumnNumber": 11,
                        "endLineNumber": 116,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 116,
                        "startColumnNumber": 2,
                        "endLineNumber": 116,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 116,
                    "startColumnNumber": 2,
                    "endLineNumber": 116,
                    "endColumnNumber": 83
                },
                "nodeContext": "DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 117,
                "startColumnNumber": 22,
                "endLineNumber": 117,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 117,
                        "startColumnNumber": 22,
                        "endLineNumber": 117,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "record.getString(V1_SYMBOL_NAME_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 117,
                        "startColumnNumber": 9,
                        "endLineNumber": 117,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "symbolName=record.getString(V1_SYMBOL_NAME_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 117,
                        "startColumnNumber": 2,
                        "endLineNumber": 117,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 117,
                    "startColumnNumber": 2,
                    "endLineNumber": 117,
                    "endColumnNumber": 59
                },
                "nodeContext": "String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 120,
                "startColumnNumber": 23,
                "endLineNumber": 120,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 120,
                        "startColumnNumber": 23,
                        "endLineNumber": 120,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "record.getLongValue(V1_SYMBOL_ADDR_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 120,
                        "startColumnNumber": 7,
                        "endLineNumber": 120,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 120,
                        "startColumnNumber": 2,
                        "endLineNumber": 120,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 120,
                    "startColumnNumber": 2,
                    "endLineNumber": 120,
                    "endColumnNumber": 63
                },
                "nodeContext": "long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 123,
                "startColumnNumber": 21,
                "endLineNumber": 123,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 123,
                        "startColumnNumber": 21,
                        "endLineNumber": 123,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "record.getLongValue(V1_SYMBOL_PARENT_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 123,
                        "startColumnNumber": 7,
                        "endLineNumber": 123,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 123,
                        "startColumnNumber": 2,
                        "endLineNumber": 123,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 123,
                    "startColumnNumber": 2,
                    "endLineNumber": 123,
                    "endColumnNumber": 63
                },
                "nodeContext": "long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 126,
                "startColumnNumber": 22,
                "endLineNumber": 126,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 126,
                        "startColumnNumber": 22,
                        "endLineNumber": 126,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "record.getByteValue(V1_SYMBOL_TYPE_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 126,
                        "startColumnNumber": 7,
                        "endLineNumber": 126,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 126,
                        "startColumnNumber": 2,
                        "endLineNumber": 126,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 126,
                    "startColumnNumber": 2,
                    "endLineNumber": 126,
                    "endColumnNumber": 62
                },
                "nodeContext": "byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 130,
                "startColumnNumber": 3,
                "endLineNumber": 130,
                "endColumnNumber": 9
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 130,
                        "startColumnNumber": 3,
                        "endLineNumber": 130,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "record.getString(V1_SYMBOL_COMMENT_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 104,
                        "startLineNumber": 129,
                        "startColumnNumber": 2,
                        "endLineNumber": 130,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 129,
                        "startColumnNumber": 2,
                        "endLineNumber": 130,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 130,
                    "startColumnNumber": 3,
                    "endLineNumber": 130,
                    "endColumnNumber": 42
                },
                "nodeContext": "record.getString(V1_SYMBOL_COMMENT_COL)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 142,
                "startColumnNumber": 20,
                "endLineNumber": 142,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 142,
                        "startColumnNumber": 20,
                        "endLineNumber": 142,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "record.getLongValue(V1_SYMBOL_DATA1_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 142,
                        "startColumnNumber": 7,
                        "endLineNumber": 142,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 142,
                        "startColumnNumber": 2,
                        "endLineNumber": 142,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 142,
                    "startColumnNumber": 2,
                    "endLineNumber": 142,
                    "endColumnNumber": 61
                },
                "nodeContext": "long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        },
        {
            "nodeContext": "record",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 148,
                "startColumnNumber": 14,
                "endLineNumber": 148,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 148,
                        "startColumnNumber": 14,
                        "endLineNumber": 148,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "record.getIntValue(V1_SYMBOL_DATA2_COL)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 148,
                        "startColumnNumber": 6,
                        "endLineNumber": 148,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "data2=record.getIntValue(V1_SYMBOL_DATA2_COL)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 148,
                        "startColumnNumber": 2,
                        "endLineNumber": 148,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 148,
                    "startColumnNumber": 2,
                    "endLineNumber": 148,
                    "endColumnNumber": 54
                },
                "nodeContext": "int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "db.DBRecord"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 113,
            "startColumnNumber": 6,
            "endLineNumber": 113,
            "endColumnNumber": 12
        },
        {
            "charLength": 6,
            "startLineNumber": 116,
            "startColumnNumber": 66,
            "endLineNumber": 116,
            "endColumnNumber": 72
        },
        {
            "charLength": 6,
            "startLineNumber": 117,
            "startColumnNumber": 22,
            "endLineNumber": 117,
            "endColumnNumber": 28
        },
        {
            "charLength": 6,
            "startLineNumber": 120,
            "startColumnNumber": 23,
            "endLineNumber": 120,
            "endColumnNumber": 29
        },
        {
            "charLength": 6,
            "startLineNumber": 123,
            "startColumnNumber": 21,
            "endLineNumber": 123,
            "endColumnNumber": 27
        },
        {
            "charLength": 6,
            "startLineNumber": 126,
            "startColumnNumber": 22,
            "endLineNumber": 126,
            "endColumnNumber": 28
        },
        {
            "charLength": 6,
            "startLineNumber": 130,
            "startColumnNumber": 3,
            "endLineNumber": 130,
            "endColumnNumber": 9
        },
        {
            "charLength": 6,
            "startLineNumber": 142,
            "startColumnNumber": 20,
            "endLineNumber": 142,
            "endColumnNumber": 26
        },
        {
            "charLength": 6,
            "startLineNumber": 148,
            "startColumnNumber": 14,
            "endLineNumber": 148,
            "endColumnNumber": 20
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        }
    ]
}