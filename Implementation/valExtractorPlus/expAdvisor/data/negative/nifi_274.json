{
    "id": 274,
    "expression": "0",
    "projectName": "nifi",
    "commitID": "3fb445437580bf47f1bec2b553aaff5424eb9eef",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutDatabaseRecord.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 676,
                "startColumnNumber": 35,
                "endLineNumber": 676,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 676,
                        "startColumnNumber": 20,
                        "endLineNumber": 676,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "queryTimeout > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 676,
                        "startColumnNumber": 16,
                        "endLineNumber": 678,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (queryTimeout > 0) {\n  throw se;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 226,
                        "startLineNumber": 674,
                        "startColumnNumber": 38,
                        "endLineNumber": 679,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (queryTimeout > 0) {\n    throw se;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 250,
                        "startLineNumber": 674,
                        "startColumnNumber": 14,
                        "endLineNumber": 679,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (SQLException se) {\n  if (queryTimeout > 0) {\n    throw se;\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 342,
                        "startLineNumber": 672,
                        "startColumnNumber": 12,
                        "endLineNumber": 679,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  ps.setQueryTimeout(queryTimeout);\n}\n catch (SQLException se) {\n  if (queryTimeout > 0) {\n    throw se;\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 676,
                    "startColumnNumber": 20,
                    "endLineNumber": 676,
                    "endColumnNumber": 36
                },
                "nodeContext": "queryTimeout > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 685,
                "startColumnNumber": 35,
                "endLineNumber": 685,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 685,
                        "startColumnNumber": 16,
                        "endLineNumber": 685,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "currentBatchSize=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 685,
                        "startColumnNumber": 12,
                        "endLineNumber": 685,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "int currentBatchSize=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 685,
                    "startColumnNumber": 12,
                    "endLineNumber": 685,
                    "endColumnNumber": 37
                },
                "nodeContext": "int currentBatchSize=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 686,
                "startColumnNumber": 29,
                "endLineNumber": 686,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 686,
                        "startColumnNumber": 16,
                        "endLineNumber": 686,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "batchIndex=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 686,
                        "startColumnNumber": 12,
                        "endLineNumber": 686,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "int batchIndex=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 686,
                    "startColumnNumber": 12,
                    "endLineNumber": 686,
                    "endColumnNumber": 31
                },
                "nodeContext": "int batchIndex=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 692,
                "startColumnNumber": 37,
                "endLineNumber": 692,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 692,
                        "startColumnNumber": 33,
                        "endLineNumber": 692,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "i=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 692,
                        "startColumnNumber": 29,
                        "endLineNumber": 692,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "int i=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 603,
                        "startLineNumber": 692,
                        "startColumnNumber": 24,
                        "endLineNumber": 700,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (int i=0; i < fieldIndexes.size(); i++) {\n  if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n    ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n  }\n else {\n    ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 64,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 651,
                        "startLineNumber": 691,
                        "startColumnNumber": 46,
                        "endLineNumber": 701,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  for (int i=0; i < fieldIndexes.size(); i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n      ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n    }\n else {\n      ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 691,
                        "startColumnNumber": 20,
                        "endLineNumber": 712,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (fieldIndexes != null) {\n  for (int i=0; i < fieldIndexes.size(); i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n      ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n    }\n else {\n      ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n    }\n  }\n}\n else {\n  for (int i=0; i < values.length; i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[i]);\n      ps.setObject(i * 2 + 2,values[i]);\n    }\n else {\n      ps.setObject(i + 1,values[i]);\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 125,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1866,
                        "startLineNumber": 690,
                        "startColumnNumber": 36,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 166,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1886,
                        "startLineNumber": 690,
                        "startColumnNumber": 16,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (values != null) {\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 170,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1979,
                        "startLineNumber": 688,
                        "startColumnNumber": 72,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 181,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2039,
                        "startLineNumber": 688,
                        "startColumnNumber": 12,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while ((currentRecord=recordParser.nextRecord()) != null) {\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 190,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 692,
                    "startColumnNumber": 29,
                    "endLineNumber": 692,
                    "endColumnNumber": 38
                },
                "nodeContext": "int i=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 703,
                "startColumnNumber": 37,
                "endLineNumber": 703,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 703,
                        "startColumnNumber": 33,
                        "endLineNumber": 703,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "i=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 703,
                        "startColumnNumber": 29,
                        "endLineNumber": 703,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "int i=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 703,
                        "startColumnNumber": 24,
                        "endLineNumber": 711,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (int i=0; i < values.length; i++) {\n  if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    ps.setObject(i * 2 + 1,values[i]);\n    ps.setObject(i * 2 + 2,values[i]);\n  }\n else {\n    ps.setObject(i + 1,values[i]);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 55,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 696,
                        "startLineNumber": 701,
                        "startColumnNumber": 27,
                        "endLineNumber": 712,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  for (int i=0; i < values.length; i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[i]);\n      ps.setObject(i * 2 + 2,values[i]);\n    }\n else {\n      ps.setObject(i + 1,values[i]);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 56,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 691,
                        "startColumnNumber": 20,
                        "endLineNumber": 712,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (fieldIndexes != null) {\n  for (int i=0; i < fieldIndexes.size(); i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n      ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n    }\n else {\n      ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n    }\n  }\n}\n else {\n  for (int i=0; i < values.length; i++) {\n    if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n      ps.setObject(i * 2 + 1,values[i]);\n      ps.setObject(i * 2 + 2,values[i]);\n    }\n else {\n      ps.setObject(i + 1,values[i]);\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 125,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1866,
                        "startLineNumber": 690,
                        "startColumnNumber": 36,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 166,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1886,
                        "startLineNumber": 690,
                        "startColumnNumber": 16,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (values != null) {\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 170,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1979,
                        "startLineNumber": 688,
                        "startColumnNumber": 72,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 181,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2039,
                        "startLineNumber": 688,
                        "startColumnNumber": 12,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while ((currentRecord=recordParser.nextRecord()) != null) {\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 190,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 703,
                    "startColumnNumber": 29,
                    "endLineNumber": 703,
                    "endColumnNumber": 38
                },
                "nodeContext": "int i=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 718,
                "startColumnNumber": 43,
                "endLineNumber": 718,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 718,
                        "startColumnNumber": 24,
                        "endLineNumber": 718,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "currentBatchSize=0",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 718,
                        "startColumnNumber": 24,
                        "endLineNumber": 718,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "currentBatchSize=0;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 351,
                        "startLineNumber": 714,
                        "startColumnNumber": 60,
                        "endLineNumber": 719,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  batchIndex++;\n  log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n  ps.executeBatch();\n  currentBatchSize=0;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 391,
                        "startLineNumber": 714,
                        "startColumnNumber": 20,
                        "endLineNumber": 719,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (++currentBatchSize == maxBatchSize) {\n  batchIndex++;\n  log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n  ps.executeBatch();\n  currentBatchSize=0;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 36,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1866,
                        "startLineNumber": 690,
                        "startColumnNumber": 36,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 166,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1886,
                        "startLineNumber": 690,
                        "startColumnNumber": 16,
                        "endLineNumber": 720,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (values != null) {\n  if (fieldIndexes != null) {\n    for (int i=0; i < fieldIndexes.size(); i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n        ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n      }\n else {\n        ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < values.length; i++) {\n      if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n        ps.setObject(i * 2 + 1,values[i]);\n        ps.setObject(i * 2 + 2,values[i]);\n      }\n else {\n        ps.setObject(i + 1,values[i]);\n      }\n    }\n  }\n  ps.addBatch();\n  if (++currentBatchSize == maxBatchSize) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n    currentBatchSize=0;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 170,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1979,
                        "startLineNumber": 688,
                        "startColumnNumber": 72,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 181,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2039,
                        "startLineNumber": 688,
                        "startColumnNumber": 12,
                        "endLineNumber": 721,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while ((currentRecord=recordParser.nextRecord()) != null) {\n  Object[] values=currentRecord.getValues();\n  if (values != null) {\n    if (fieldIndexes != null) {\n      for (int i=0; i < fieldIndexes.size(); i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n          ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n        }\n else {\n          ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n        }\n      }\n    }\n else {\n      for (int i=0; i < values.length; i++) {\n        if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n          ps.setObject(i * 2 + 1,values[i]);\n          ps.setObject(i * 2 + 2,values[i]);\n        }\n else {\n          ps.setObject(i + 1,values[i]);\n        }\n      }\n    }\n    ps.addBatch();\n    if (++currentBatchSize == maxBatchSize) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n      currentBatchSize=0;\n    }\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 190,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 718,
                    "startColumnNumber": 24,
                    "endLineNumber": 718,
                    "endColumnNumber": 45
                },
                "nodeContext": "currentBatchSize=0;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 723,
                "startColumnNumber": 35,
                "endLineNumber": 723,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 723,
                        "startColumnNumber": 16,
                        "endLineNumber": 723,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "currentBatchSize > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 299,
                        "startLineNumber": 723,
                        "startColumnNumber": 12,
                        "endLineNumber": 727,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (currentBatchSize > 0) {\n  batchIndex++;\n  log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n  ps.executeBatch();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3242,
                        "startLineNumber": 669,
                        "startColumnNumber": 78,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 307,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3312,
                        "startLineNumber": 669,
                        "startColumnNumber": 8,
                        "endLineNumber": 731,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n  final int queryTimeout=functionContext.queryTimeout;\n  try {\n    ps.setQueryTimeout(queryTimeout);\n  }\n catch (  SQLException se) {\n    if (queryTimeout > 0) {\n      throw se;\n    }\n  }\n  Record currentRecord;\n  List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n  final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n  int currentBatchSize=0;\n  int batchIndex=0;\n  while ((currentRecord=recordParser.nextRecord()) != null) {\n    Object[] values=currentRecord.getValues();\n    if (values != null) {\n      if (fieldIndexes != null) {\n        for (int i=0; i < fieldIndexes.size(); i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n            ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n          }\n else {\n            ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n          }\n        }\n      }\n else {\n        for (int i=0; i < values.length; i++) {\n          if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n            ps.setObject(i * 2 + 1,values[i]);\n            ps.setObject(i * 2 + 2,values[i]);\n          }\n else {\n            ps.setObject(i + 1,values[i]);\n          }\n        }\n      }\n      ps.addBatch();\n      if (++currentBatchSize == maxBatchSize) {\n        batchIndex++;\n        log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n        ps.executeBatch();\n        currentBatchSize=0;\n      }\n    }\n  }\n  if (currentBatchSize > 0) {\n    batchIndex++;\n    log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n    ps.executeBatch();\n  }\n  result.routeTo(flowFile,REL_SUCCESS);\n  session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 319,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6317,
                        "startLineNumber": 609,
                        "startColumnNumber": 97,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 602,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 6703,
                        "startLineNumber": 606,
                        "startColumnNumber": 4,
                        "endLineNumber": 732,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void executeDML(ProcessContext context,ProcessSession session,FlowFile flowFile,FunctionContext functionContext,RoutingResult result,Connection con,RecordReader recordParser,String statementType,DMLSettings settings) throws IllegalArgumentException, MalformedRecordException, IOException, SQLException {\n  final RecordSchema recordSchema=recordParser.getSchema();\n  final ComponentLog log=getLogger();\n  final String catalog=context.getProperty(CATALOG_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String schemaName=context.getProperty(SCHEMA_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(flowFile).getValue();\n  final String updateKeys=context.getProperty(UPDATE_KEYS).evaluateAttributeExpressions(flowFile).getValue();\n  final SchemaKey schemaKey=new PutDatabaseRecord.SchemaKey(catalog,schemaName,tableName);\n  if (StringUtils.isEmpty(tableName)) {\n    throw new IllegalArgumentException(format(\"Cannot process %s because Table Name is null or empty\",flowFile));\n  }\n  final boolean includePrimaryKeys=updateKeys == null;\n  TableSchema tableSchema=schemaCache.get(schemaKey,key -> {\n    try {\n      return TableSchema.from(con,catalog,schemaName,tableName,settings.translateFieldNames,includePrimaryKeys);\n    }\n catch (    SQLException e) {\n      throw new ProcessException(e);\n    }\n  }\n);\n  if (tableSchema == null) {\n    throw new IllegalArgumentException(\"No table schema specified!\");\n  }\n  final StringBuilder tableNameBuilder=new StringBuilder();\n  if (catalog != null) {\n    tableNameBuilder.append(catalog).append(\".\");\n  }\n  if (schemaName != null) {\n    tableNameBuilder.append(schemaName).append(\".\");\n  }\n  tableNameBuilder.append(tableName);\n  final String fqTableName=tableNameBuilder.toString();\n  if (recordSchema == null) {\n    throw new IllegalArgumentException(\"No record schema specified!\");\n  }\n  final SqlAndIncludedColumns sqlHolder;\n  if (INSERT_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateInsert(recordSchema,fqTableName,tableSchema,settings);\n  }\n else   if (UPDATE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateUpdate(recordSchema,fqTableName,updateKeys,tableSchema,settings);\n  }\n else   if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n    sqlHolder=generateDelete(recordSchema,fqTableName,tableSchema,settings);\n  }\n else {\n    throw new IllegalArgumentException(format(\"Statement Type %s is not valid, FlowFile %s\",statementType,flowFile));\n  }\n  try (PreparedStatement ps=con.prepareStatement(sqlHolder.getSql())){\n    final int queryTimeout=functionContext.queryTimeout;\n    try {\n      ps.setQueryTimeout(queryTimeout);\n    }\n catch (    SQLException se) {\n      if (queryTimeout > 0) {\n        throw se;\n      }\n    }\n    Record currentRecord;\n    List<Integer> fieldIndexes=sqlHolder.getFieldIndexes();\n    final Integer maxBatchSize=context.getProperty(MAX_BATCH_SIZE).evaluateAttributeExpressions(flowFile).asInteger();\n    int currentBatchSize=0;\n    int batchIndex=0;\n    while ((currentRecord=recordParser.nextRecord()) != null) {\n      Object[] values=currentRecord.getValues();\n      if (values != null) {\n        if (fieldIndexes != null) {\n          for (int i=0; i < fieldIndexes.size(); i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[fieldIndexes.get(i)]);\n              ps.setObject(i * 2 + 2,values[fieldIndexes.get(i)]);\n            }\n else {\n              ps.setObject(i + 1,values[fieldIndexes.get(i)]);\n            }\n          }\n        }\n else {\n          for (int i=0; i < values.length; i++) {\n            if (DELETE_TYPE.equalsIgnoreCase(statementType)) {\n              ps.setObject(i * 2 + 1,values[i]);\n              ps.setObject(i * 2 + 2,values[i]);\n            }\n else {\n              ps.setObject(i + 1,values[i]);\n            }\n          }\n        }\n        ps.addBatch();\n        if (++currentBatchSize == maxBatchSize) {\n          batchIndex++;\n          log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n          ps.executeBatch();\n          currentBatchSize=0;\n        }\n      }\n    }\n    if (currentBatchSize > 0) {\n      batchIndex++;\n      log.debug(\"Executing query {}; fieldIndexes: {}; batch index: {}; batch size: {}\",new Object[]{sqlHolder.getSql(),sqlHolder.getFieldIndexes(),batchIndex,currentBatchSize});\n      ps.executeBatch();\n    }\n    result.routeTo(flowFile,REL_SUCCESS);\n    session.getProvenanceReporter().send(flowFile,functionContext.jdbcUrl);\n  }\n }\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 650,
                    "astHeight": 19
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 723,
                    "startColumnNumber": 16,
                    "endLineNumber": 723,
                    "endColumnNumber": 36
                },
                "nodeContext": "currentBatchSize > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 676,
            "startColumnNumber": 35,
            "endLineNumber": 676,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 685,
            "startColumnNumber": 35,
            "endLineNumber": 685,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 686,
            "startColumnNumber": 29,
            "endLineNumber": 686,
            "endColumnNumber": 30
        },
        {
            "charLength": 1,
            "startLineNumber": 692,
            "startColumnNumber": 37,
            "endLineNumber": 692,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 703,
            "startColumnNumber": 37,
            "endLineNumber": 703,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 718,
            "startColumnNumber": 43,
            "endLineNumber": 718,
            "endColumnNumber": 44
        },
        {
            "charLength": 1,
            "startLineNumber": 723,
            "startColumnNumber": 35,
            "endLineNumber": 723,
            "endColumnNumber": 36
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        }
    ]
}