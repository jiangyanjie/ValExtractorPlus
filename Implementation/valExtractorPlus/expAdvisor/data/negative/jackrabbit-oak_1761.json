{
    "id": 1761,
    "expression": "sessionContext",
    "projectName": "jackrabbit-oak",
    "commitID": "aca6ac3d2b75559b899c335ecfd4661f2fce5959",
    "filePath": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/xml/ImporterImpl.java",
    "occurrences": 12,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 136,
                "startColumnNumber": 25,
                "endLineNumber": 136,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 136,
                        "startColumnNumber": 25,
                        "endLineNumber": 136,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "sessionContext.getOakPathKeepIndex(absPath)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 136,
                        "startColumnNumber": 15,
                        "endLineNumber": 136,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "oakPath=sessionContext.getOakPathKeepIndex(absPath)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 136,
                        "startColumnNumber": 8,
                        "endLineNumber": 136,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 136,
                    "startColumnNumber": 8,
                    "endLineNumber": 136,
                    "endColumnNumber": 69
                },
                "nodeContext": "String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 141,
                "startColumnNumber": 33,
                "endLineNumber": 141,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 141,
                        "startColumnNumber": 33,
                        "endLineNumber": 141,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "sessionContext.getSessionDelegate()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 141,
                        "startColumnNumber": 33,
                        "endLineNumber": 141,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "sessionContext.getSessionDelegate().hasPendingChanges()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 141,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 196,
                        "startLineNumber": 141,
                        "startColumnNumber": 8,
                        "endLineNumber": 143,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n  throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 141,
                    "startColumnNumber": 12,
                    "endLineNumber": 141,
                    "endColumnNumber": 88
                },
                "nodeContext": "isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 146,
                "startColumnNumber": 17,
                "endLineNumber": 146,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 146,
                        "startColumnNumber": 17,
                        "endLineNumber": 146,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "sessionContext.getSessionDelegate()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 146,
                        "startColumnNumber": 17,
                        "endLineNumber": 146,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "sessionContext.getSessionDelegate().getAuthInfo()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 146,
                        "startColumnNumber": 17,
                        "endLineNumber": 146,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "sessionContext.getSessionDelegate().getAuthInfo().getUserID()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 146,
                        "startColumnNumber": 8,
                        "endLineNumber": 146,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 146,
                        "startColumnNumber": 8,
                        "endLineNumber": 146,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 146,
                    "startColumnNumber": 8,
                    "endLineNumber": 146,
                    "endColumnNumber": 79
                },
                "nodeContext": "userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 154,
                "startColumnNumber": 30,
                "endLineNumber": 154,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 154,
                        "startColumnNumber": 30,
                        "endLineNumber": 154,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "sessionContext.getWorkspace()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 154,
                        "startColumnNumber": 30,
                        "endLineNumber": 154,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "sessionContext.getWorkspace().getVersionManager()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 154,
                        "startColumnNumber": 23,
                        "endLineNumber": 154,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "vMgr=sessionContext.getWorkspace().getVersionManager()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 154,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 154,
                    "startColumnNumber": 8,
                    "endLineNumber": 154,
                    "endColumnNumber": 80
                },
                "nodeContext": "VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 159,
                "startColumnNumber": 19,
                "endLineNumber": 159,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 159,
                        "startColumnNumber": 19,
                        "endLineNumber": 159,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "sessionContext.getWorkspace()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 159,
                        "startColumnNumber": 19,
                        "endLineNumber": 159,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "sessionContext.getWorkspace().getLockManager()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 159,
                        "startColumnNumber": 19,
                        "endLineNumber": 159,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "sessionContext.getWorkspace().getLockManager().isLocked(absPath)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 131,
                        "startLineNumber": 158,
                        "startColumnNumber": 12,
                        "endLineNumber": 159,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 18,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 211,
                        "startLineNumber": 158,
                        "startColumnNumber": 8,
                        "endLineNumber": 161,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n  throw new LockException(\"Target node is locked.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 64,
                    "startLineNumber": 159,
                    "startColumnNumber": 19,
                    "endLineNumber": 159,
                    "endColumnNumber": 83
                },
                "nodeContext": "sessionContext.getWorkspace().getLockManager().isLocked(absPath)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 163,
                "startColumnNumber": 24,
                "endLineNumber": 163,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 163,
                        "startColumnNumber": 24,
                        "endLineNumber": 163,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "sessionContext.getAccessManager()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 163,
                        "startColumnNumber": 8,
                        "endLineNumber": 163,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "accessManager=sessionContext.getAccessManager()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 163,
                        "startColumnNumber": 8,
                        "endLineNumber": 163,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "accessManager=sessionContext.getAccessManager();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 163,
                    "startColumnNumber": 8,
                    "endLineNumber": 163,
                    "endColumnNumber": 58
                },
                "nodeContext": "accessManager=sessionContext.getAccessManager();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 166,
                "startColumnNumber": 36,
                "endLineNumber": 166,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 166,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "sessionContext.getWorkspace()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 166,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "sessionContext.getWorkspace().getNodeTypeManager()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 166,
                        "startColumnNumber": 8,
                        "endLineNumber": 166,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 166,
                        "startColumnNumber": 8,
                        "endLineNumber": 166,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 166,
                    "startColumnNumber": 8,
                    "endLineNumber": 166,
                    "endColumnNumber": 87
                },
                "nodeContext": "effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 167,
                "startColumnNumber": 29,
                "endLineNumber": 167,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 167,
                        "startColumnNumber": 29,
                        "endLineNumber": 167,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "sessionContext.getWorkspace()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 167,
                        "startColumnNumber": 29,
                        "endLineNumber": 167,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "sessionContext.getWorkspace().getNodeTypeManager()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 167,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "definitionProvider=sessionContext.getWorkspace().getNodeTypeManager()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 167,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 167,
                    "startColumnNumber": 8,
                    "endLineNumber": 167,
                    "endColumnNumber": 80
                },
                "nodeContext": "definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 176,
                "startColumnNumber": 46,
                "endLineNumber": 176,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 176,
                        "startColumnNumber": 46,
                        "endLineNumber": 176,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "sessionContext.getProtectedItemImporters()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 176,
                        "startColumnNumber": 8,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 176,
                    "startColumnNumber": 46,
                    "endLineNumber": 176,
                    "endColumnNumber": 88
                },
                "nodeContext": "sessionContext.getProtectedItemImporters()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 178,
                "startColumnNumber": 30,
                "endLineNumber": 178,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 178,
                        "startColumnNumber": 30,
                        "endLineNumber": 178,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "sessionContext.getSession()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 178,
                        "startColumnNumber": 16,
                        "endLineNumber": 178,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 178,
                        "startColumnNumber": 12,
                        "endLineNumber": 180,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n  pItemImporters.add(importer);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 334,
                        "startLineNumber": 176,
                        "startColumnNumber": 90,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 176,
                        "startColumnNumber": 8,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 178,
                    "startColumnNumber": 16,
                    "endLineNumber": 178,
                    "endColumnNumber": 163
                },
                "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 178,
                "startColumnNumber": 65,
                "endLineNumber": 178,
                "endColumnNumber": 79
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 178,
                        "startColumnNumber": 16,
                        "endLineNumber": 178,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 178,
                        "startColumnNumber": 12,
                        "endLineNumber": 180,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n  pItemImporters.add(importer);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 334,
                        "startLineNumber": 176,
                        "startColumnNumber": 90,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 176,
                        "startColumnNumber": 8,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 178,
                    "startColumnNumber": 16,
                    "endLineNumber": 178,
                    "endColumnNumber": 163
                },
                "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        },
        {
            "nodeContext": "sessionContext",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 178,
                "startColumnNumber": 126,
                "endLineNumber": 178,
                "endColumnNumber": 140
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 178,
                        "startColumnNumber": 126,
                        "endLineNumber": 178,
                        "endColumnNumber": 162
                    },
                    "nodeContext": "sessionContext.getSecurityProvider()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 178,
                        "startColumnNumber": 16,
                        "endLineNumber": 178,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 178,
                        "startColumnNumber": 12,
                        "endLineNumber": 180,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n  pItemImporters.add(importer);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 334,
                        "startLineNumber": 176,
                        "startColumnNumber": 90,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 176,
                        "startColumnNumber": 8,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 178,
                    "startColumnNumber": 16,
                    "endLineNumber": 178,
                    "endColumnNumber": 163
                },
                "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.jcr.session.SessionContext"
        }
    ],
    "positionList": [
        {
            "charLength": 14,
            "startLineNumber": 136,
            "startColumnNumber": 25,
            "endLineNumber": 136,
            "endColumnNumber": 39
        },
        {
            "charLength": 14,
            "startLineNumber": 141,
            "startColumnNumber": 33,
            "endLineNumber": 141,
            "endColumnNumber": 47
        },
        {
            "charLength": 14,
            "startLineNumber": 146,
            "startColumnNumber": 17,
            "endLineNumber": 146,
            "endColumnNumber": 31
        },
        {
            "charLength": 14,
            "startLineNumber": 154,
            "startColumnNumber": 30,
            "endLineNumber": 154,
            "endColumnNumber": 44
        },
        {
            "charLength": 14,
            "startLineNumber": 159,
            "startColumnNumber": 19,
            "endLineNumber": 159,
            "endColumnNumber": 33
        },
        {
            "charLength": 14,
            "startLineNumber": 163,
            "startColumnNumber": 24,
            "endLineNumber": 163,
            "endColumnNumber": 38
        },
        {
            "charLength": 14,
            "startLineNumber": 166,
            "startColumnNumber": 36,
            "endLineNumber": 166,
            "endColumnNumber": 50
        },
        {
            "charLength": 14,
            "startLineNumber": 167,
            "startColumnNumber": 29,
            "endLineNumber": 167,
            "endColumnNumber": 43
        },
        {
            "charLength": 14,
            "startLineNumber": 176,
            "startColumnNumber": 46,
            "endLineNumber": 176,
            "endColumnNumber": 60
        },
        {
            "charLength": 14,
            "startLineNumber": 178,
            "startColumnNumber": 30,
            "endLineNumber": 178,
            "endColumnNumber": 44
        },
        {
            "charLength": 14,
            "startLineNumber": 178,
            "startColumnNumber": 65,
            "endLineNumber": 178,
            "endColumnNumber": 79
        },
        {
            "charLength": 14,
            "startLineNumber": 178,
            "startColumnNumber": 126,
            "endLineNumber": 178,
            "endColumnNumber": 140
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 0
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 0
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 1
        }
    ]
}