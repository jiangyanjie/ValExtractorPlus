{
    "id": 171,
    "expression": "(String)result",
    "projectName": "redisson@redisson",
    "commitID": "981ce2e4b13ec3ebc89a703d754a9ca1dcc9f3ac",
    "filePath": "redisson/src/main/java/org/redisson/liveobject/core/AccessorInterceptor.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "(String)result",
            "nodeType": "CastExpression",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 95,
                "startColumnNumber": 59,
                "endLineNumber": 95,
                "endColumnNumber": 74
            },
            "astNodeNumber": 4,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 95,
                        "startColumnNumber": 27,
                        "endLineNumber": 95,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "Enum.valueOf((Class)fieldType,(String)result)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 95,
                        "startColumnNumber": 20,
                        "endLineNumber": 95,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "return Enum.valueOf((Class)fieldType,(String)result);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 94,
                        "startColumnNumber": 46,
                        "endLineNumber": 96,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return Enum.valueOf((Class)fieldType,(String)result);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 126,
                        "startLineNumber": 94,
                        "startColumnNumber": 16,
                        "endLineNumber": 96,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (result instanceof String) {\n  return Enum.valueOf((Class)fieldType,(String)result);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 189,
                        "startLineNumber": 93,
                        "startColumnNumber": 54,
                        "endLineNumber": 98,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (result instanceof String) {\n    return Enum.valueOf((Class)fieldType,(String)result);\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 231,
                        "startLineNumber": 93,
                        "startColumnNumber": 12,
                        "endLineNumber": 98,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (result != null && fieldType.isEnum()) {\n  if (result instanceof String) {\n    return Enum.valueOf((Class)fieldType,(String)result);\n  }\n  return result;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 972,
                        "startLineNumber": 83,
                        "startColumnNumber": 41,
                        "endLineNumber": 103,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object result=liveMap.get(fieldName);\n  if (result == null) {\n    RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n    if (ar != null) {\n      connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n      return ar;\n    }\n  }\n  if (result != null && fieldType.isEnum()) {\n    if (result instanceof String) {\n      return Enum.valueOf((Class)fieldType,(String)result);\n    }\n    return result;\n  }\n  if (result instanceof RedissonReference) {\n    return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 108,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1005,
                        "startLineNumber": 83,
                        "startColumnNumber": 8,
                        "endLineNumber": 103,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isGetter(method,fieldName)) {\n  Object result=liveMap.get(fieldName);\n  if (result == null) {\n    RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n    if (ar != null) {\n      connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n      return ar;\n    }\n  }\n  if (result != null && fieldType.isEnum()) {\n    if (result instanceof String) {\n      return Enum.valueOf((Class)fieldType,(String)result);\n    }\n    return result;\n  }\n  if (result instanceof RedissonReference) {\n    return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n  }\n  return result;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 113,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 56,
                    "startLineNumber": 95,
                    "startColumnNumber": 20,
                    "endLineNumber": 95,
                    "endColumnNumber": 76
                },
                "nodeContext": "return Enum.valueOf((Class)fieldType,(String)result);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 15,
            "startLineNumber": 95,
            "startColumnNumber": 59,
            "endLineNumber": 95,
            "endColumnNumber": 74
        }
    ],
    "layoutRelationDataList": []
}