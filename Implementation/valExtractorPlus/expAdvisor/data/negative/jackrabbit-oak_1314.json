{
    "id": 1314,
    "expression": "entry.getKey().getClusterId()",
    "projectName": "jackrabbit-oak",
    "commitID": "24c5e6ba49e33cb9d0c52dc73a9ef2831decd159",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/SplitOperations.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "entry.getKey().getClusterId()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 29,
                "startLineNumber": 200,
                "startColumnNumber": 46,
                "endLineNumber": 200,
                "endColumnNumber": 75
            },
            "astNodeNumber": 5,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 200,
                        "startColumnNumber": 20,
                        "endLineNumber": 200,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "context.getClusterId() != entry.getKey().getClusterId()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 161,
                        "startLineNumber": 200,
                        "startColumnNumber": 16,
                        "endLineNumber": 203,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (context.getClusterId() != entry.getKey().getClusterId()) {\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 197,
                        "startColumnNumber": 19,
                        "endLineNumber": 212,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (context.getClusterId() != entry.getKey().getClusterId()) {\n    continue;\n  }\n  if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n    revisions.put(entry.getKey(),entry.getValue());\n    numValues++;\n    trackHigh(entry.getKey());\n    trackLow(entry.getKey());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 54,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 868,
                        "startLineNumber": 194,
                        "startColumnNumber": 12,
                        "endLineNumber": 212,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (splitRevs.contains(entry.getKey())) {\n  revisions.put(entry.getKey(),entry.getValue());\n  numValues++;\n}\n else {\n  if (context.getClusterId() != entry.getKey().getClusterId()) {\n    continue;\n  }\n  if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n    revisions.put(entry.getKey(),entry.getValue());\n    numValues++;\n    trackHigh(entry.getKey());\n    trackLow(entry.getKey());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 75,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 892,
                        "startLineNumber": 193,
                        "startColumnNumber": 85,
                        "endLineNumber": 213,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (splitRevs.contains(entry.getKey())) {\n    revisions.put(entry.getKey(),entry.getValue());\n    numValues++;\n  }\n else {\n    if (context.getClusterId() != entry.getKey().getClusterId()) {\n      continue;\n    }\n    if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n      revisions.put(entry.getKey(),entry.getValue());\n      numValues++;\n      trackHigh(entry.getKey());\n      trackLow(entry.getKey());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 193,
                        "startColumnNumber": 8,
                        "endLineNumber": 213,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (Map.Entry<Revision,String> entry : doc.getLocalRevisions().entrySet()) {\n  if (splitRevs.contains(entry.getKey())) {\n    revisions.put(entry.getKey(),entry.getValue());\n    numValues++;\n  }\n else {\n    if (context.getClusterId() != entry.getKey().getClusterId()) {\n      continue;\n    }\n    if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n      revisions.put(entry.getKey(),entry.getValue());\n      numValues++;\n      trackHigh(entry.getKey());\n      trackLow(entry.getKey());\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 93,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1616,
                        "startLineNumber": 190,
                        "startColumnNumber": 49,
                        "endLineNumber": 224,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  NavigableMap<Revision,String> revisions=new TreeMap<Revision,String>(context.getRevisionComparator());\n  for (  Map.Entry<Revision,String> entry : doc.getLocalRevisions().entrySet()) {\n    if (splitRevs.contains(entry.getKey())) {\n      revisions.put(entry.getKey(),entry.getValue());\n      numValues++;\n    }\n else {\n      if (context.getClusterId() != entry.getKey().getClusterId()) {\n        continue;\n      }\n      if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n        revisions.put(entry.getKey(),entry.getValue());\n        numValues++;\n        trackHigh(entry.getKey());\n        trackLow(entry.getKey());\n      }\n    }\n  }\n  committedChanges.put(REVISIONS,revisions);\n  NavigableMap<Revision,String> commitRoot=new TreeMap<Revision,String>(context.getRevisionComparator());\n  for (  Map.Entry<Revision,String> entry : doc.getLocalCommitRoot().entrySet()) {\n    if (splitRevs.contains(entry.getKey())) {\n      commitRoot.put(entry.getKey(),entry.getValue());\n      numValues++;\n    }\n  }\n  committedChanges.put(COMMIT_ROOT,commitRoot);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 187,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1776,
                        "startLineNumber": 186,
                        "startColumnNumber": 4,
                        "endLineNumber": 224,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Collect _revisions and _commitRoot entries that can be moved to a previous document.\n */\nprivate void collectRevisionsAndCommitRoot(){\n  NavigableMap<Revision,String> revisions=new TreeMap<Revision,String>(context.getRevisionComparator());\n  for (  Map.Entry<Revision,String> entry : doc.getLocalRevisions().entrySet()) {\n    if (splitRevs.contains(entry.getKey())) {\n      revisions.put(entry.getKey(),entry.getValue());\n      numValues++;\n    }\n else {\n      if (context.getClusterId() != entry.getKey().getClusterId()) {\n        continue;\n      }\n      if (doc.isCommitted(entry.getKey()) && !mostRecentRevs.contains(entry.getKey())) {\n        revisions.put(entry.getKey(),entry.getValue());\n        numValues++;\n        trackHigh(entry.getKey());\n        trackLow(entry.getKey());\n      }\n    }\n  }\n  committedChanges.put(REVISIONS,revisions);\n  NavigableMap<Revision,String> commitRoot=new TreeMap<Revision,String>(context.getRevisionComparator());\n  for (  Map.Entry<Revision,String> entry : doc.getLocalCommitRoot().entrySet()) {\n    if (splitRevs.contains(entry.getKey())) {\n      commitRoot.put(entry.getKey(),entry.getValue());\n      numValues++;\n    }\n  }\n  committedChanges.put(COMMIT_ROOT,commitRoot);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 200,
                    "startColumnNumber": 20,
                    "endLineNumber": 200,
                    "endColumnNumber": 75
                },
                "nodeContext": "context.getClusterId() != entry.getKey().getClusterId()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 3,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 29,
            "startLineNumber": 200,
            "startColumnNumber": 46,
            "endLineNumber": 200,
            "endColumnNumber": 75
        }
    ],
    "layoutRelationDataList": []
}