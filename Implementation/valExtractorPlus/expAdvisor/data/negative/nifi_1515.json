{
    "id": 1515,
    "expression": "flowController",
    "projectName": "nifi",
    "commitID": "fca59ff9d0226ecc4d62d078291413d2fbdb1781",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java",
    "occurrences": 4,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "flowController",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 764,
                "startColumnNumber": 34,
                "endLineNumber": 764,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 764,
                        "startColumnNumber": 34,
                        "endLineNumber": 764,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "flowController.getGroup(flowController.getRootGroupId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 764,
                        "startColumnNumber": 27,
                        "endLineNumber": 764,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "root=flowController.getGroup(flowController.getRootGroupId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 764,
                        "startColumnNumber": 8,
                        "endLineNumber": 764,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 764,
                    "startColumnNumber": 8,
                    "endLineNumber": 764,
                    "endColumnNumber": 91
                },
                "nodeContext": "final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.FlowController"
        },
        {
            "nodeContext": "flowController",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 764,
                "startColumnNumber": 58,
                "endLineNumber": 764,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 764,
                        "startColumnNumber": 58,
                        "endLineNumber": 764,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "flowController.getRootGroupId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 764,
                        "startColumnNumber": 34,
                        "endLineNumber": 764,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "flowController.getGroup(flowController.getRootGroupId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 764,
                        "startColumnNumber": 27,
                        "endLineNumber": 764,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "root=flowController.getGroup(flowController.getRootGroupId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 764,
                        "startColumnNumber": 8,
                        "endLineNumber": 764,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 764,
                    "startColumnNumber": 8,
                    "endLineNumber": 764,
                    "endColumnNumber": 91
                },
                "nodeContext": "final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.FlowController"
        },
        {
            "nodeContext": "flowController",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 802,
                "startColumnNumber": 61,
                "endLineNumber": 802,
                "endColumnNumber": 75
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 802,
                        "startColumnNumber": 61,
                        "endLineNumber": 802,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "flowController.getAllControllerServices()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 268,
                        "startLineNumber": 802,
                        "startColumnNumber": 8,
                        "endLineNumber": 804,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 802,
                    "startColumnNumber": 61,
                    "endLineNumber": 802,
                    "endColumnNumber": 102
                },
                "nodeContext": "flowController.getAllControllerServices()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.FlowController"
        },
        {
            "nodeContext": "flowController",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 807,
                "startColumnNumber": 53,
                "endLineNumber": 807,
                "endColumnNumber": 67
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 807,
                        "startColumnNumber": 53,
                        "endLineNumber": 807,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "flowController.getAllReportingTasks()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 244,
                        "startLineNumber": 807,
                        "startColumnNumber": 8,
                        "endLineNumber": 809,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 807,
                    "startColumnNumber": 53,
                    "endLineNumber": 807,
                    "endColumnNumber": 90
                },
                "nodeContext": "flowController.getAllReportingTasks()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.FlowController"
        }
    ],
    "positionList": [
        {
            "charLength": 14,
            "startLineNumber": 764,
            "startColumnNumber": 34,
            "endLineNumber": 764,
            "endColumnNumber": 48
        },
        {
            "charLength": 14,
            "startLineNumber": 764,
            "startColumnNumber": 58,
            "endLineNumber": 764,
            "endColumnNumber": 72
        },
        {
            "charLength": 14,
            "startLineNumber": 802,
            "startColumnNumber": 61,
            "endLineNumber": 802,
            "endColumnNumber": 75
        },
        {
            "charLength": 14,
            "startLineNumber": 807,
            "startColumnNumber": 53,
            "endLineNumber": 807,
            "endColumnNumber": 67
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 0
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        }
    ]
}