{
    "id": 2747,
    "expression": "this",
    "projectName": "commons-math",
    "commitID": "57e0c33a52a0f1e641161e6bf1278e63ee6384cc",
    "filePath": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 957,
                "startColumnNumber": 35,
                "endLineNumber": 957,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 957,
                        "startColumnNumber": 35,
                        "endLineNumber": 957,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "this.getRowDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 957,
                        "startColumnNumber": 12,
                        "endLineNumber": 957,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "b.getRowDimension() != this.getRowDimension()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 957,
                        "startColumnNumber": 8,
                        "endLineNumber": 959,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (b.getRowDimension() != this.getRowDimension()) {\n  throw new IllegalArgumentException(\"Incorrect row dimension\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 957,
                    "startColumnNumber": 12,
                    "endLineNumber": 957,
                    "endColumnNumber": 57
                },
                "nodeContext": "b.getRowDimension() != this.getRowDimension()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.BigMatrixImpl"
        },
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 960,
                "startColumnNumber": 13,
                "endLineNumber": 960,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 960,
                        "startColumnNumber": 13,
                        "endLineNumber": 960,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "this.isSquare()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 960,
                        "startColumnNumber": 12,
                        "endLineNumber": 960,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "!this.isSquare()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 960,
                        "startColumnNumber": 8,
                        "endLineNumber": 962,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!this.isSquare()) {\n  throw new InvalidMatrixException(\"coefficient matrix is not square\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 960,
                    "startColumnNumber": 12,
                    "endLineNumber": 960,
                    "endColumnNumber": 28
                },
                "nodeContext": "!this.isSquare()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.BigMatrixImpl"
        },
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 963,
                "startColumnNumber": 12,
                "endLineNumber": 963,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 963,
                        "startColumnNumber": 12,
                        "endLineNumber": 963,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "this.isSingular()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 963,
                        "startColumnNumber": 8,
                        "endLineNumber": 965,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (this.isSingular()) {\n  throw new InvalidMatrixException(\"Matrix is singular.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 963,
                    "startColumnNumber": 12,
                    "endLineNumber": 963,
                    "endColumnNumber": 29
                },
                "nodeContext": "this.isSingular()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.BigMatrixImpl"
        },
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 967,
                "startColumnNumber": 19,
                "endLineNumber": 967,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 967,
                        "startColumnNumber": 19,
                        "endLineNumber": 967,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "this.getColumnDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 967,
                        "startColumnNumber": 12,
                        "endLineNumber": 967,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "nCol=this.getColumnDimension()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 967,
                        "startColumnNumber": 8,
                        "endLineNumber": 967,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "int nCol=this.getColumnDimension();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 967,
                    "startColumnNumber": 8,
                    "endLineNumber": 967,
                    "endColumnNumber": 45
                },
                "nodeContext": "int nCol=this.getColumnDimension();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.BigMatrixImpl"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 957,
            "startColumnNumber": 35,
            "endLineNumber": 957,
            "endColumnNumber": 39
        },
        {
            "charLength": 4,
            "startLineNumber": 960,
            "startColumnNumber": 13,
            "endLineNumber": 960,
            "endColumnNumber": 17
        },
        {
            "charLength": 4,
            "startLineNumber": 963,
            "startColumnNumber": 12,
            "endLineNumber": 963,
            "endColumnNumber": 16
        },
        {
            "charLength": 4,
            "startLineNumber": 967,
            "startColumnNumber": 19,
            "endLineNumber": 967,
            "endColumnNumber": 23
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        }
    ]
}