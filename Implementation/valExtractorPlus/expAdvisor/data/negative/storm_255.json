{
    "id": 255,
    "expression": "newLogConfigs.containsKey(loggerName)",
    "projectName": "storm",
    "commitID": "f9fb20696b4e6e9dd7419b291087123c65cbd35c",
    "filePath": "storm-core/src/jvm/org/apache/storm/daemon/worker/LogConfigManager.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "newLogConfigs.containsKey(loggerName)",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 37,
                "startLineNumber": 82,
                "startColumnNumber": 22,
                "endLineNumber": 82,
                "endColumnNumber": 59
            },
            "astNodeNumber": 4,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 82,
                        "startColumnNumber": 20,
                        "endLineNumber": 82,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "!newLogConfigs.containsKey(loggerName)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 266,
                        "startLineNumber": 82,
                        "startColumnNumber": 16,
                        "endLineNumber": 86,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (!newLogConfigs.containsKey(loggerName)) {\n  setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 298,
                        "startLineNumber": 81,
                        "startColumnNumber": 79,
                        "endLineNumber": 87,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (!newLogConfigs.containsKey(loggerName)) {\n    setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 365,
                        "startLineNumber": 81,
                        "startColumnNumber": 12,
                        "endLineNumber": 87,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (String loggerName : latestLogConfig.get().descendingKeySet()) {\n  if (!newLogConfigs.containsKey(loggerName)) {\n    setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 31,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2543,
                        "startLineNumber": 56,
                        "startColumnNumber": 31,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 254,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 82,
                    "startColumnNumber": 20,
                    "endLineNumber": 82,
                    "endColumnNumber": 59
                },
                "nodeContext": "!newLogConfigs.containsKey(loggerName)",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 3,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 37,
            "startLineNumber": 82,
            "startColumnNumber": 22,
            "endLineNumber": 82,
            "endColumnNumber": 59
        }
    ],
    "layoutRelationDataList": []
}