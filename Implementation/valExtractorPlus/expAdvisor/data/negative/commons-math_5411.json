{
    "id": 5411,
    "expression": "max",
    "projectName": "commons-math",
    "commitID": "7e7207cd4fa31f8f75b9a8a309c98c12fb672a7b",
    "filePath": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 823,
                "startColumnNumber": 28,
                "endLineNumber": 823,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 823,
                        "startColumnNumber": 25,
                        "endLineNumber": 823,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 823,
                        "startColumnNumber": 25,
                        "endLineNumber": 823,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lu[max][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 823,
                        "startColumnNumber": 16,
                        "endLineNumber": 823,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "Math.abs(lu[max][col])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 823,
                        "startColumnNumber": 16,
                        "endLineNumber": 823,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "Math.abs(lu[max][col]) < TOO_SMALL",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 154,
                        "startLineNumber": 823,
                        "startColumnNumber": 12,
                        "endLineNumber": 826,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (Math.abs(lu[max][col]) < TOO_SMALL) {\n  lu=null;\n  throw new InvalidMatrixException(\"matrix is singular\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 823,
                    "startColumnNumber": 16,
                    "endLineNumber": 823,
                    "endColumnNumber": 50
                },
                "nodeContext": "Math.abs(lu[max][col]) < TOO_SMALL",
                "nodeType": "InfixExpression",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 829,
                "startColumnNumber": 16,
                "endLineNumber": 829,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 829,
                        "startColumnNumber": 16,
                        "endLineNumber": 829,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "max != col",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 425,
                        "startLineNumber": 829,
                        "startColumnNumber": 12,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 829,
                    "startColumnNumber": 16,
                    "endLineNumber": 829,
                    "endColumnNumber": 26
                },
                "nodeContext": "max != col",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 832,
                "startColumnNumber": 29,
                "endLineNumber": 832,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 832,
                        "startColumnNumber": 26,
                        "endLineNumber": 832,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 832,
                        "startColumnNumber": 26,
                        "endLineNumber": 832,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "lu[max][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 832,
                        "startColumnNumber": 20,
                        "endLineNumber": 832,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "tmp=lu[max][i]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 832,
                        "startColumnNumber": 20,
                        "endLineNumber": 832,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "tmp=lu[max][i];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 831,
                        "startColumnNumber": 48,
                        "endLineNumber": 835,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 831,
                        "startColumnNumber": 16,
                        "endLineNumber": 835,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < nCols; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 829,
                        "startColumnNumber": 28,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 425,
                        "startLineNumber": 829,
                        "startColumnNumber": 12,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 832,
                    "startColumnNumber": 20,
                    "endLineNumber": 832,
                    "endColumnNumber": 37
                },
                "nodeContext": "tmp=lu[max][i];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 833,
                "startColumnNumber": 23,
                "endLineNumber": 833,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 833,
                        "startColumnNumber": 20,
                        "endLineNumber": 833,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 833,
                        "startColumnNumber": 20,
                        "endLineNumber": 833,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "lu[max][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 833,
                        "startColumnNumber": 20,
                        "endLineNumber": 833,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[max][i]=lu[col][i]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 833,
                        "startColumnNumber": 20,
                        "endLineNumber": 833,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "lu[max][i]=lu[col][i];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 831,
                        "startColumnNumber": 48,
                        "endLineNumber": 835,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 831,
                        "startColumnNumber": 16,
                        "endLineNumber": 835,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < nCols; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 829,
                        "startColumnNumber": 28,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 425,
                        "startLineNumber": 829,
                        "startColumnNumber": 12,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 833,
                    "startColumnNumber": 20,
                    "endLineNumber": 833,
                    "endColumnNumber": 44
                },
                "nodeContext": "lu[max][i]=lu[col][i];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 836,
                "startColumnNumber": 39,
                "endLineNumber": 836,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 836,
                        "startColumnNumber": 27,
                        "endLineNumber": 836,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "permutation[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 836,
                        "startColumnNumber": 20,
                        "endLineNumber": 836,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "temp=permutation[max]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 836,
                        "startColumnNumber": 16,
                        "endLineNumber": 836,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "int temp=permutation[max];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 829,
                        "startColumnNumber": 28,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 425,
                        "startLineNumber": 829,
                        "startColumnNumber": 12,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 836,
                    "startColumnNumber": 16,
                    "endLineNumber": 836,
                    "endColumnNumber": 44
                },
                "nodeContext": "int temp=permutation[max];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "max",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 837,
                "startColumnNumber": 28,
                "endLineNumber": 837,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 837,
                        "startColumnNumber": 16,
                        "endLineNumber": 837,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "permutation[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 837,
                        "startColumnNumber": 16,
                        "endLineNumber": 837,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "permutation[max]=permutation[col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 837,
                        "startColumnNumber": 16,
                        "endLineNumber": 837,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "permutation[max]=permutation[col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 829,
                        "startColumnNumber": 28,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 425,
                        "startLineNumber": 829,
                        "startColumnNumber": 12,
                        "endLineNumber": 840,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < nCols; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=permutation[max];\n  permutation[max]=permutation[col];\n  permutation[col]=temp;\n  parity=-parity;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 837,
                    "startColumnNumber": 16,
                    "endLineNumber": 837,
                    "endColumnNumber": 52
                },
                "nodeContext": "permutation[max]=permutation[col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 823,
            "startColumnNumber": 28,
            "endLineNumber": 823,
            "endColumnNumber": 31
        },
        {
            "charLength": 3,
            "startLineNumber": 829,
            "startColumnNumber": 16,
            "endLineNumber": 829,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 832,
            "startColumnNumber": 29,
            "endLineNumber": 832,
            "endColumnNumber": 32
        },
        {
            "charLength": 3,
            "startLineNumber": 833,
            "startColumnNumber": 23,
            "endLineNumber": 833,
            "endColumnNumber": 26
        },
        {
            "charLength": 3,
            "startLineNumber": 836,
            "startColumnNumber": 39,
            "endLineNumber": 836,
            "endColumnNumber": 42
        },
        {
            "charLength": 3,
            "startLineNumber": 837,
            "startColumnNumber": 28,
            "endLineNumber": 837,
            "endColumnNumber": 31
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        }
    ]
}