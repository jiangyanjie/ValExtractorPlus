{
    "id": 2994,
    "expression": "sum",
    "projectName": "commons-math",
    "commitID": "57e0c33a52a0f1e641161e6bf1278e63ee6384cc",
    "filePath": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1047,
                "startColumnNumber": 26,
                "endLineNumber": 1047,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 1047,
                        "startColumnNumber": 26,
                        "endLineNumber": 1047,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "sum.subtract(lu[row][i].multiply(lu[i][col]))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1047,
                        "startColumnNumber": 20,
                        "endLineNumber": 1047,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]))",
                    "nodeType": "Assignment",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1047,
                        "startColumnNumber": 20,
                        "endLineNumber": 1047,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 1046,
                        "startColumnNumber": 46,
                        "endLineNumber": 1048,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 122,
                        "startLineNumber": 1046,
                        "startColumnNumber": 16,
                        "endLineNumber": 1048,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < row; i++) {\n  sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 226,
                        "startLineNumber": 1044,
                        "startColumnNumber": 48,
                        "endLineNumber": 1050,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 262,
                        "startLineNumber": 1044,
                        "startColumnNumber": 12,
                        "endLineNumber": 1050,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 58,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 1047,
                    "startColumnNumber": 20,
                    "endLineNumber": 1047,
                    "endColumnNumber": 72
                },
                "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1049,
                "startColumnNumber": 31,
                "endLineNumber": 1049,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1049,
                        "startColumnNumber": 16,
                        "endLineNumber": 1049,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]=sum",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1049,
                        "startColumnNumber": 16,
                        "endLineNumber": 1049,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "lu[row][col]=sum;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 226,
                        "startLineNumber": 1044,
                        "startColumnNumber": 48,
                        "endLineNumber": 1050,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 262,
                        "startLineNumber": 1044,
                        "startColumnNumber": 12,
                        "endLineNumber": 1050,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 58,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 1049,
                    "startColumnNumber": 16,
                    "endLineNumber": 1049,
                    "endColumnNumber": 35
                },
                "nodeContext": "lu[row][col]=sum;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1058,
                "startColumnNumber": 26,
                "endLineNumber": 1058,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 1058,
                        "startColumnNumber": 26,
                        "endLineNumber": 1058,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "sum.subtract(lu[row][i].multiply(lu[i][col]))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1058,
                        "startColumnNumber": 20,
                        "endLineNumber": 1058,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]))",
                    "nodeType": "Assignment",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1058,
                        "startColumnNumber": 20,
                        "endLineNumber": 1058,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 1057,
                        "startColumnNumber": 46,
                        "endLineNumber": 1059,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 122,
                        "startLineNumber": 1057,
                        "startColumnNumber": 16,
                        "endLineNumber": 1059,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < col; i++) {\n  sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 1055,
                        "startColumnNumber": 52,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 482,
                        "startLineNumber": 1055,
                        "startColumnNumber": 12,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 78,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 1058,
                    "startColumnNumber": 20,
                    "endLineNumber": 1058,
                    "endColumnNumber": 72
                },
                "nodeContext": "sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1060,
                "startColumnNumber": 31,
                "endLineNumber": 1060,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1060,
                        "startColumnNumber": 16,
                        "endLineNumber": 1060,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]=sum",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1060,
                        "startColumnNumber": 16,
                        "endLineNumber": 1060,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "lu[row][col]=sum;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 1055,
                        "startColumnNumber": 52,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 482,
                        "startLineNumber": 1055,
                        "startColumnNumber": 12,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 78,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 1060,
                    "startColumnNumber": 16,
                    "endLineNumber": 1060,
                    "endColumnNumber": 35
                },
                "nodeContext": "lu[row][col]=sum;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1063,
                "startColumnNumber": 20,
                "endLineNumber": 1063,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1063,
                        "startColumnNumber": 20,
                        "endLineNumber": 1063,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "sum.abs()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1063,
                        "startColumnNumber": 20,
                        "endLineNumber": 1063,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "sum.abs().compareTo(largest)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 1063,
                        "startColumnNumber": 20,
                        "endLineNumber": 1063,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "sum.abs().compareTo(largest) == 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 1063,
                        "startColumnNumber": 16,
                        "endLineNumber": 1066,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (sum.abs().compareTo(largest) == 1) {\n  largest=sum.abs();\n  max=row;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 1055,
                        "startColumnNumber": 52,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 482,
                        "startLineNumber": 1055,
                        "startColumnNumber": 12,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 78,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 1063,
                    "startColumnNumber": 20,
                    "endLineNumber": 1063,
                    "endColumnNumber": 53
                },
                "nodeContext": "sum.abs().compareTo(largest) == 1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "sum",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1064,
                "startColumnNumber": 30,
                "endLineNumber": 1064,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1064,
                        "startColumnNumber": 30,
                        "endLineNumber": 1064,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "sum.abs()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1064,
                        "startColumnNumber": 20,
                        "endLineNumber": 1064,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "largest=sum.abs()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1064,
                        "startColumnNumber": 20,
                        "endLineNumber": 1064,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "largest=sum.abs();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1063,
                        "startColumnNumber": 55,
                        "endLineNumber": 1066,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  largest=sum.abs();\n  max=row;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 1063,
                        "startColumnNumber": 16,
                        "endLineNumber": 1066,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (sum.abs().compareTo(largest) == 1) {\n  largest=sum.abs();\n  max=row;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 1055,
                        "startColumnNumber": 52,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 482,
                        "startLineNumber": 1055,
                        "startColumnNumber": 12,
                        "endLineNumber": 1067,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n  }\n  lu[row][col]=sum;\n  if (sum.abs().compareTo(largest) == 1) {\n    largest=sum.abs();\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 78,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1953,
                        "startLineNumber": 1039,
                        "startColumnNumber": 46,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1991,
                        "startLineNumber": 1039,
                        "startColumnNumber": 8,
                        "endLineNumber": 1094,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  BigDecimal sum=ZERO;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  BigDecimal largest=ZERO;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n    }\n    lu[row][col]=sum;\n    if (sum.abs().compareTo(largest) == 1) {\n      largest=sum.abs();\n      max=row;\n    }\n  }\n  if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    BigDecimal tmp=ZERO;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 300,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2537,
                        "startLineNumber": 1022,
                        "startColumnNumber": 60,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 361,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3478,
                        "startLineNumber": 1004,
                        "startColumnNumber": 4,
                        "endLineNumber": 1096,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new  <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decompostion</a> for this matrix, storing the result for use by other methods.  <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algortithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    BigDecimal sum=ZERO;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    BigDecimal largest=ZERO;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum=sum.subtract(lu[row][i].multiply(lu[i][col]));\n      }\n      lu[row][col]=sum;\n      if (sum.abs().compareTo(largest) == 1) {\n        largest=sum.abs();\n        max=row;\n      }\n    }\n    if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      BigDecimal tmp=ZERO;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]=lu[row][col].divide(lu[col][col],scale,roundingMode);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 368,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1064,
                    "startColumnNumber": 20,
                    "endLineNumber": 1064,
                    "endColumnNumber": 40
                },
                "nodeContext": "largest=sum.abs();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.math.BigDecimal"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 1047,
            "startColumnNumber": 26,
            "endLineNumber": 1047,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 1049,
            "startColumnNumber": 31,
            "endLineNumber": 1049,
            "endColumnNumber": 34
        },
        {
            "charLength": 3,
            "startLineNumber": 1058,
            "startColumnNumber": 26,
            "endLineNumber": 1058,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 1060,
            "startColumnNumber": 31,
            "endLineNumber": 1060,
            "endColumnNumber": 34
        },
        {
            "charLength": 3,
            "startLineNumber": 1063,
            "startColumnNumber": 20,
            "endLineNumber": 1063,
            "endColumnNumber": 23
        },
        {
            "charLength": 3,
            "startLineNumber": 1064,
            "startColumnNumber": 30,
            "endLineNumber": 1064,
            "endColumnNumber": 33
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        }
    ]
}