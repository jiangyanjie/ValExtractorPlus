{
    "id": 34,
    "expression": "entry.getKey()",
    "projectName": "johnzon",
    "commitID": "cf35affe65d8a4a4789071b86d04423a8ab41a03",
    "filePath": "johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "entry.getKey()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 486,
                "startColumnNumber": 101,
                "endLineNumber": 486,
                "endColumnNumber": 115
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 486,
                        "startColumnNumber": 80,
                        "endLineNumber": 486,
                        "endColumnNumber": 116
                    },
                    "nodeContext": "naming.translateName(entry.getKey())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 104,
                        "startLineNumber": 486,
                        "startColumnNumber": 31,
                        "endLineNumber": 486,
                        "endColumnNumber": 135
                    },
                    "nodeContext": "property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value()",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 486,
                        "startColumnNumber": 25,
                        "endLineNumber": 486,
                        "endColumnNumber": 135
                    },
                    "nodeContext": "key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 486,
                        "startColumnNumber": 12,
                        "endLineNumber": 486,
                        "endColumnNumber": 136
                    },
                    "nodeContext": "final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 486,
                    "startColumnNumber": 12,
                    "endLineNumber": 486,
                    "endColumnNumber": 136
                },
                "nodeContext": "final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 25,
                "astHeight": 7
            },
            "tokenLength": 2,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 14,
            "startLineNumber": 486,
            "startColumnNumber": 101,
            "endLineNumber": 486,
            "endColumnNumber": 115
        }
    ],
    "layoutRelationDataList": []
}