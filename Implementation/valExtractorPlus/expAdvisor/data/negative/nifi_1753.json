{
    "id": 1753,
    "expression": "userId",
    "projectName": "nifi",
    "commitID": "95a3115f9bf075b704bc393bddba235e4a946710",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/OpenPGPKeyBasedEncryptor.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 239,
                "startColumnNumber": 41,
                "endLineNumber": 239,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 239,
                        "startColumnNumber": 28,
                        "endLineNumber": 239,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "getPublicKey(userId,publicKeyring)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 239,
                        "startColumnNumber": 16,
                        "endLineNumber": 239,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "publicKey=getPublicKey(userId,publicKeyring)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 239,
                        "startColumnNumber": 16,
                        "endLineNumber": 239,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "publicKey=getPublicKey(userId,publicKeyring);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 238,
                        "startColumnNumber": 16,
                        "endLineNumber": 240,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  publicKey=getPublicKey(userId,publicKeyring);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 210,
                        "startLineNumber": 238,
                        "startColumnNumber": 12,
                        "endLineNumber": 242,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  publicKey=getPublicKey(userId,publicKeyring);\n}\n catch (Exception e) {\n  throw new ProcessException(\"Invalid public keyring - \" + e.getMessage());\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2026,
                        "startLineNumber": 236,
                        "startColumnNumber": 81,
                        "endLineNumber": 280,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  PGPPublicKey publicKey;\n  try {\n    publicKey=getPublicKey(userId,publicKeyring);\n  }\n catch (  Exception e) {\n    throw new ProcessException(\"Invalid public keyring - \" + e.getMessage());\n  }\n  try {\n    SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n    OutputStream output=out;\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output=new ArmoredOutputStream(out);\n    }\n    try {\n      PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n      encGenerator.addMethod(publicKey);\n      try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n        PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n        try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n          PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n          try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n            final byte[] buffer=new byte[4096];\n            int len;\n            while ((len=in.read(buffer)) >= 0) {\n              literalOut.write(buffer,0,len);\n            }\n          }\n         }\n       }\n     }\n  finally {\n      if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n        output.close();\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new ProcessException(e.getMessage());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 216,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2117,
                        "startLineNumber": 235,
                        "startColumnNumber": 8,
                        "endLineNumber": 280,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "@Override public void process(InputStream in,OutputStream out) throws IOException {\n  PGPPublicKey publicKey;\n  try {\n    publicKey=getPublicKey(userId,publicKeyring);\n  }\n catch (  Exception e) {\n    throw new ProcessException(\"Invalid public keyring - \" + e.getMessage());\n  }\n  try {\n    SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n    OutputStream output=out;\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output=new ArmoredOutputStream(out);\n    }\n    try {\n      PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n      encGenerator.addMethod(publicKey);\n      try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n        PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n        try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n          PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n          try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n            final byte[] buffer=new byte[4096];\n            int len;\n            while ((len=in.read(buffer)) >= 0) {\n              literalOut.write(buffer,0,len);\n            }\n          }\n         }\n       }\n     }\n  finally {\n      if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n        output.close();\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new ProcessException(e.getMessage());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 232,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 48,
                    "startLineNumber": 239,
                    "startColumnNumber": 16,
                    "endLineNumber": 239,
                    "endColumnNumber": 64
                },
                "nodeContext": "publicKey=getPublicKey(userId,publicKeyring);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 239,
            "startColumnNumber": 41,
            "endLineNumber": 239,
            "endColumnNumber": 47
        }
    ],
    "layoutRelationDataList": []
}