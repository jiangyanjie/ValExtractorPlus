{
    "id": 603,
    "expression": "Zip64Mode",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "Zip64Mode",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 1392,
                "startColumnNumber": 32,
                "endLineNumber": 1392,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1392,
                        "startColumnNumber": 32,
                        "endLineNumber": 1392,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "Zip64Mode.Always",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1392,
                        "startColumnNumber": 19,
                        "endLineNumber": 1392,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 135,
                        "startLineNumber": 1390,
                        "startColumnNumber": 12,
                        "endLineNumber": 1392,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 465,
                        "startLineNumber": 1390,
                        "startColumnNumber": 8,
                        "endLineNumber": 1398,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n else {\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 52,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1339,
                        "startColumnNumber": 93,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1330,
                        "startColumnNumber": 4,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 1392,
                    "startColumnNumber": 19,
                    "endLineNumber": 1392,
                    "endColumnNumber": 48
                },
                "nodeContext": "zip64Mode == Zip64Mode.Always",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.Zip64Mode"
        },
        {
            "nodeContext": "Zip64Mode",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 1409,
                "startColumnNumber": 77,
                "endLineNumber": 1409,
                "endColumnNumber": 86
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1409,
                        "startColumnNumber": 77,
                        "endLineNumber": 1409,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "Zip64Mode.Always",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1409,
                        "startColumnNumber": 64,
                        "endLineNumber": 1409,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 1409,
                        "startColumnNumber": 16,
                        "endLineNumber": 1409,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 1409,
                        "startColumnNumber": 12,
                        "endLineNumber": 1413,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n  putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n}\n else {\n  putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 309,
                        "startLineNumber": 1408,
                        "startColumnNumber": 23,
                        "endLineNumber": 1414,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 1408,
                        "startColumnNumber": 8,
                        "endLineNumber": 1416,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSplitZip) {\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n else {\n  System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1339,
                        "startColumnNumber": 93,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1330,
                        "startColumnNumber": 4,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 77,
                    "startLineNumber": 1409,
                    "startColumnNumber": 16,
                    "endLineNumber": 1409,
                    "endColumnNumber": 93
                },
                "nodeContext": "ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.Zip64Mode"
        },
        {
            "nodeContext": "Zip64Mode",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 1425,
                "startColumnNumber": 64,
                "endLineNumber": 1425,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1425,
                        "startColumnNumber": 64,
                        "endLineNumber": 1425,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "Zip64Mode.Always",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1425,
                        "startColumnNumber": 51,
                        "endLineNumber": 1425,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 1425,
                        "startColumnNumber": 12,
                        "endLineNumber": 1425,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 1425,
                        "startColumnNumber": 8,
                        "endLineNumber": 1429,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n}\n else {\n  putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1339,
                        "startColumnNumber": 93,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1330,
                        "startColumnNumber": 4,
                        "endLineNumber": 1442,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 68,
                    "startLineNumber": 1425,
                    "startColumnNumber": 12,
                    "endLineNumber": 1425,
                    "endColumnNumber": 80
                },
                "nodeContext": "entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.Zip64Mode"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 1392,
            "startColumnNumber": 32,
            "endLineNumber": 1392,
            "endColumnNumber": 41
        },
        {
            "charLength": 9,
            "startLineNumber": 1409,
            "startColumnNumber": 77,
            "endLineNumber": 1409,
            "endColumnNumber": 86
        },
        {
            "charLength": 9,
            "startLineNumber": 1425,
            "startColumnNumber": 64,
            "endLineNumber": 1425,
            "endColumnNumber": 73
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        }
    ]
}