{
    "id": 949,
    "expression": "traversal",
    "projectName": "jackrabbit-oak",
    "commitID": "93716466253f6a726c68e5bad26416940857a6c8",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/query/QueryImpl.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "traversal",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 981,
                "startColumnNumber": 26,
                "endLineNumber": 981,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 981,
                        "startColumnNumber": 26,
                        "endLineNumber": 981,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "traversal.getCost(filter,rootState)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 981,
                        "startColumnNumber": 19,
                        "endLineNumber": 981,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "cost=traversal.getCost(filter,rootState)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 981,
                        "startColumnNumber": 12,
                        "endLineNumber": 981,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "double cost=traversal.getCost(filter,rootState);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 463,
                        "startLineNumber": 979,
                        "startColumnNumber": 30,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 56,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 485,
                        "startLineNumber": 979,
                        "startColumnNumber": 8,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (traversalEnabled) {\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 58,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 981,
                    "startColumnNumber": 12,
                    "endLineNumber": 981,
                    "endColumnNumber": 63
                },
                "nodeContext": "double cost=traversal.getCost(filter,rootState);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.query.QueryIndex"
        },
        {
            "nodeContext": "traversal",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 983,
                "startColumnNumber": 39,
                "endLineNumber": 983,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 983,
                        "startColumnNumber": 39,
                        "endLineNumber": 983,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "traversal.getIndexName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 983,
                        "startColumnNumber": 25,
                        "endLineNumber": 983,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "\"cost for \" + traversal.getIndexName() + \" is \"+ cost",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 983,
                        "startColumnNumber": 16,
                        "endLineNumber": 983,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 983,
                        "startColumnNumber": 16,
                        "endLineNumber": 983,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 982,
                        "startColumnNumber": 38,
                        "endLineNumber": 984,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 982,
                        "startColumnNumber": 12,
                        "endLineNumber": 984,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (LOG.isDebugEnabled()) {\n  logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 463,
                        "startLineNumber": 979,
                        "startColumnNumber": 30,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 56,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 485,
                        "startLineNumber": 979,
                        "startColumnNumber": 8,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (traversalEnabled) {\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 58,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 983,
                    "startColumnNumber": 16,
                    "endLineNumber": 983,
                    "endColumnNumber": 81
                },
                "nodeContext": "logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.query.QueryIndex"
        },
        {
            "nodeContext": "traversal",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 988,
                "startColumnNumber": 28,
                "endLineNumber": 988,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 988,
                        "startColumnNumber": 16,
                        "endLineNumber": 988,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "bestIndex=traversal",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 988,
                        "startColumnNumber": 16,
                        "endLineNumber": 988,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "bestIndex=traversal;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 120,
                        "startLineNumber": 985,
                        "startColumnNumber": 73,
                        "endLineNumber": 989,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  bestCost=cost;\n  bestPlan=null;\n  bestIndex=traversal;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 181,
                        "startLineNumber": 985,
                        "startColumnNumber": 12,
                        "endLineNumber": 989,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n  bestCost=cost;\n  bestPlan=null;\n  bestIndex=traversal;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 463,
                        "startLineNumber": 979,
                        "startColumnNumber": 30,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 56,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 485,
                        "startLineNumber": 979,
                        "startColumnNumber": 8,
                        "endLineNumber": 990,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (traversalEnabled) {\n  QueryIndex traversal=new TraversingIndex();\n  double cost=traversal.getCost(filter,rootState);\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n    bestCost=cost;\n    bestPlan=null;\n    bestIndex=traversal;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 58,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 988,
                    "startColumnNumber": 16,
                    "endLineNumber": 988,
                    "endColumnNumber": 38
                },
                "nodeContext": "bestIndex=traversal;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.query.QueryIndex"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 981,
            "startColumnNumber": 26,
            "endLineNumber": 981,
            "endColumnNumber": 35
        },
        {
            "charLength": 9,
            "startLineNumber": 983,
            "startColumnNumber": 39,
            "endLineNumber": 983,
            "endColumnNumber": 48
        },
        {
            "charLength": 9,
            "startLineNumber": 988,
            "startColumnNumber": 28,
            "endLineNumber": 988,
            "endColumnNumber": 37
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        }
    ]
}