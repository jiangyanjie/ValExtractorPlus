{
    "id": 403,
    "expression": "entry",
    "projectName": "antlr@antlr4",
    "commitID": "f2b93e550cd912be3973743d09206db98f4092c9",
    "filePath": "tool/src/org/antlr/v4/tool/Grammar.java",
    "occurrences": 2,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "entry",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 796,
                "startColumnNumber": 15,
                "endLineNumber": 796,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 796,
                        "startColumnNumber": 15,
                        "endLineNumber": 796,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "entry.getValue()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 796,
                        "startColumnNumber": 7,
                        "endLineNumber": 796,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "value=entry.getValue()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 796,
                        "startColumnNumber": 3,
                        "endLineNumber": 796,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "int value=entry.getValue();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 795,
                        "startColumnNumber": 77,
                        "endLineNumber": 800,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  int value=entry.getValue();\n  if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n    literalNames[value]=entry.getKey();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 795,
                        "startColumnNumber": 2,
                        "endLineNumber": 800,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int value=entry.getValue();\n  if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n    literalNames[value]=entry.getKey();\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 527,
                        "startLineNumber": 788,
                        "startColumnNumber": 40,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 643,
                        "startLineNumber": 784,
                        "startColumnNumber": 1,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 109,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 796,
                    "startColumnNumber": 3,
                    "endLineNumber": 796,
                    "endColumnNumber": 32
                },
                "nodeContext": "int value=entry.getValue();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.Map.Entry<java.lang.String,java.lang.Integer>"
        },
        {
            "nodeContext": "entry",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 798,
                "startColumnNumber": 26,
                "endLineNumber": 798,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 798,
                        "startColumnNumber": 26,
                        "endLineNumber": 798,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "entry.getKey()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 798,
                        "startColumnNumber": 4,
                        "endLineNumber": 798,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "literalNames[value]=entry.getKey()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 798,
                        "startColumnNumber": 4,
                        "endLineNumber": 798,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "literalNames[value]=entry.getKey();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 797,
                        "startColumnNumber": 81,
                        "endLineNumber": 799,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "{\n  literalNames[value]=entry.getKey();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 128,
                        "startLineNumber": 797,
                        "startColumnNumber": 3,
                        "endLineNumber": 799,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n  literalNames[value]=entry.getKey();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 795,
                        "startColumnNumber": 77,
                        "endLineNumber": 800,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  int value=entry.getValue();\n  if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n    literalNames[value]=entry.getKey();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 795,
                        "startColumnNumber": 2,
                        "endLineNumber": 800,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int value=entry.getValue();\n  if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n    literalNames[value]=entry.getKey();\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 527,
                        "startLineNumber": 788,
                        "startColumnNumber": 40,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 643,
                        "startLineNumber": 784,
                        "startColumnNumber": 1,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 109,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 798,
                    "startColumnNumber": 4,
                    "endLineNumber": 798,
                    "endColumnNumber": 41
                },
                "nodeContext": "literalNames[value]=entry.getKey();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.Map.Entry<java.lang.String,java.lang.Integer>"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 796,
            "startColumnNumber": 15,
            "endLineNumber": 796,
            "endColumnNumber": 20
        },
        {
            "charLength": 5,
            "startLineNumber": 798,
            "startColumnNumber": 26,
            "endLineNumber": 798,
            "endColumnNumber": 31
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        }
    ]
}