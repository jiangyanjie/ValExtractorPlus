{
    "id": 1217,
    "expression": "i",
    "projectName": "commons-compress",
    "commitID": "1470c26cadbbfe6a7150f862766eaa30937fbd2b",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
    "occurrences": 24,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 982,
                "startColumnNumber": 36,
                "endLineNumber": 982,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 982,
                        "startColumnNumber": 36,
                        "endLineNumber": 982,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "i < names.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 451,
                        "startLineNumber": 982,
                        "startColumnNumber": 20,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1305,
                        "startLineNumber": 969,
                        "startColumnNumber": 32,
                        "endLineNumber": 994,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 982,
                    "startColumnNumber": 36,
                    "endLineNumber": 982,
                    "endColumnNumber": 52
                },
                "nodeContext": "i < names.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 983,
                "startColumnNumber": 34,
                "endLineNumber": 983,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 983,
                        "startColumnNumber": 28,
                        "endLineNumber": 983,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "names[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 983,
                        "startColumnNumber": 28,
                        "endLineNumber": 983,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "names[i] == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 983,
                        "startColumnNumber": 28,
                        "endLineNumber": 983,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "names[i] == 0 && names[i + 1] == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 983,
                        "startColumnNumber": 24,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 982,
                        "startColumnNumber": 62,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 451,
                        "startLineNumber": 982,
                        "startColumnNumber": 20,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1305,
                        "startLineNumber": 969,
                        "startColumnNumber": 32,
                        "endLineNumber": 994,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 983,
                    "startColumnNumber": 28,
                    "endLineNumber": 983,
                    "endColumnNumber": 62
                },
                "nodeContext": "names[i] == 0 && names[i + 1] == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 983,
                "startColumnNumber": 51,
                "endLineNumber": 983,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 983,
                        "startColumnNumber": 51,
                        "endLineNumber": 983,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "i + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 983,
                        "startColumnNumber": 45,
                        "endLineNumber": 983,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "names[i + 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 983,
                        "startColumnNumber": 45,
                        "endLineNumber": 983,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "names[i + 1] == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 983,
                        "startColumnNumber": 28,
                        "endLineNumber": 983,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "names[i] == 0 && names[i + 1] == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 983,
                        "startColumnNumber": 24,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 982,
                        "startColumnNumber": 62,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 451,
                        "startLineNumber": 982,
                        "startColumnNumber": 20,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1305,
                        "startLineNumber": 969,
                        "startColumnNumber": 32,
                        "endLineNumber": 994,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 983,
                    "startColumnNumber": 28,
                    "endLineNumber": 983,
                    "endColumnNumber": 62
                },
                "nodeContext": "names[i] == 0 && names[i + 1] == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 985,
                "startColumnNumber": 86,
                "endLineNumber": 985,
                "endColumnNumber": 87
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 985,
                        "startColumnNumber": 86,
                        "endLineNumber": 985,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "i - nextName",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 985,
                        "startColumnNumber": 58,
                        "endLineNumber": 985,
                        "endColumnNumber": 126
                    },
                    "nodeContext": "new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 985,
                        "startColumnNumber": 28,
                        "endLineNumber": 985,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 17,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 100,
                        "startLineNumber": 985,
                        "startColumnNumber": 28,
                        "endLineNumber": 985,
                        "endColumnNumber": 128
                    },
                    "nodeContext": "fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 319,
                        "startLineNumber": 983,
                        "startColumnNumber": 64,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 33,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 983,
                        "startColumnNumber": 24,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 982,
                        "startColumnNumber": 62,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 451,
                        "startLineNumber": 982,
                        "startColumnNumber": 20,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1305,
                        "startLineNumber": 969,
                        "startColumnNumber": 32,
                        "endLineNumber": 994,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 100,
                    "startLineNumber": 985,
                    "startColumnNumber": 28,
                    "endLineNumber": 985,
                    "endColumnNumber": 128
                },
                "nodeContext": "fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 986,
                "startColumnNumber": 39,
                "endLineNumber": 986,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 986,
                        "startColumnNumber": 39,
                        "endLineNumber": 986,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "i + 2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 986,
                        "startColumnNumber": 28,
                        "endLineNumber": 986,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "nextName=i + 2",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 986,
                        "startColumnNumber": 28,
                        "endLineNumber": 986,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "nextName=i + 2;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 319,
                        "startLineNumber": 983,
                        "startColumnNumber": 64,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 33,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 983,
                        "startColumnNumber": 24,
                        "endLineNumber": 988,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 409,
                        "startLineNumber": 982,
                        "startColumnNumber": 62,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 451,
                        "startLineNumber": 982,
                        "startColumnNumber": 20,
                        "endLineNumber": 989,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1305,
                        "startLineNumber": 969,
                        "startColumnNumber": 32,
                        "endLineNumber": 994,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 986,
                    "startColumnNumber": 28,
                    "endLineNumber": 986,
                    "endColumnNumber": 45
                },
                "nodeContext": "nextName=i + 2;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1001,
                "startColumnNumber": 36,
                "endLineNumber": 1001,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1001,
                        "startColumnNumber": 36,
                        "endLineNumber": 1001,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "i < numFilesInt",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 454,
                        "startLineNumber": 1001,
                        "startColumnNumber": 20,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 806,
                        "startLineNumber": 995,
                        "startColumnNumber": 33,
                        "endLineNumber": 1010,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasCreationDate(timesDefined.get(i));\n    if (entryAtIndex.getHasCreationDate()) {\n      entryAtIndex.setCreationDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1001,
                    "startColumnNumber": 36,
                    "endLineNumber": 1001,
                    "endColumnNumber": 51
                },
                "nodeContext": "i < numFilesInt",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1002,
                "startColumnNumber": 57,
                "endLineNumber": 1002,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1002,
                        "startColumnNumber": 24,
                        "endLineNumber": 1002,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1002,
                        "startColumnNumber": 24,
                        "endLineNumber": 1002,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 1001,
                        "startColumnNumber": 58,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 454,
                        "startLineNumber": 1001,
                        "startColumnNumber": 20,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 806,
                        "startLineNumber": 995,
                        "startColumnNumber": 33,
                        "endLineNumber": 1010,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasCreationDate(timesDefined.get(i));\n    if (entryAtIndex.getHasCreationDate()) {\n      entryAtIndex.setCreationDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 1002,
                    "startColumnNumber": 24,
                    "endLineNumber": 1002,
                    "endColumnNumber": 60
                },
                "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1003,
                "startColumnNumber": 76,
                "endLineNumber": 1003,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1003,
                        "startColumnNumber": 64,
                        "endLineNumber": 1003,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "fileMap.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1003,
                        "startColumnNumber": 49,
                        "endLineNumber": 1003,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "entryAtIndex=fileMap.get(i)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1003,
                        "startColumnNumber": 24,
                        "endLineNumber": 1003,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 1001,
                        "startColumnNumber": 58,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 454,
                        "startLineNumber": 1001,
                        "startColumnNumber": 20,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 806,
                        "startLineNumber": 995,
                        "startColumnNumber": 33,
                        "endLineNumber": 1010,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasCreationDate(timesDefined.get(i));\n    if (entryAtIndex.getHasCreationDate()) {\n      entryAtIndex.setCreationDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 1003,
                    "startColumnNumber": 24,
                    "endLineNumber": 1003,
                    "endColumnNumber": 79
                },
                "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1004,
                "startColumnNumber": 73,
                "endLineNumber": 1004,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1004,
                        "startColumnNumber": 56,
                        "endLineNumber": 1004,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "timesDefined.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1004,
                        "startColumnNumber": 24,
                        "endLineNumber": 1004,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "entryAtIndex.setHasCreationDate(timesDefined.get(i))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 1004,
                        "startColumnNumber": 24,
                        "endLineNumber": 1004,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "entryAtIndex.setHasCreationDate(timesDefined.get(i));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 1001,
                        "startColumnNumber": 58,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 454,
                        "startLineNumber": 1001,
                        "startColumnNumber": 20,
                        "endLineNumber": 1008,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 806,
                        "startLineNumber": 995,
                        "startColumnNumber": 33,
                        "endLineNumber": 1010,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasCreationDate(timesDefined.get(i));\n    if (entryAtIndex.getHasCreationDate()) {\n      entryAtIndex.setCreationDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 1004,
                    "startColumnNumber": 24,
                    "endLineNumber": 1004,
                    "endColumnNumber": 77
                },
                "nodeContext": "entryAtIndex.setHasCreationDate(timesDefined.get(i));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1017,
                "startColumnNumber": 36,
                "endLineNumber": 1017,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1017,
                        "startColumnNumber": 36,
                        "endLineNumber": 1017,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "i < numFilesInt",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 448,
                        "startLineNumber": 1017,
                        "startColumnNumber": 20,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 800,
                        "startLineNumber": 1011,
                        "startColumnNumber": 33,
                        "endLineNumber": 1026,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasAccessDate(timesDefined.get(i));\n    if (entryAtIndex.getHasAccessDate()) {\n      entryAtIndex.setAccessDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1017,
                    "startColumnNumber": 36,
                    "endLineNumber": 1017,
                    "endColumnNumber": 51
                },
                "nodeContext": "i < numFilesInt",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1018,
                "startColumnNumber": 57,
                "endLineNumber": 1018,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1018,
                        "startColumnNumber": 24,
                        "endLineNumber": 1018,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1018,
                        "startColumnNumber": 24,
                        "endLineNumber": 1018,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 410,
                        "startLineNumber": 1017,
                        "startColumnNumber": 58,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 448,
                        "startLineNumber": 1017,
                        "startColumnNumber": 20,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 800,
                        "startLineNumber": 1011,
                        "startColumnNumber": 33,
                        "endLineNumber": 1026,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasAccessDate(timesDefined.get(i));\n    if (entryAtIndex.getHasAccessDate()) {\n      entryAtIndex.setAccessDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 1018,
                    "startColumnNumber": 24,
                    "endLineNumber": 1018,
                    "endColumnNumber": 60
                },
                "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1019,
                "startColumnNumber": 76,
                "endLineNumber": 1019,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1019,
                        "startColumnNumber": 64,
                        "endLineNumber": 1019,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "fileMap.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1019,
                        "startColumnNumber": 49,
                        "endLineNumber": 1019,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "entryAtIndex=fileMap.get(i)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1019,
                        "startColumnNumber": 24,
                        "endLineNumber": 1019,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 410,
                        "startLineNumber": 1017,
                        "startColumnNumber": 58,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 448,
                        "startLineNumber": 1017,
                        "startColumnNumber": 20,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 800,
                        "startLineNumber": 1011,
                        "startColumnNumber": 33,
                        "endLineNumber": 1026,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasAccessDate(timesDefined.get(i));\n    if (entryAtIndex.getHasAccessDate()) {\n      entryAtIndex.setAccessDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 1019,
                    "startColumnNumber": 24,
                    "endLineNumber": 1019,
                    "endColumnNumber": 79
                },
                "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1020,
                "startColumnNumber": 71,
                "endLineNumber": 1020,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1020,
                        "startColumnNumber": 54,
                        "endLineNumber": 1020,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "timesDefined.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 1020,
                        "startColumnNumber": 24,
                        "endLineNumber": 1020,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "entryAtIndex.setHasAccessDate(timesDefined.get(i))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1020,
                        "startColumnNumber": 24,
                        "endLineNumber": 1020,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "entryAtIndex.setHasAccessDate(timesDefined.get(i));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 410,
                        "startLineNumber": 1017,
                        "startColumnNumber": 58,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 448,
                        "startLineNumber": 1017,
                        "startColumnNumber": 20,
                        "endLineNumber": 1024,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasAccessDate(timesDefined.get(i));\n  if (entryAtIndex.getHasAccessDate()) {\n    entryAtIndex.setAccessDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 800,
                        "startLineNumber": 1011,
                        "startColumnNumber": 33,
                        "endLineNumber": 1026,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasAccessDate(timesDefined.get(i));\n    if (entryAtIndex.getHasAccessDate()) {\n      entryAtIndex.setAccessDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 1020,
                    "startColumnNumber": 24,
                    "endLineNumber": 1020,
                    "endColumnNumber": 75
                },
                "nodeContext": "entryAtIndex.setHasAccessDate(timesDefined.get(i));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1033,
                "startColumnNumber": 36,
                "endLineNumber": 1033,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1033,
                        "startColumnNumber": 36,
                        "endLineNumber": 1033,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "i < numFilesInt",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 466,
                        "startLineNumber": 1033,
                        "startColumnNumber": 20,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 1027,
                        "startColumnNumber": 33,
                        "endLineNumber": 1042,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n    if (entryAtIndex.getHasLastModifiedDate()) {\n      entryAtIndex.setLastModifiedDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1033,
                    "startColumnNumber": 36,
                    "endLineNumber": 1033,
                    "endColumnNumber": 51
                },
                "nodeContext": "i < numFilesInt",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1034,
                "startColumnNumber": 57,
                "endLineNumber": 1034,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1034,
                        "startColumnNumber": 24,
                        "endLineNumber": 1034,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1034,
                        "startColumnNumber": 24,
                        "endLineNumber": 1034,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 428,
                        "startLineNumber": 1033,
                        "startColumnNumber": 58,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 466,
                        "startLineNumber": 1033,
                        "startColumnNumber": 20,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 1027,
                        "startColumnNumber": 33,
                        "endLineNumber": 1042,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n    if (entryAtIndex.getHasLastModifiedDate()) {\n      entryAtIndex.setLastModifiedDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 1034,
                    "startColumnNumber": 24,
                    "endLineNumber": 1034,
                    "endColumnNumber": 60
                },
                "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1035,
                "startColumnNumber": 76,
                "endLineNumber": 1035,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1035,
                        "startColumnNumber": 64,
                        "endLineNumber": 1035,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "fileMap.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1035,
                        "startColumnNumber": 49,
                        "endLineNumber": 1035,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "entryAtIndex=fileMap.get(i)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1035,
                        "startColumnNumber": 24,
                        "endLineNumber": 1035,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 428,
                        "startLineNumber": 1033,
                        "startColumnNumber": 58,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 466,
                        "startLineNumber": 1033,
                        "startColumnNumber": 20,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 1027,
                        "startColumnNumber": 33,
                        "endLineNumber": 1042,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n    if (entryAtIndex.getHasLastModifiedDate()) {\n      entryAtIndex.setLastModifiedDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 1035,
                    "startColumnNumber": 24,
                    "endLineNumber": 1035,
                    "endColumnNumber": 79
                },
                "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1036,
                "startColumnNumber": 77,
                "endLineNumber": 1036,
                "endColumnNumber": 78
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1036,
                        "startColumnNumber": 60,
                        "endLineNumber": 1036,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "timesDefined.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1036,
                        "startColumnNumber": 24,
                        "endLineNumber": 1036,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "entryAtIndex.setHasLastModifiedDate(timesDefined.get(i))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1036,
                        "startColumnNumber": 24,
                        "endLineNumber": 1036,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 428,
                        "startLineNumber": 1033,
                        "startColumnNumber": 58,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 466,
                        "startLineNumber": 1033,
                        "startColumnNumber": 20,
                        "endLineNumber": 1040,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n  if (entryAtIndex.getHasLastModifiedDate()) {\n    entryAtIndex.setLastModifiedDate(header.getLong());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 1027,
                        "startColumnNumber": 33,
                        "endLineNumber": 1042,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet timesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n    if (entryAtIndex.getHasLastModifiedDate()) {\n      entryAtIndex.setLastModifiedDate(header.getLong());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 1036,
                    "startColumnNumber": 24,
                    "endLineNumber": 1036,
                    "endColumnNumber": 81
                },
                "nodeContext": "entryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1049,
                "startColumnNumber": 36,
                "endLineNumber": 1049,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1049,
                        "startColumnNumber": 36,
                        "endLineNumber": 1049,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "i < numFilesInt",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 473,
                        "startLineNumber": 1049,
                        "startColumnNumber": 20,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 830,
                        "startLineNumber": 1043,
                        "startColumnNumber": 41,
                        "endLineNumber": 1058,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet attributesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n    if (entryAtIndex.getHasWindowsAttributes()) {\n      entryAtIndex.setWindowsAttributes(header.getInt());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1049,
                    "startColumnNumber": 36,
                    "endLineNumber": 1049,
                    "endColumnNumber": 51
                },
                "nodeContext": "i < numFilesInt",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1050,
                "startColumnNumber": 57,
                "endLineNumber": 1050,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1050,
                        "startColumnNumber": 24,
                        "endLineNumber": 1050,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1050,
                        "startColumnNumber": 24,
                        "endLineNumber": 1050,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 435,
                        "startLineNumber": 1049,
                        "startColumnNumber": 58,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 473,
                        "startLineNumber": 1049,
                        "startColumnNumber": 20,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 830,
                        "startLineNumber": 1043,
                        "startColumnNumber": 41,
                        "endLineNumber": 1058,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet attributesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n    if (entryAtIndex.getHasWindowsAttributes()) {\n      entryAtIndex.setWindowsAttributes(header.getInt());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 1050,
                    "startColumnNumber": 24,
                    "endLineNumber": 1050,
                    "endColumnNumber": 60
                },
                "nodeContext": "checkEntryIsInitialized(fileMap,i);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1051,
                "startColumnNumber": 76,
                "endLineNumber": 1051,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1051,
                        "startColumnNumber": 64,
                        "endLineNumber": 1051,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "fileMap.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1051,
                        "startColumnNumber": 49,
                        "endLineNumber": 1051,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "entryAtIndex=fileMap.get(i)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1051,
                        "startColumnNumber": 24,
                        "endLineNumber": 1051,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 435,
                        "startLineNumber": 1049,
                        "startColumnNumber": 58,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 473,
                        "startLineNumber": 1049,
                        "startColumnNumber": 20,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 830,
                        "startLineNumber": 1043,
                        "startColumnNumber": 41,
                        "endLineNumber": 1058,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet attributesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n    if (entryAtIndex.getHasWindowsAttributes()) {\n      entryAtIndex.setWindowsAttributes(header.getInt());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 1051,
                    "startColumnNumber": 24,
                    "endLineNumber": 1051,
                    "endColumnNumber": 79
                },
                "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1052,
                "startColumnNumber": 83,
                "endLineNumber": 1052,
                "endColumnNumber": 84
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1052,
                        "startColumnNumber": 61,
                        "endLineNumber": 1052,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "attributesDefined.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 1052,
                        "startColumnNumber": 24,
                        "endLineNumber": 1052,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 1052,
                        "startColumnNumber": 24,
                        "endLineNumber": 1052,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 435,
                        "startLineNumber": 1049,
                        "startColumnNumber": 58,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 473,
                        "startLineNumber": 1049,
                        "startColumnNumber": 20,
                        "endLineNumber": 1056,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n  if (entryAtIndex.getHasWindowsAttributes()) {\n    entryAtIndex.setWindowsAttributes(header.getInt());\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 830,
                        "startLineNumber": 1043,
                        "startColumnNumber": 41,
                        "endLineNumber": 1058,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final BitSet attributesDefined=readAllOrBits(header,numFilesInt);\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Unimplemented\");\n  }\n  for (int i=0; i < numFilesInt; i++) {\n    checkEntryIsInitialized(fileMap,i);\n    final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n    entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n    if (entryAtIndex.getHasWindowsAttributes()) {\n      entryAtIndex.setWindowsAttributes(header.getInt());\n    }\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6637,
                        "startLineNumber": 950,
                        "startColumnNumber": 12,
                        "endLineNumber": 1079,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "switch (propertyType) {\ncase NID.kEmptyStream:{\n    isEmptyStream=readBits(header,numFilesInt);\n    break;\n  }\ncase NID.kEmptyFile:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n  }\n  isEmptyFile=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kAnti:{\nif (isEmptyStream == null) {\n  throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n}\nisAnti=readBits(header,isEmptyStream.cardinality());\nbreak;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\nthrow new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\nif (names[i] == 0 && names[i + 1] == 0) {\n  checkEntryIsInitialized(fileMap,nextFile);\n  fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n  nextName=i + 2;\n  nextFile++;\n}\n}\nif (nextName != names.length || nextFile != numFiles) {\nthrow new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\nentryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 593,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6854,
                        "startLineNumber": 944,
                        "startColumnNumber": 21,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 616,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6867,
                        "startLineNumber": 944,
                        "startColumnNumber": 8,
                        "endLineNumber": 1080,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  final int propertyType=getUnsignedByte(header);\n  if (propertyType == 0) {\n    break;\n  }\n  final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n      isEmptyStream=readBits(header,numFilesInt);\n      break;\n    }\ncase NID.kEmptyFile:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n    }\n    isEmptyFile=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kAnti:{\n  if (isEmptyStream == null) {\n    throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n  }\n  isAnti=readBits(header,isEmptyStream.cardinality());\n  break;\n}\ncase NID.kName:{\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Not implemented\");\n}\nif (((size - 1) & 1) != 0) {\n  throw new IOException(\"File names length invalid\");\n}\nassertFitsIntoInt(\"file names length\",size - 1);\nfinal byte[] names=new byte[(int)(size - 1)];\nheader.get(names);\nint nextFile=0;\nint nextName=0;\nfor (int i=0; i < names.length; i+=2) {\n  if (names[i] == 0 && names[i + 1] == 0) {\n    checkEntryIsInitialized(fileMap,nextFile);\n    fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n    nextName=i + 2;\n    nextFile++;\n  }\n}\nif (nextName != names.length || nextFile != numFiles) {\n  throw new IOException(\"Error parsing file names\");\n}\nbreak;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasCreationDate(timesDefined.get(i));\nif (entryAtIndex.getHasCreationDate()) {\n  entryAtIndex.setCreationDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\nentryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 618,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 1052,
                    "startColumnNumber": 24,
                    "endLineNumber": 1052,
                    "endColumnNumber": 87
                },
                "nodeContext": "entryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1083,
                "startColumnNumber": 24,
                "endLineNumber": 1083,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1083,
                        "startColumnNumber": 24,
                        "endLineNumber": 1083,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "i < numFilesInt",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1083,
                        "startColumnNumber": 8,
                        "endLineNumber": 1106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1083,
                    "startColumnNumber": 24,
                    "endLineNumber": 1083,
                    "endColumnNumber": 39
                },
                "nodeContext": "i < numFilesInt",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1084,
                "startColumnNumber": 64,
                "endLineNumber": 1084,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1084,
                        "startColumnNumber": 52,
                        "endLineNumber": 1084,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "fileMap.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1084,
                        "startColumnNumber": 37,
                        "endLineNumber": 1084,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "entryAtIndex=fileMap.get(i)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1084,
                        "startColumnNumber": 12,
                        "endLineNumber": 1084,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1083,
                        "startColumnNumber": 46,
                        "endLineNumber": 1106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1083,
                        "startColumnNumber": 8,
                        "endLineNumber": 1106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 1084,
                    "startColumnNumber": 12,
                    "endLineNumber": 1084,
                    "endColumnNumber": 67
                },
                "nodeContext": "final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1088,
                "startColumnNumber": 82,
                "endLineNumber": 1088,
                "endColumnNumber": 83
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1088,
                        "startColumnNumber": 64,
                        "endLineNumber": 1088,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "isEmptyStream.get(i)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 1088,
                        "startColumnNumber": 63,
                        "endLineNumber": 1088,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "!isEmptyStream.get(i)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 1088,
                        "startColumnNumber": 38,
                        "endLineNumber": 1088,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "isEmptyStream == null || !isEmptyStream.get(i)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1088,
                        "startColumnNumber": 12,
                        "endLineNumber": 1088,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1088,
                        "startColumnNumber": 12,
                        "endLineNumber": 1088,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1083,
                        "startColumnNumber": 46,
                        "endLineNumber": 1106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1083,
                        "startColumnNumber": 8,
                        "endLineNumber": 1106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 936,
                        "startColumnNumber": 98,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 936,
                        "startColumnNumber": 4,
                        "endLineNumber": 1115,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 1088,
                    "startColumnNumber": 12,
                    "endLineNumber": 1088,
                    "endColumnNumber": 86
                },
                "nodeContext": "entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 13,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 982,
            "startColumnNumber": 36,
            "endLineNumber": 982,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 983,
            "startColumnNumber": 34,
            "endLineNumber": 983,
            "endColumnNumber": 35
        },
        {
            "charLength": 1,
            "startLineNumber": 983,
            "startColumnNumber": 51,
            "endLineNumber": 983,
            "endColumnNumber": 52
        },
        {
            "charLength": 1,
            "startLineNumber": 985,
            "startColumnNumber": 86,
            "endLineNumber": 985,
            "endColumnNumber": 87
        },
        {
            "charLength": 1,
            "startLineNumber": 986,
            "startColumnNumber": 39,
            "endLineNumber": 986,
            "endColumnNumber": 40
        },
        {
            "charLength": 1,
            "startLineNumber": 1001,
            "startColumnNumber": 36,
            "endLineNumber": 1001,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 1002,
            "startColumnNumber": 57,
            "endLineNumber": 1002,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 1003,
            "startColumnNumber": 76,
            "endLineNumber": 1003,
            "endColumnNumber": 77
        },
        {
            "charLength": 1,
            "startLineNumber": 1004,
            "startColumnNumber": 73,
            "endLineNumber": 1004,
            "endColumnNumber": 74
        },
        {
            "charLength": 1,
            "startLineNumber": 1017,
            "startColumnNumber": 36,
            "endLineNumber": 1017,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 1018,
            "startColumnNumber": 57,
            "endLineNumber": 1018,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 1019,
            "startColumnNumber": 76,
            "endLineNumber": 1019,
            "endColumnNumber": 77
        },
        {
            "charLength": 1,
            "startLineNumber": 1020,
            "startColumnNumber": 71,
            "endLineNumber": 1020,
            "endColumnNumber": 72
        },
        {
            "charLength": 1,
            "startLineNumber": 1033,
            "startColumnNumber": 36,
            "endLineNumber": 1033,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 1034,
            "startColumnNumber": 57,
            "endLineNumber": 1034,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 1035,
            "startColumnNumber": 76,
            "endLineNumber": 1035,
            "endColumnNumber": 77
        },
        {
            "charLength": 1,
            "startLineNumber": 1036,
            "startColumnNumber": 77,
            "endLineNumber": 1036,
            "endColumnNumber": 78
        },
        {
            "charLength": 1,
            "startLineNumber": 1049,
            "startColumnNumber": 36,
            "endLineNumber": 1049,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 1050,
            "startColumnNumber": 57,
            "endLineNumber": 1050,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 1051,
            "startColumnNumber": 76,
            "endLineNumber": 1051,
            "endColumnNumber": 77
        },
        {
            "charLength": 1,
            "startLineNumber": 1052,
            "startColumnNumber": 83,
            "endLineNumber": 1052,
            "endColumnNumber": 84
        },
        {
            "charLength": 1,
            "startLineNumber": 1083,
            "startColumnNumber": 24,
            "endLineNumber": 1083,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 1084,
            "startColumnNumber": 64,
            "endLineNumber": 1084,
            "endColumnNumber": 65
        },
        {
            "charLength": 1,
            "startLineNumber": 1088,
            "startColumnNumber": 82,
            "endLineNumber": 1088,
            "endColumnNumber": 83
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 10
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 10
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 11
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 1
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 1
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 1
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 9
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 1
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 1
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 5
        }
    ]
}