{
    "id": 169,
    "expression": "null",
    "projectName": "johnzon",
    "commitID": "65564700aaf4202836af0fe00159449b0d031d7e",
    "filePath": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
    "occurrences": 8,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 605,
                "startColumnNumber": 28,
                "endLineNumber": 605,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 605,
                        "startColumnNumber": 12,
                        "endLineNumber": 605,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "classMapping == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1870,
                        "startLineNumber": 605,
                        "startColumnNumber": 8,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (classMapping == null) {\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 236,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 605,
                    "startColumnNumber": 12,
                    "endLineNumber": 605,
                    "endColumnNumber": 32
                },
                "nodeContext": "classMapping == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 624,
                "startColumnNumber": 30,
                "endLineNumber": 624,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 624,
                        "startColumnNumber": 24,
                        "endLineNumber": 624,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "map=null",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 624,
                        "startColumnNumber": 24,
                        "endLineNumber": 624,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "map=null;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 623,
                        "startColumnNumber": 27,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  map=null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 621,
                        "startColumnNumber": 27,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Map.class.isAssignableFrom(raw)) {\n  map=new HashMap(object.size());\n}\n else {\n  map=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 332,
                        "startLineNumber": 619,
                        "startColumnNumber": 27,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (EnumMap.class.isAssignableFrom(raw)) {\n  map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n}\n else if (Map.class.isAssignableFrom(raw)) {\n  map=new HashMap(object.size());\n}\n else {\n  map=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 44,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 476,
                        "startLineNumber": 617,
                        "startColumnNumber": 27,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (ConcurrentMap.class.isAssignableFrom(raw)) {\n  map=new ConcurrentHashMap(object.size());\n}\n else if (EnumMap.class.isAssignableFrom(raw)) {\n  map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n}\n else if (Map.class.isAssignableFrom(raw)) {\n  map=new HashMap(object.size());\n}\n else {\n  map=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 646,
                        "startLineNumber": 615,
                        "startColumnNumber": 27,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n  map=new TreeMap();\n}\n else if (ConcurrentMap.class.isAssignableFrom(raw)) {\n  map=new ConcurrentHashMap(object.size());\n}\n else if (EnumMap.class.isAssignableFrom(raw)) {\n  map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n}\n else if (Map.class.isAssignableFrom(raw)) {\n  map=new HashMap(object.size());\n}\n else {\n  map=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 87,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 758,
                        "startLineNumber": 613,
                        "startColumnNumber": 20,
                        "endLineNumber": 625,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (LinkedHashMap.class == raw) {\n  map=new LinkedHashMap();\n}\n else if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n  map=new TreeMap();\n}\n else if (ConcurrentMap.class.isAssignableFrom(raw)) {\n  map=new ConcurrentHashMap(object.size());\n}\n else if (EnumMap.class.isAssignableFrom(raw)) {\n  map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n}\n else if (Map.class.isAssignableFrom(raw)) {\n  map=new HashMap(object.size());\n}\n else {\n  map=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 100,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 609,
                        "startColumnNumber": 47,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 194,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 609,
                        "startColumnNumber": 16,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldArgTypes.length >= 2) {\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 200,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1774,
                        "startLineNumber": 606,
                        "startColumnNumber": 58,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1820,
                        "startLineNumber": 606,
                        "startColumnNumber": 12,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ParameterizedType.class.isInstance(type)) {\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 231,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1844,
                        "startLineNumber": 605,
                        "startColumnNumber": 34,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 232,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1870,
                        "startLineNumber": 605,
                        "startColumnNumber": 8,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (classMapping == null) {\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 236,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 624,
                    "startColumnNumber": 24,
                    "endLineNumber": 624,
                    "endColumnNumber": 35
                },
                "nodeContext": "map=null;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 627,
                "startColumnNumber": 31,
                "endLineNumber": 627,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 627,
                        "startColumnNumber": 24,
                        "endLineNumber": 627,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "map != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 615,
                        "startLineNumber": 627,
                        "startColumnNumber": 20,
                        "endLineNumber": 640,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (map != null) {\n  Type keyType;\n  if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n    keyType=fieldArgTypes[0];\n  }\n else {\n    keyType=fieldArgTypes[0];\n  }\n  for (  final Map.Entry<String,JsonValue> value : object.entrySet()) {\n    map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n  }\n  return map;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 71,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 609,
                        "startColumnNumber": 47,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 194,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 609,
                        "startColumnNumber": 16,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldArgTypes.length >= 2) {\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 200,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1774,
                        "startLineNumber": 606,
                        "startColumnNumber": 58,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1820,
                        "startLineNumber": 606,
                        "startColumnNumber": 12,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ParameterizedType.class.isInstance(type)) {\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 231,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1844,
                        "startLineNumber": 605,
                        "startColumnNumber": 34,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 232,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1870,
                        "startLineNumber": 605,
                        "startColumnNumber": 8,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (classMapping == null) {\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 236,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 627,
                    "startColumnNumber": 24,
                    "endLineNumber": 627,
                    "endColumnNumber": 35
                },
                "nodeContext": "map != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 637,
                "startColumnNumber": 117,
                "endLineNumber": 637,
                "endColumnNumber": 121
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 637,
                        "startColumnNumber": 72,
                        "endLineNumber": 637,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "toObject(value.getValue(),fieldArgTypes[1],null)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 637,
                        "startColumnNumber": 28,
                        "endLineNumber": 637,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 637,
                        "startColumnNumber": 28,
                        "endLineNumber": 637,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 636,
                        "startColumnNumber": 91,
                        "endLineNumber": 638,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 219,
                        "startLineNumber": 636,
                        "startColumnNumber": 24,
                        "endLineNumber": 638,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (final Map.Entry<String,JsonValue> value : object.entrySet()) {\n  map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 598,
                        "startLineNumber": 627,
                        "startColumnNumber": 37,
                        "endLineNumber": 640,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Type keyType;\n  if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n    keyType=fieldArgTypes[0];\n  }\n else {\n    keyType=fieldArgTypes[0];\n  }\n  for (  final Map.Entry<String,JsonValue> value : object.entrySet()) {\n    map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n  }\n  return map;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 615,
                        "startLineNumber": 627,
                        "startColumnNumber": 20,
                        "endLineNumber": 640,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (map != null) {\n  Type keyType;\n  if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n    keyType=fieldArgTypes[0];\n  }\n else {\n    keyType=fieldArgTypes[0];\n  }\n  for (  final Map.Entry<String,JsonValue> value : object.entrySet()) {\n    map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n  }\n  return map;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 71,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1550,
                        "startLineNumber": 609,
                        "startColumnNumber": 47,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 194,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 609,
                        "startColumnNumber": 16,
                        "endLineNumber": 641,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldArgTypes.length >= 2) {\n  final Class<?> raw=Class.class.cast(aType.getRawType());\n  final Map map;\n  if (LinkedHashMap.class == raw) {\n    map=new LinkedHashMap();\n  }\n else   if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n    map=new TreeMap();\n  }\n else   if (ConcurrentMap.class.isAssignableFrom(raw)) {\n    map=new ConcurrentHashMap(object.size());\n  }\n else   if (EnumMap.class.isAssignableFrom(raw)) {\n    map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    map=new HashMap(object.size());\n  }\n else {\n    map=null;\n  }\n  if (map != null) {\n    Type keyType;\n    if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n      keyType=fieldArgTypes[0];\n    }\n else {\n      keyType=fieldArgTypes[0];\n    }\n    for (    final Map.Entry<String,JsonValue> value : object.entrySet()) {\n      map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n    }\n    return map;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 200,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1774,
                        "startLineNumber": 606,
                        "startColumnNumber": 58,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 224,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1820,
                        "startLineNumber": 606,
                        "startColumnNumber": 12,
                        "endLineNumber": 642,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ParameterizedType.class.isInstance(type)) {\n  final ParameterizedType aType=ParameterizedType.class.cast(type);\n  final Type[] fieldArgTypes=aType.getActualTypeArguments();\n  if (fieldArgTypes.length >= 2) {\n    final Class<?> raw=Class.class.cast(aType.getRawType());\n    final Map map;\n    if (LinkedHashMap.class == raw) {\n      map=new LinkedHashMap();\n    }\n else     if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n      map=new TreeMap();\n    }\n else     if (ConcurrentMap.class.isAssignableFrom(raw)) {\n      map=new ConcurrentHashMap(object.size());\n    }\n else     if (EnumMap.class.isAssignableFrom(raw)) {\n      map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n    }\n else     if (Map.class.isAssignableFrom(raw)) {\n      map=new HashMap(object.size());\n    }\n else {\n      map=null;\n    }\n    if (map != null) {\n      Type keyType;\n      if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n        keyType=fieldArgTypes[0];\n      }\n else {\n        keyType=fieldArgTypes[0];\n      }\n      for (      final Map.Entry<String,JsonValue> value : object.entrySet()) {\n        map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n      }\n      return map;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 231,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1844,
                        "startLineNumber": 605,
                        "startColumnNumber": 34,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 232,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1870,
                        "startLineNumber": 605,
                        "startColumnNumber": 8,
                        "endLineNumber": 643,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (classMapping == null) {\n  if (ParameterizedType.class.isInstance(type)) {\n    final ParameterizedType aType=ParameterizedType.class.cast(type);\n    final Type[] fieldArgTypes=aType.getActualTypeArguments();\n    if (fieldArgTypes.length >= 2) {\n      final Class<?> raw=Class.class.cast(aType.getRawType());\n      final Map map;\n      if (LinkedHashMap.class == raw) {\n        map=new LinkedHashMap();\n      }\n else       if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n        map=new TreeMap();\n      }\n else       if (ConcurrentMap.class.isAssignableFrom(raw)) {\n        map=new ConcurrentHashMap(object.size());\n      }\n else       if (EnumMap.class.isAssignableFrom(raw)) {\n        map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n      }\n else       if (Map.class.isAssignableFrom(raw)) {\n        map=new HashMap(object.size());\n      }\n else {\n        map=null;\n      }\n      if (map != null) {\n        Type keyType;\n        if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n          keyType=fieldArgTypes[0];\n        }\n else {\n          keyType=fieldArgTypes[0];\n        }\n        for (        final Map.Entry<String,JsonValue> value : object.entrySet()) {\n          map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n        }\n        return map;\n      }\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 236,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 96,
                    "startLineNumber": 637,
                    "startColumnNumber": 28,
                    "endLineNumber": 637,
                    "endColumnNumber": 124
                },
                "nodeContext": "map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 19,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 644,
                "startColumnNumber": 28,
                "endLineNumber": 644,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 644,
                        "startColumnNumber": 12,
                        "endLineNumber": 644,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "classMapping == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 644,
                        "startColumnNumber": 8,
                        "endLineNumber": 646,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (classMapping == null) {\n  throw new MapperException(\"Can't map \" + type);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 644,
                    "startColumnNumber": 12,
                    "endLineNumber": 644,
                    "endColumnNumber": 32
                },
                "nodeContext": "classMapping == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 649,
                "startColumnNumber": 44,
                "endLineNumber": 649,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 649,
                        "startColumnNumber": 16,
                        "endLineNumber": 649,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "classMapping.factory.create(null)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 174,
                        "startLineNumber": 648,
                        "startColumnNumber": 25,
                        "endLineNumber": 649,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object))",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 178,
                        "startLineNumber": 648,
                        "startColumnNumber": 21,
                        "endLineNumber": 649,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object))",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 648,
                        "startColumnNumber": 8,
                        "endLineNumber": 649,
                        "endColumnNumber": 120
                    },
                    "nodeContext": "final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 31,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 649,
                    "startColumnNumber": 16,
                    "endLineNumber": 649,
                    "endColumnNumber": 49
                },
                "nodeContext": "classMapping.factory.create(null)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 657,
                "startColumnNumber": 29,
                "endLineNumber": 657,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 657,
                        "startColumnNumber": 16,
                        "endLineNumber": 657,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "jsonValue == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 657,
                        "startColumnNumber": 12,
                        "endLineNumber": 659,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (jsonValue == null) {\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 668,
                        "startLineNumber": 650,
                        "startColumnNumber": 96,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 756,
                        "startLineNumber": 650,
                        "startColumnNumber": 8,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 110,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 657,
                    "startColumnNumber": 16,
                    "endLineNumber": 657,
                    "endColumnNumber": 33
                },
                "nodeContext": "jsonValue == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 663,
                "startColumnNumber": 34,
                "endLineNumber": 663,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 663,
                        "startColumnNumber": 16,
                        "endLineNumber": 663,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "convertedValue != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 98,
                        "startLineNumber": 663,
                        "startColumnNumber": 12,
                        "endLineNumber": 665,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (convertedValue != null) {\n  setterMethod.write(t,convertedValue);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 668,
                        "startLineNumber": 650,
                        "startColumnNumber": 96,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 756,
                        "startLineNumber": 650,
                        "startColumnNumber": 8,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 110,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 663,
                    "startColumnNumber": 16,
                    "endLineNumber": 663,
                    "endColumnNumber": 38
                },
                "nodeContext": "convertedValue != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 605,
            "startColumnNumber": 28,
            "endLineNumber": 605,
            "endColumnNumber": 32
        },
        {
            "charLength": 4,
            "startLineNumber": 624,
            "startColumnNumber": 30,
            "endLineNumber": 624,
            "endColumnNumber": 34
        },
        {
            "charLength": 4,
            "startLineNumber": 627,
            "startColumnNumber": 31,
            "endLineNumber": 627,
            "endColumnNumber": 35
        },
        {
            "charLength": 4,
            "startLineNumber": 637,
            "startColumnNumber": 117,
            "endLineNumber": 637,
            "endColumnNumber": 121
        },
        {
            "charLength": 4,
            "startLineNumber": 644,
            "startColumnNumber": 28,
            "endLineNumber": 644,
            "endColumnNumber": 32
        },
        {
            "charLength": 4,
            "startLineNumber": 649,
            "startColumnNumber": 44,
            "endLineNumber": 649,
            "endColumnNumber": 48
        },
        {
            "charLength": 4,
            "startLineNumber": 657,
            "startColumnNumber": 29,
            "endLineNumber": 657,
            "endColumnNumber": 33
        },
        {
            "charLength": 4,
            "startLineNumber": 663,
            "startColumnNumber": 34,
            "endLineNumber": 663,
            "endColumnNumber": 38
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 14
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 14
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 14
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 13
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 13
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 13
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 13
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        }
    ]
}