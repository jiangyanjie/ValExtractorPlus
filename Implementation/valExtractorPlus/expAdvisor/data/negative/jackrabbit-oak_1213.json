{
    "id": 1213,
    "expression": "update",
    "projectName": "jackrabbit-oak",
    "commitID": "7184b655ae82b9f7341b38042f889cd2d6af8a20",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/rdb/RDBDocumentSerializer.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "update",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 96,
                "startColumnNumber": 48,
                "endLineNumber": 96,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 96,
                        "startColumnNumber": 48,
                        "endLineNumber": 96,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "update.getChanges()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 96,
                        "startColumnNumber": 48,
                        "endLineNumber": 96,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "update.getChanges().entrySet()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1533,
                        "startLineNumber": 96,
                        "startColumnNumber": 8,
                        "endLineNumber": 132,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n  Operation op=change.getValue();\n  Key key=change.getKey();\n  if (columnProperties.contains(key.getName()) && null == key.getRevision())   continue;\n  if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)   continue;\n  if (needComma) {\n    sb.append(\",\");\n  }\n  sb.append(\"[\");\n  if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n    sb.append(\"\\\"+\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n    sb.append(\"\\\"=\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.MAX) {\n    sb.append(\"\\\"M\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n    sb.append(\"\\\"*\\\",\");\n  }\n else {\n    throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n  }\n  appendString(sb,key.getName());\n  sb.append(\",\");\n  if (key.getRevision() != null) {\n    appendString(sb,key.getRevision().toString());\n    sb.append(\",\");\n  }\n  appendValue(sb,op.value);\n  sb.append(\"]\");\n  needComma=true;\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 218,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1677,
                        "startLineNumber": 93,
                        "startColumnNumber": 44,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  StringBuilder sb=new StringBuilder(\"[\");\n  boolean needComma=false;\n  for (  Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n    Operation op=change.getValue();\n    Key key=change.getKey();\n    if (columnProperties.contains(key.getName()) && null == key.getRevision())     continue;\n    if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)     continue;\n    if (needComma) {\n      sb.append(\",\");\n    }\n    sb.append(\"[\");\n    if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n      sb.append(\"\\\"+\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n      sb.append(\"\\\"=\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.MAX) {\n      sb.append(\"\\\"M\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n      sb.append(\"\\\"*\\\",\");\n    }\n else {\n      throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n    }\n    appendString(sb,key.getName());\n    sb.append(\",\");\n    if (key.getRevision() != null) {\n      appendString(sb,key.getRevision().toString());\n      sb.append(\",\");\n    }\n    appendValue(sb,op.value);\n    sb.append(\"]\");\n    needComma=true;\n  }\n  return sb.append(\"]\").toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 240,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1891,
                        "startLineNumber": 89,
                        "startColumnNumber": 4,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Serializes the changes in the  {@link UpdateOp} into a JSON array; eachentry is another JSON array holding operation, key, revision, and value.\n */\npublic String asString(UpdateOp update){\n  StringBuilder sb=new StringBuilder(\"[\");\n  boolean needComma=false;\n  for (  Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n    Operation op=change.getValue();\n    Key key=change.getKey();\n    if (columnProperties.contains(key.getName()) && null == key.getRevision())     continue;\n    if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)     continue;\n    if (needComma) {\n      sb.append(\",\");\n    }\n    sb.append(\"[\");\n    if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n      sb.append(\"\\\"+\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n      sb.append(\"\\\"=\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.MAX) {\n      sb.append(\"\\\"M\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n      sb.append(\"\\\"*\\\",\");\n    }\n else {\n      throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n    }\n    appendString(sb,key.getName());\n    sb.append(\",\");\n    if (key.getRevision() != null) {\n      appendString(sb,key.getRevision().toString());\n      sb.append(\",\");\n    }\n    appendValue(sb,op.value);\n    sb.append(\"]\");\n    needComma=true;\n  }\n  return sb.append(\"]\").toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 250,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 96,
                    "startColumnNumber": 48,
                    "endLineNumber": 96,
                    "endColumnNumber": 78
                },
                "nodeContext": "update.getChanges().entrySet()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.document.UpdateOp"
        },
        {
            "nodeContext": "update",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 121,
                "startColumnNumber": 70,
                "endLineNumber": 121,
                "endColumnNumber": 76
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 121,
                        "startColumnNumber": 70,
                        "endLineNumber": 121,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "update.toString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 121,
                        "startColumnNumber": 49,
                        "endLineNumber": 121,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "\"Can't serialize \" + update.toString() + \" for JSON append\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 121,
                        "startColumnNumber": 22,
                        "endLineNumber": 121,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 121,
                        "startColumnNumber": 16,
                        "endLineNumber": 121,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 126,
                        "startLineNumber": 120,
                        "startColumnNumber": 19,
                        "endLineNumber": 122,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 118,
                        "startColumnNumber": 19,
                        "endLineNumber": 122,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n  sb.append(\"\\\"*\\\",\");\n}\n else {\n  throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 343,
                        "startLineNumber": 116,
                        "startColumnNumber": 19,
                        "endLineNumber": 122,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (op.type == UpdateOp.Operation.Type.MAX) {\n  sb.append(\"\\\"M\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n  sb.append(\"\\\"*\\\",\");\n}\n else {\n  throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 497,
                        "startLineNumber": 114,
                        "startColumnNumber": 19,
                        "endLineNumber": 122,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n  sb.append(\"\\\"=\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.MAX) {\n  sb.append(\"\\\"M\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n  sb.append(\"\\\"*\\\",\");\n}\n else {\n  throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 605,
                        "startLineNumber": 112,
                        "startColumnNumber": 12,
                        "endLineNumber": 122,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n  sb.append(\"\\\"+\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n  sb.append(\"\\\"=\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.MAX) {\n  sb.append(\"\\\"M\\\",\");\n}\n else if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n  sb.append(\"\\\"*\\\",\");\n}\n else {\n  throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 95,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1461,
                        "startLineNumber": 96,
                        "startColumnNumber": 80,
                        "endLineNumber": 132,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Operation op=change.getValue();\n  Key key=change.getKey();\n  if (columnProperties.contains(key.getName()) && null == key.getRevision())   continue;\n  if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)   continue;\n  if (needComma) {\n    sb.append(\",\");\n  }\n  sb.append(\"[\");\n  if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n    sb.append(\"\\\"+\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n    sb.append(\"\\\"=\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.MAX) {\n    sb.append(\"\\\"M\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n    sb.append(\"\\\"*\\\",\");\n  }\n else {\n    throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n  }\n  appendString(sb,key.getName());\n  sb.append(\",\");\n  if (key.getRevision() != null) {\n    appendString(sb,key.getRevision().toString());\n    sb.append(\",\");\n  }\n  appendValue(sb,op.value);\n  sb.append(\"]\");\n  needComma=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 201,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1533,
                        "startLineNumber": 96,
                        "startColumnNumber": 8,
                        "endLineNumber": 132,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n  Operation op=change.getValue();\n  Key key=change.getKey();\n  if (columnProperties.contains(key.getName()) && null == key.getRevision())   continue;\n  if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)   continue;\n  if (needComma) {\n    sb.append(\",\");\n  }\n  sb.append(\"[\");\n  if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n    sb.append(\"\\\"+\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n    sb.append(\"\\\"=\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.MAX) {\n    sb.append(\"\\\"M\\\",\");\n  }\n else   if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n    sb.append(\"\\\"*\\\",\");\n  }\n else {\n    throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n  }\n  appendString(sb,key.getName());\n  sb.append(\",\");\n  if (key.getRevision() != null) {\n    appendString(sb,key.getRevision().toString());\n    sb.append(\",\");\n  }\n  appendValue(sb,op.value);\n  sb.append(\"]\");\n  needComma=true;\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 218,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1677,
                        "startLineNumber": 93,
                        "startColumnNumber": 44,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  StringBuilder sb=new StringBuilder(\"[\");\n  boolean needComma=false;\n  for (  Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n    Operation op=change.getValue();\n    Key key=change.getKey();\n    if (columnProperties.contains(key.getName()) && null == key.getRevision())     continue;\n    if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)     continue;\n    if (needComma) {\n      sb.append(\",\");\n    }\n    sb.append(\"[\");\n    if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n      sb.append(\"\\\"+\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n      sb.append(\"\\\"=\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.MAX) {\n      sb.append(\"\\\"M\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n      sb.append(\"\\\"*\\\",\");\n    }\n else {\n      throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n    }\n    appendString(sb,key.getName());\n    sb.append(\",\");\n    if (key.getRevision() != null) {\n      appendString(sb,key.getRevision().toString());\n      sb.append(\",\");\n    }\n    appendValue(sb,op.value);\n    sb.append(\"]\");\n    needComma=true;\n  }\n  return sb.append(\"]\").toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 240,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1891,
                        "startLineNumber": 89,
                        "startColumnNumber": 4,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Serializes the changes in the  {@link UpdateOp} into a JSON array; eachentry is another JSON array holding operation, key, revision, and value.\n */\npublic String asString(UpdateOp update){\n  StringBuilder sb=new StringBuilder(\"[\");\n  boolean needComma=false;\n  for (  Map.Entry<Key,Operation> change : update.getChanges().entrySet()) {\n    Operation op=change.getValue();\n    Key key=change.getKey();\n    if (columnProperties.contains(key.getName()) && null == key.getRevision())     continue;\n    if (op.type == UpdateOp.Operation.Type.CONTAINS_MAP_ENTRY)     continue;\n    if (needComma) {\n      sb.append(\",\");\n    }\n    sb.append(\"[\");\n    if (op.type == UpdateOp.Operation.Type.INCREMENT) {\n      sb.append(\"\\\"+\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.SET || op.type == UpdateOp.Operation.Type.SET_MAP_ENTRY) {\n      sb.append(\"\\\"=\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.MAX) {\n      sb.append(\"\\\"M\\\",\");\n    }\n else     if (op.type == UpdateOp.Operation.Type.REMOVE_MAP_ENTRY) {\n      sb.append(\"\\\"*\\\",\");\n    }\n else {\n      throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n    }\n    appendString(sb,key.getName());\n    sb.append(\",\");\n    if (key.getRevision() != null) {\n      appendString(sb,key.getRevision().toString());\n      sb.append(\",\");\n    }\n    appendValue(sb,op.value);\n    sb.append(\"]\");\n    needComma=true;\n  }\n  return sb.append(\"]\").toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 250,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 94,
                    "startLineNumber": 121,
                    "startColumnNumber": 16,
                    "endLineNumber": 121,
                    "endColumnNumber": 110
                },
                "nodeContext": "throw new DocumentStoreException(\"Can't serialize \" + update.toString() + \" for JSON append\");\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.document.UpdateOp"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 96,
            "startColumnNumber": 48,
            "endLineNumber": 96,
            "endColumnNumber": 54
        },
        {
            "charLength": 6,
            "startLineNumber": 121,
            "startColumnNumber": 70,
            "endLineNumber": 121,
            "endColumnNumber": 76
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 10
        }
    ]
}