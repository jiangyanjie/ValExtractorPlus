{
    "id": 55,
    "expression": "(end < 0)",
    "projectName": "jackrabbit-oak",
    "commitID": "49099157f6a3c562912fd03c5ba6c59d75e8393d",
    "filePath": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/util/FunctionIndexProcessor.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "(end < 0)",
            "nodeType": "ParenthesizedExpression",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 243,
                "startColumnNumber": 22,
                "endLineNumber": 243,
                "endColumnNumber": 31
            },
            "astNodeNumber": 4,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 243,
                        "startColumnNumber": 22,
                        "endLineNumber": 243,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "(end < 0) ? paren : Math.min(end,paren)",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 243,
                        "startColumnNumber": 16,
                        "endLineNumber": 243,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "end=(end < 0) ? paren : Math.min(end,paren)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 243,
                        "startColumnNumber": 16,
                        "endLineNumber": 243,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "end=(end < 0) ? paren : Math.min(end,paren);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 242,
                        "startColumnNumber": 27,
                        "endLineNumber": 244,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  end=(end < 0) ? paren : Math.min(end,paren);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 242,
                        "startColumnNumber": 12,
                        "endLineNumber": 244,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (paren >= 0) {\n  end=(end < 0) ? paren : Math.min(end,paren);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 489,
                        "startLineNumber": 237,
                        "startColumnNumber": 15,
                        "endLineNumber": 250,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  String prop=remaining;\n  int paren=remaining.indexOf(')');\n  int comma=remaining.indexOf(',');\n  int end=comma;\n  if (paren >= 0) {\n    end=(end < 0) ? paren : Math.min(end,paren);\n  }\n  if (end >= 0) {\n    prop=remaining.substring(0,end);\n  }\n  remaining=remaining.substring(prop.length());\n  return property(prop.replaceAll(\"@\",\"\"));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 77,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 907,
                        "startLineNumber": 228,
                        "startColumnNumber": 8,
                        "endLineNumber": 250,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (match(\"[\")) {\n  String prop=remaining;\n  int indexOfComma=remaining.indexOf(\",\");\n  if (indexOfComma > 0) {\n    prop=remaining.substring(0,indexOfComma);\n  }\n  prop=prop.substring(0,prop.lastIndexOf(']'));\n  remaining=remaining.substring(prop.length() + 1);\n  return property(prop.replaceAll(\"]]\",\"]\"));\n}\n else {\n  String prop=remaining;\n  int paren=remaining.indexOf(')');\n  int comma=remaining.indexOf(',');\n  int end=comma;\n  if (paren >= 0) {\n    end=(end < 0) ? paren : Math.min(end,paren);\n  }\n  if (end >= 0) {\n    prop=remaining.substring(0,end);\n  }\n  remaining=remaining.substring(prop.length());\n  return property(prop.replaceAll(\"@\",\"\"));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 139,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1671,
                        "startLineNumber": 207,
                        "startColumnNumber": 19,
                        "endLineNumber": 251,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (match(\"fn:local-name()\") || match(\"localname()\")) {\n    return \"@:localname\";\n  }\n  if (match(\"fn:name()\") || match(\"name()\")) {\n    return \"@:name\";\n  }\n  if (match(\"fn:upper-case(\") || match(\"upper(\")) {\n    return \"upper*\" + parse() + read(\")\");\n  }\n  if (match(\"fn:lower-case(\") || match(\"lower(\")) {\n    return \"lower*\" + parse() + read(\")\");\n  }\n  if (match(\"fn:coalesce(\") || match(\"coalesce(\")) {\n    return \"coalesce*\" + parse() + readCommaAndWhitespace()+ parse()+ read(\")\");\n  }\n  if (match(\"fn:string-length(\") || match(\"length(\")) {\n    return \"length*\" + parse() + read(\")\");\n  }\n  if (match(\"[\")) {\n    String prop=remaining;\n    int indexOfComma=remaining.indexOf(\",\");\n    if (indexOfComma > 0) {\n      prop=remaining.substring(0,indexOfComma);\n    }\n    prop=prop.substring(0,prop.lastIndexOf(']'));\n    remaining=remaining.substring(prop.length() + 1);\n    return property(prop.replaceAll(\"]]\",\"]\"));\n  }\n else {\n    String prop=remaining;\n    int paren=remaining.indexOf(')');\n    int comma=remaining.indexOf(',');\n    int end=comma;\n    if (paren >= 0) {\n      end=(end < 0) ? paren : Math.min(end,paren);\n    }\n    if (end >= 0) {\n      prop=remaining.substring(0,end);\n    }\n    remaining=remaining.substring(prop.length());\n    return property(prop.replaceAll(\"@\",\"\"));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 234,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 207,
                        "startColumnNumber": 4,
                        "endLineNumber": 251,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "String parse(){\n  if (match(\"fn:local-name()\") || match(\"localname()\")) {\n    return \"@:localname\";\n  }\n  if (match(\"fn:name()\") || match(\"name()\")) {\n    return \"@:name\";\n  }\n  if (match(\"fn:upper-case(\") || match(\"upper(\")) {\n    return \"upper*\" + parse() + read(\")\");\n  }\n  if (match(\"fn:lower-case(\") || match(\"lower(\")) {\n    return \"lower*\" + parse() + read(\")\");\n  }\n  if (match(\"fn:coalesce(\") || match(\"coalesce(\")) {\n    return \"coalesce*\" + parse() + readCommaAndWhitespace()+ parse()+ read(\")\");\n  }\n  if (match(\"fn:string-length(\") || match(\"length(\")) {\n    return \"length*\" + parse() + read(\")\");\n  }\n  if (match(\"[\")) {\n    String prop=remaining;\n    int indexOfComma=remaining.indexOf(\",\");\n    if (indexOfComma > 0) {\n      prop=remaining.substring(0,indexOfComma);\n    }\n    prop=prop.substring(0,prop.lastIndexOf(']'));\n    remaining=remaining.substring(prop.length() + 1);\n    return property(prop.replaceAll(\"]]\",\"]\"));\n  }\n else {\n    String prop=remaining;\n    int paren=remaining.indexOf(')');\n    int comma=remaining.indexOf(',');\n    int end=comma;\n    if (paren >= 0) {\n      end=(end < 0) ? paren : Math.min(end,paren);\n    }\n    if (end >= 0) {\n      prop=remaining.substring(0,end);\n    }\n    remaining=remaining.substring(prop.length());\n    return property(prop.replaceAll(\"@\",\"\"));\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 238,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 243,
                    "startColumnNumber": 16,
                    "endLineNumber": 243,
                    "endColumnNumber": 63
                },
                "nodeContext": "end=(end < 0) ? paren : Math.min(end,paren);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 3,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 243,
            "startColumnNumber": 22,
            "endLineNumber": 243,
            "endColumnNumber": 31
        }
    ],
    "layoutRelationDataList": []
}