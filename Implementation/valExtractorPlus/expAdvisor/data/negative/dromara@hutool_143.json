{
    "id": 143,
    "expression": "collection",
    "projectName": "dromara@hutool",
    "commitID": "6e9879c82126aefae42fb02af9e25be1347b365a",
    "filePath": "hutool-core/src/main/java/cn/hutool/core/collection/CollUtil.java",
    "occurrences": 4,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "collection",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1757,
                "startColumnNumber": 14,
                "endLineNumber": 1757,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1757,
                        "startColumnNumber": 6,
                        "endLineNumber": 1757,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "null == collection",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1757,
                        "startColumnNumber": 6,
                        "endLineNumber": 1757,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "null == collection || null == value",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 1757,
                        "startColumnNumber": 2,
                        "endLineNumber": 1759,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (null == collection || null == value) {\n  return collection;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 1757,
                    "startColumnNumber": 6,
                    "endLineNumber": 1757,
                    "endColumnNumber": 41
                },
                "nodeContext": "null == collection || null == value",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.Collection<T>"
        },
        {
            "nodeContext": "collection",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1758,
                "startColumnNumber": 10,
                "endLineNumber": 1758,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1758,
                        "startColumnNumber": 3,
                        "endLineNumber": 1758,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "return collection;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1757,
                        "startColumnNumber": 43,
                        "endLineNumber": 1759,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 3,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 1757,
                        "startColumnNumber": 2,
                        "endLineNumber": 1759,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (null == collection || null == value) {\n  return collection;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1758,
                    "startColumnNumber": 3,
                    "endLineNumber": 1758,
                    "endColumnNumber": 21
                },
                "nodeContext": "return collection;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.util.Collection<T>"
        },
        {
            "nodeContext": "collection",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1785,
                "startColumnNumber": 3,
                "endLineNumber": 1785,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1785,
                        "startColumnNumber": 3,
                        "endLineNumber": 1785,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "collection.add(convert.convert(elementType,iter.next()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 1785,
                        "startColumnNumber": 3,
                        "endLineNumber": 1785,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "collection.add(convert.convert(elementType,iter.next()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 1784,
                        "startColumnNumber": 25,
                        "endLineNumber": 1786,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  collection.add(convert.convert(elementType,iter.next()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 1784,
                        "startColumnNumber": 2,
                        "endLineNumber": 1786,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "while (iter.hasNext()) {\n  collection.add(convert.convert(elementType,iter.next()));\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 1785,
                    "startColumnNumber": 3,
                    "endLineNumber": 1785,
                    "endColumnNumber": 61
                },
                "nodeContext": "collection.add(convert.convert(elementType,iter.next()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.Collection<T>"
        },
        {
            "nodeContext": "collection",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1788,
                "startColumnNumber": 9,
                "endLineNumber": 1788,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1788,
                        "startColumnNumber": 2,
                        "endLineNumber": 1788,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "return collection;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1788,
                    "startColumnNumber": 2,
                    "endLineNumber": 1788,
                    "endColumnNumber": 20
                },
                "nodeContext": "return collection;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.util.Collection<T>"
        }
    ],
    "positionList": [
        {
            "charLength": 10,
            "startLineNumber": 1757,
            "startColumnNumber": 14,
            "endLineNumber": 1757,
            "endColumnNumber": 24
        },
        {
            "charLength": 10,
            "startLineNumber": 1758,
            "startColumnNumber": 10,
            "endLineNumber": 1758,
            "endColumnNumber": 20
        },
        {
            "charLength": 10,
            "startLineNumber": 1785,
            "startColumnNumber": 3,
            "endLineNumber": 1785,
            "endColumnNumber": 13
        },
        {
            "charLength": 10,
            "startLineNumber": 1788,
            "startColumnNumber": 9,
            "endLineNumber": 1788,
            "endColumnNumber": 19
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 1
        }
    ]
}