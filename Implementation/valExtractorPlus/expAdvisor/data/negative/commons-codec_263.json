{
    "id": 263,
    "expression": "txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray()",
    "projectName": "commons-codec",
    "commitID": "d9d0eaca911ff6654c71b9eca9349cdffc3e5871",
    "filePath": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 55,
                "startLineNumber": 102,
                "startColumnNumber": 28,
                "endLineNumber": 102,
                "endColumnNumber": 83
            },
            "astNodeNumber": 12,
            "astHeight": 6,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 102,
                        "startColumnNumber": 21,
                        "endLineNumber": 102,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 14,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 102,
                        "startColumnNumber": 8,
                        "endLineNumber": 102,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 102,
                    "startColumnNumber": 8,
                    "endLineNumber": 102,
                    "endColumnNumber": 84
                },
                "nodeContext": "final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 19,
                "astHeight": 8
            },
            "tokenLength": 7,
            "type": "char[]"
        }
    ],
    "positionList": [
        {
            "charLength": 55,
            "startLineNumber": 102,
            "startColumnNumber": 28,
            "endLineNumber": 102,
            "endColumnNumber": 83
        }
    ],
    "layoutRelationDataList": []
}