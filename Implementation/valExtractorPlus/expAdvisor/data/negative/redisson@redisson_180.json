{
    "id": 180,
    "expression": "arg",
    "projectName": "redisson@redisson",
    "commitID": "981ce2e4b13ec3ebc89a703d754a9ca1dcc9f3ac",
    "filePath": "redisson/src/main/java/org/redisson/liveobject/core/AccessorInterceptor.java",
    "occurrences": 18,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 106,
                "startColumnNumber": 16,
                "endLineNumber": 106,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 106,
                        "startColumnNumber": 16,
                        "endLineNumber": 106,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "arg != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 106,
                        "startColumnNumber": 16,
                        "endLineNumber": 106,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 201,
                        "startLineNumber": 106,
                        "startColumnNumber": 12,
                        "endLineNumber": 108,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n  throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 106,
                    "startColumnNumber": 16,
                    "endLineNumber": 106,
                    "endColumnNumber": 92
                },
                "nodeContext": "arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 106,
                "startColumnNumber": 62,
                "endLineNumber": 106,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 106,
                        "startColumnNumber": 62,
                        "endLineNumber": 106,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "arg.getClass()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 106,
                        "startColumnNumber": 31,
                        "endLineNumber": 106,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 106,
                        "startColumnNumber": 16,
                        "endLineNumber": 106,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 201,
                        "startLineNumber": 106,
                        "startColumnNumber": 12,
                        "endLineNumber": 108,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n  throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 106,
                    "startColumnNumber": 16,
                    "endLineNumber": 106,
                    "endColumnNumber": 92
                },
                "nodeContext": "arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 110,
                "startColumnNumber": 16,
                "endLineNumber": 110,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 110,
                        "startColumnNumber": 16,
                        "endLineNumber": 110,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "arg instanceof RLiveObject",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1046,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 129,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg instanceof RLiveObject) {\n  RLiveObject liveObject=(RLiveObject)arg;\n  storeIndex(field,me,liveObject.getLiveObjectId());\n  Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n  NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n else {\n    liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 99,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 26,
                    "startLineNumber": 110,
                    "startColumnNumber": 16,
                    "endLineNumber": 110,
                    "endColumnNumber": 42
                },
                "nodeContext": "arg instanceof RLiveObject",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 111,
                "startColumnNumber": 55,
                "endLineNumber": 111,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 111,
                        "startColumnNumber": 41,
                        "endLineNumber": 111,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "(RLiveObject)arg",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 111,
                        "startColumnNumber": 28,
                        "endLineNumber": 111,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "liveObject=(RLiveObject)arg",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 111,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "RLiveObject liveObject=(RLiveObject)arg;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1014,
                        "startLineNumber": 110,
                        "startColumnNumber": 44,
                        "endLineNumber": 129,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  RLiveObject liveObject=(RLiveObject)arg;\n  storeIndex(field,me,liveObject.getLiveObjectId());\n  Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n  NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n else {\n    liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 94,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1046,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 129,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg instanceof RLiveObject) {\n  RLiveObject liveObject=(RLiveObject)arg;\n  storeIndex(field,me,liveObject.getLiveObjectId());\n  Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n  NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n else {\n    liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 99,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 43,
                    "startLineNumber": 111,
                    "startColumnNumber": 16,
                    "endLineNumber": 111,
                    "endColumnNumber": 59
                },
                "nodeContext": "RLiveObject liveObject=(RLiveObject)arg;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 131,
                "startColumnNumber": 18,
                "endLineNumber": 131,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 131,
                        "startColumnNumber": 18,
                        "endLineNumber": 131,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "arg instanceof RObject",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 131,
                        "startColumnNumber": 17,
                        "endLineNumber": 131,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "(arg instanceof RObject)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 131,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "!(arg instanceof RObject)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 315,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 135,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 131,
                    "startColumnNumber": 16,
                    "endLineNumber": 131,
                    "endColumnNumber": 41
                },
                "nodeContext": "!(arg instanceof RObject)",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 6,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 132,
                "startColumnNumber": 24,
                "endLineNumber": 132,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 132,
                        "startColumnNumber": 24,
                        "endLineNumber": 132,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "arg instanceof Collection",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 132,
                        "startColumnNumber": 24,
                        "endLineNumber": 132,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "arg instanceof Collection || arg instanceof Map",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 132,
                        "startColumnNumber": 23,
                        "endLineNumber": 132,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "(arg instanceof Collection || arg instanceof Map)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 315,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 135,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 132,
                    "startColumnNumber": 23,
                    "endLineNumber": 132,
                    "endColumnNumber": 72
                },
                "nodeContext": "(arg instanceof Collection || arg instanceof Map)",
                "nodeType": "ParenthesizedExpression",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 132,
                "startColumnNumber": 53,
                "endLineNumber": 132,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 132,
                        "startColumnNumber": 53,
                        "endLineNumber": 132,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "arg instanceof Map",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 132,
                        "startColumnNumber": 24,
                        "endLineNumber": 132,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "arg instanceof Collection || arg instanceof Map",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 132,
                        "startColumnNumber": 23,
                        "endLineNumber": 132,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "(arg instanceof Collection || arg instanceof Map)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 315,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 135,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 132,
                    "startColumnNumber": 23,
                    "endLineNumber": 132,
                    "endColumnNumber": 72
                },
                "nodeContext": "(arg instanceof Collection || arg instanceof Map)",
                "nodeType": "ParenthesizedExpression",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 136,
                "startColumnNumber": 174,
                "endLineNumber": 136,
                "endColumnNumber": 177
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 136,
                        "startColumnNumber": 174,
                        "endLineNumber": 136,
                        "endColumnNumber": 188
                    },
                    "nodeContext": "arg.getClass()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 166,
                        "startLineNumber": 136,
                        "startColumnNumber": 34,
                        "endLineNumber": 136,
                        "endColumnNumber": 200
                    },
                    "nodeContext": "connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 136,
                        "startColumnNumber": 24,
                        "endLineNumber": 136,
                        "endColumnNumber": 200
                    },
                    "nodeContext": "rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 185,
                        "startLineNumber": 136,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 201
                    },
                    "nodeContext": "RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 763,
                        "startLineNumber": 135,
                        "startColumnNumber": 67,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 102,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 185,
                    "startLineNumber": 136,
                    "startColumnNumber": 16,
                    "endLineNumber": 136,
                    "endColumnNumber": 201
                },
                "nodeContext": "RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 28,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 137,
                "startColumnNumber": 20,
                "endLineNumber": 137,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 137,
                        "startColumnNumber": 20,
                        "endLineNumber": 137,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "arg != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 437,
                        "startLineNumber": 137,
                        "startColumnNumber": 16,
                        "endLineNumber": 147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (arg != null) {\n  if (rObject instanceof Collection) {\n    Collection<?> c=(Collection<?>)rObject;\n    c.clear();\n    c.addAll((Collection)arg);\n  }\n else {\n    Map<?,?> m=(Map<?,?>)rObject;\n    m.clear();\n    m.putAll((Map)arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 763,
                        "startLineNumber": 135,
                        "startColumnNumber": 67,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 102,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 137,
                    "startColumnNumber": 20,
                    "endLineNumber": 137,
                    "endColumnNumber": 31
                },
                "nodeContext": "arg != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 141,
                "startColumnNumber": 46,
                "endLineNumber": 141,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 141,
                        "startColumnNumber": 33,
                        "endLineNumber": 141,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "(Collection)arg",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 141,
                        "startColumnNumber": 24,
                        "endLineNumber": 141,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "c.addAll((Collection)arg)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 141,
                        "startColumnNumber": 24,
                        "endLineNumber": 141,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "c.addAll((Collection)arg);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 138,
                        "startColumnNumber": 55,
                        "endLineNumber": 142,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Collection<?> c=(Collection<?>)rObject;\n  c.clear();\n  c.addAll((Collection)arg);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 380,
                        "startLineNumber": 138,
                        "startColumnNumber": 20,
                        "endLineNumber": 146,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (rObject instanceof Collection) {\n  Collection<?> c=(Collection<?>)rObject;\n  c.clear();\n  c.addAll((Collection)arg);\n}\n else {\n  Map<?,?> m=(Map<?,?>)rObject;\n  m.clear();\n  m.putAll((Map)arg);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 59,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 420,
                        "startLineNumber": 137,
                        "startColumnNumber": 33,
                        "endLineNumber": 147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (rObject instanceof Collection) {\n    Collection<?> c=(Collection<?>)rObject;\n    c.clear();\n    c.addAll((Collection)arg);\n  }\n else {\n    Map<?,?> m=(Map<?,?>)rObject;\n    m.clear();\n    m.putAll((Map)arg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 437,
                        "startLineNumber": 137,
                        "startColumnNumber": 16,
                        "endLineNumber": 147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (arg != null) {\n  if (rObject instanceof Collection) {\n    Collection<?> c=(Collection<?>)rObject;\n    c.clear();\n    c.addAll((Collection)arg);\n  }\n else {\n    Map<?,?> m=(Map<?,?>)rObject;\n    m.clear();\n    m.putAll((Map)arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 763,
                        "startLineNumber": 135,
                        "startColumnNumber": 67,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 102,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 141,
                    "startColumnNumber": 24,
                    "endLineNumber": 141,
                    "endColumnNumber": 51
                },
                "nodeContext": "c.addAll((Collection)arg);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 145,
                "startColumnNumber": 39,
                "endLineNumber": 145,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 145,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "(Map)arg",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 145,
                        "startColumnNumber": 24,
                        "endLineNumber": 145,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m.putAll((Map)arg)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 145,
                        "startColumnNumber": 24,
                        "endLineNumber": 145,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "m.putAll((Map)arg);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 162,
                        "startLineNumber": 142,
                        "startColumnNumber": 27,
                        "endLineNumber": 146,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Map<?,?> m=(Map<?,?>)rObject;\n  m.clear();\n  m.putAll((Map)arg);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 380,
                        "startLineNumber": 138,
                        "startColumnNumber": 20,
                        "endLineNumber": 146,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (rObject instanceof Collection) {\n  Collection<?> c=(Collection<?>)rObject;\n  c.clear();\n  c.addAll((Collection)arg);\n}\n else {\n  Map<?,?> m=(Map<?,?>)rObject;\n  m.clear();\n  m.putAll((Map)arg);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 59,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 420,
                        "startLineNumber": 137,
                        "startColumnNumber": 33,
                        "endLineNumber": 147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (rObject instanceof Collection) {\n    Collection<?> c=(Collection<?>)rObject;\n    c.clear();\n    c.addAll((Collection)arg);\n  }\n else {\n    Map<?,?> m=(Map<?,?>)rObject;\n    m.clear();\n    m.putAll((Map)arg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 437,
                        "startLineNumber": 137,
                        "startColumnNumber": 16,
                        "endLineNumber": 147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (arg != null) {\n  if (rObject instanceof Collection) {\n    Collection<?> c=(Collection<?>)rObject;\n    c.clear();\n    c.addAll((Collection)arg);\n  }\n else {\n    Map<?,?> m=(Map<?,?>)rObject;\n    m.clear();\n    m.putAll((Map)arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 763,
                        "startLineNumber": 135,
                        "startColumnNumber": 67,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 102,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 131,
                        "startColumnNumber": 12,
                        "endLineNumber": 151,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n  RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n  if (arg != null) {\n    if (rObject instanceof Collection) {\n      Collection<?> c=(Collection<?>)rObject;\n      c.clear();\n      c.addAll((Collection)arg);\n    }\n else {\n      Map<?,?> m=(Map<?,?>)rObject;\n      m.clear();\n      m.putAll((Map)arg);\n    }\n  }\n  if (rObject != null) {\n    arg=rObject;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 145,
                    "startColumnNumber": 24,
                    "endLineNumber": 145,
                    "endColumnNumber": 44
                },
                "nodeContext": "m.putAll((Map)arg);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 153,
                "startColumnNumber": 16,
                "endLineNumber": 153,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 153,
                        "startColumnNumber": 16,
                        "endLineNumber": 153,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "arg instanceof RObject",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 382,
                        "startLineNumber": 153,
                        "startColumnNumber": 12,
                        "endLineNumber": 160,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg instanceof RObject) {\n  if (commandExecutor instanceof CommandBatchService) {\n    commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n  }\n else {\n    commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 153,
                    "startColumnNumber": 16,
                    "endLineNumber": 153,
                    "endColumnNumber": 38
                },
                "nodeContext": "arg instanceof RObject",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 155,
                "startColumnNumber": 76,
                "endLineNumber": 155,
                "endColumnNumber": 79
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 155,
                        "startColumnNumber": 66,
                        "endLineNumber": 155,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "(RObject)arg",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 155,
                        "startColumnNumber": 20,
                        "endLineNumber": 155,
                        "endColumnNumber": 100
                    },
                    "nodeContext": "commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 155,
                        "startColumnNumber": 20,
                        "endLineNumber": 155,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 121,
                        "startLineNumber": 154,
                        "startColumnNumber": 68,
                        "endLineNumber": 156,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 158,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (commandExecutor instanceof CommandBatchService) {\n  commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n}\n else {\n  commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 354,
                        "startLineNumber": 153,
                        "startColumnNumber": 40,
                        "endLineNumber": 160,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (commandExecutor instanceof CommandBatchService) {\n    commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n  }\n else {\n    commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 382,
                        "startLineNumber": 153,
                        "startColumnNumber": 12,
                        "endLineNumber": 160,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg instanceof RObject) {\n  if (commandExecutor instanceof CommandBatchService) {\n    commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n  }\n else {\n    commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 155,
                    "startColumnNumber": 20,
                    "endLineNumber": 155,
                    "endColumnNumber": 101
                },
                "nodeContext": "commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 157,
                "startColumnNumber": 71,
                "endLineNumber": 157,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 157,
                        "startColumnNumber": 61,
                        "endLineNumber": 157,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "(RObject)arg",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 157,
                        "startColumnNumber": 20,
                        "endLineNumber": 157,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 157,
                        "startColumnNumber": 20,
                        "endLineNumber": 157,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 156,
                        "startColumnNumber": 23,
                        "endLineNumber": 158,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 158,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (commandExecutor instanceof CommandBatchService) {\n  commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n}\n else {\n  commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 354,
                        "startLineNumber": 153,
                        "startColumnNumber": 40,
                        "endLineNumber": 160,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (commandExecutor instanceof CommandBatchService) {\n    commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n  }\n else {\n    commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 382,
                        "startLineNumber": 153,
                        "startColumnNumber": 12,
                        "endLineNumber": 160,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg instanceof RObject) {\n  if (commandExecutor instanceof CommandBatchService) {\n    commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n  }\n else {\n    commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 157,
                    "startColumnNumber": 20,
                    "endLineNumber": 157,
                    "endColumnNumber": 96
                },
                "nodeContext": "commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 162,
                "startColumnNumber": 16,
                "endLineNumber": 162,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 162,
                        "startColumnNumber": 16,
                        "endLineNumber": 162,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "arg == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 440,
                        "startLineNumber": 162,
                        "startColumnNumber": 12,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg == null) {\n  Object oldArg=liveMap.remove(fieldName);\n  removeIndex(me,oldArg,fieldName,field);\n}\n else {\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 162,
                    "startColumnNumber": 16,
                    "endLineNumber": 162,
                    "endColumnNumber": 27
                },
                "nodeContext": "arg == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 166,
                "startColumnNumber": 38,
                "endLineNumber": 166,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 166,
                        "startColumnNumber": 16,
                        "endLineNumber": 166,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "storeIndex(field,me,arg)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 166,
                        "startColumnNumber": 16,
                        "endLineNumber": 166,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "storeIndex(field,me,arg);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 284,
                        "startLineNumber": 165,
                        "startColumnNumber": 19,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 440,
                        "startLineNumber": 162,
                        "startColumnNumber": 12,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg == null) {\n  Object oldArg=liveMap.remove(fieldName);\n  removeIndex(me,oldArg,fieldName,field);\n}\n else {\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 166,
                    "startColumnNumber": 16,
                    "endLineNumber": 166,
                    "endColumnNumber": 43
                },
                "nodeContext": "storeIndex(field,me,arg);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 169,
                "startColumnNumber": 52,
                "endLineNumber": 169,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 169,
                        "startColumnNumber": 20,
                        "endLineNumber": 169,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "liveMap.fastPutAsync(fieldName,arg)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 169,
                        "startColumnNumber": 20,
                        "endLineNumber": 169,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "liveMap.fastPutAsync(fieldName,arg);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 168,
                        "startColumnNumber": 68,
                        "endLineNumber": 170,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  liveMap.fastPutAsync(fieldName,arg);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 207,
                        "startLineNumber": 168,
                        "startColumnNumber": 16,
                        "endLineNumber": 172,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (commandExecutor instanceof CommandBatchService) {\n  liveMap.fastPutAsync(fieldName,arg);\n}\n else {\n  liveMap.fastPut(fieldName,arg);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 284,
                        "startLineNumber": 165,
                        "startColumnNumber": 19,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 440,
                        "startLineNumber": 162,
                        "startColumnNumber": 12,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg == null) {\n  Object oldArg=liveMap.remove(fieldName);\n  removeIndex(me,oldArg,fieldName,field);\n}\n else {\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 169,
                    "startColumnNumber": 20,
                    "endLineNumber": 169,
                    "endColumnNumber": 57
                },
                "nodeContext": "liveMap.fastPutAsync(fieldName,arg);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "arg",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 171,
                "startColumnNumber": 47,
                "endLineNumber": 171,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 171,
                        "startColumnNumber": 20,
                        "endLineNumber": 171,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "liveMap.fastPut(fieldName,arg)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 171,
                        "startColumnNumber": 20,
                        "endLineNumber": 171,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "liveMap.fastPut(fieldName,arg);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 170,
                        "startColumnNumber": 23,
                        "endLineNumber": 172,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  liveMap.fastPut(fieldName,arg);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 207,
                        "startLineNumber": 168,
                        "startColumnNumber": 16,
                        "endLineNumber": 172,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (commandExecutor instanceof CommandBatchService) {\n  liveMap.fastPutAsync(fieldName,arg);\n}\n else {\n  liveMap.fastPut(fieldName,arg);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 284,
                        "startLineNumber": 165,
                        "startColumnNumber": 19,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 440,
                        "startLineNumber": 162,
                        "startColumnNumber": 12,
                        "endLineNumber": 173,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (arg == null) {\n  Object oldArg=liveMap.remove(fieldName);\n  removeIndex(me,oldArg,fieldName,field);\n}\n else {\n  storeIndex(field,me,arg);\n  if (commandExecutor instanceof CommandBatchService) {\n    liveMap.fastPutAsync(fieldName,arg);\n  }\n else {\n    liveMap.fastPut(fieldName,arg);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 47,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3326,
                        "startLineNumber": 104,
                        "startColumnNumber": 41,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 354,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3359,
                        "startLineNumber": 104,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSetter(method,fieldName)) {\n  Object arg=args[0];\n  if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n    throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n  }\n  if (arg instanceof RLiveObject) {\n    RLiveObject liveObject=(RLiveObject)arg;\n    storeIndex(field,me,liveObject.getLiveObjectId());\n    Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n    NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n else {\n      liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n    }\n    return me;\n  }\n  if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n    RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n    if (arg != null) {\n      if (rObject instanceof Collection) {\n        Collection<?> c=(Collection<?>)rObject;\n        c.clear();\n        c.addAll((Collection)arg);\n      }\n else {\n        Map<?,?> m=(Map<?,?>)rObject;\n        m.clear();\n        m.putAll((Map)arg);\n      }\n    }\n    if (rObject != null) {\n      arg=rObject;\n    }\n  }\n  if (arg instanceof RObject) {\n    if (commandExecutor instanceof CommandBatchService) {\n      commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n    }\n else {\n      commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n    }\n    return me;\n  }\n  if (arg == null) {\n    Object oldArg=liveMap.remove(fieldName);\n    removeIndex(me,oldArg,fieldName,field);\n  }\n else {\n    storeIndex(field,me,arg);\n    if (commandExecutor instanceof CommandBatchService) {\n      liveMap.fastPutAsync(fieldName,arg);\n    }\n else {\n      liveMap.fastPut(fieldName,arg);\n    }\n  }\n  return me;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 359,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4899,
                        "startLineNumber": 70,
                        "startColumnNumber": 108,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 546,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5276,
                        "startLineNumber": 64,
                        "startColumnNumber": 4,
                        "endLineNumber": 177,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@RuntimeType @SuppressWarnings(\"NestedIfDepth\") public Object intercept(@Origin Method method,@SuperCall Callable<?> superMethod,@AllArguments Object[] args,@This Object me,@FieldValue(\"liveObjectLiveMap\") RMap<String,Object> liveMap) throws Exception {\n  if (isGetter(method,getREntityIdFieldName(me))) {\n    return ((RLiveObject)me).getLiveObjectId();\n  }\n  if (isSetter(method,getREntityIdFieldName(me))) {\n    ((RLiveObject)me).setLiveObjectId(args[0]);\n    return null;\n  }\n  String fieldName=getFieldName(method);\n  Field field=ClassUtils.getDeclaredField(me.getClass().getSuperclass(),fieldName);\n  Class<?> fieldType=field.getType();\n  if (isGetter(method,fieldName)) {\n    Object result=liveMap.get(fieldName);\n    if (result == null) {\n      RObject ar=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),fieldType,fieldName);\n      if (ar != null) {\n        connectionManager.getCommandExecutor().getObjectBuilder().store(ar,fieldName,liveMap);\n        return ar;\n      }\n    }\n    if (result != null && fieldType.isEnum()) {\n      if (result instanceof String) {\n        return Enum.valueOf((Class)fieldType,(String)result);\n      }\n      return result;\n    }\n    if (result instanceof RedissonReference) {\n      return connectionManager.getCommandExecutor().getObjectBuilder().fromReference((RedissonReference)result);\n    }\n    return result;\n  }\n  if (isSetter(method,fieldName)) {\n    Object arg=args[0];\n    if (arg != null && ClassUtils.isAnnotationPresent(arg.getClass(),REntity.class)) {\n      throw new IllegalStateException(\"REntity object should be attached to Redisson first\");\n    }\n    if (arg instanceof RLiveObject) {\n      RLiveObject liveObject=(RLiveObject)arg;\n      storeIndex(field,me,liveObject.getLiveObjectId());\n      Class<? extends Object> rEntity=liveObject.getClass().getSuperclass();\n      NamingScheme ns=connectionManager.getCommandExecutor().getObjectBuilder().getNamingScheme(rEntity);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n else {\n        liveMap.fastPut(fieldName,new RedissonReference(rEntity,ns.getName(rEntity,fieldType,getREntityIdFieldName(liveObject),liveObject.getLiveObjectId())));\n      }\n      return me;\n    }\n    if (!(arg instanceof RObject) && (arg instanceof Collection || arg instanceof Map) && TransformationMode.ANNOTATION_BASED.equals(ClassUtils.getAnnotation(me.getClass().getSuperclass(),REntity.class).fieldTransformation())) {\n      RObject rObject=connectionManager.getCommandExecutor().getObjectBuilder().createObject(((RLiveObject)me).getLiveObjectId(),me.getClass().getSuperclass(),arg.getClass(),fieldName);\n      if (arg != null) {\n        if (rObject instanceof Collection) {\n          Collection<?> c=(Collection<?>)rObject;\n          c.clear();\n          c.addAll((Collection)arg);\n        }\n else {\n          Map<?,?> m=(Map<?,?>)rObject;\n          m.clear();\n          m.putAll((Map)arg);\n        }\n      }\n      if (rObject != null) {\n        arg=rObject;\n      }\n    }\n    if (arg instanceof RObject) {\n      if (commandExecutor instanceof CommandBatchService) {\n        commandExecutor.getObjectBuilder().storeAsync((RObject)arg,fieldName,liveMap);\n      }\n else {\n        commandExecutor.getObjectBuilder().store((RObject)arg,fieldName,liveMap);\n      }\n      return me;\n    }\n    if (arg == null) {\n      Object oldArg=liveMap.remove(fieldName);\n      removeIndex(me,oldArg,fieldName,field);\n    }\n else {\n      storeIndex(field,me,arg);\n      if (commandExecutor instanceof CommandBatchService) {\n        liveMap.fastPutAsync(fieldName,arg);\n      }\n else {\n        liveMap.fastPut(fieldName,arg);\n      }\n    }\n    return me;\n  }\n  return superMethod.call();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 598,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 171,
                    "startColumnNumber": 20,
                    "endLineNumber": 171,
                    "endColumnNumber": 52
                },
                "nodeContext": "liveMap.fastPut(fieldName,arg);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 106,
            "startColumnNumber": 16,
            "endLineNumber": 106,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 106,
            "startColumnNumber": 62,
            "endLineNumber": 106,
            "endColumnNumber": 65
        },
        {
            "charLength": 3,
            "startLineNumber": 110,
            "startColumnNumber": 16,
            "endLineNumber": 110,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 111,
            "startColumnNumber": 55,
            "endLineNumber": 111,
            "endColumnNumber": 58
        },
        {
            "charLength": 3,
            "startLineNumber": 131,
            "startColumnNumber": 18,
            "endLineNumber": 131,
            "endColumnNumber": 21
        },
        {
            "charLength": 3,
            "startLineNumber": 132,
            "startColumnNumber": 24,
            "endLineNumber": 132,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 132,
            "startColumnNumber": 53,
            "endLineNumber": 132,
            "endColumnNumber": 56
        },
        {
            "charLength": 3,
            "startLineNumber": 136,
            "startColumnNumber": 174,
            "endLineNumber": 136,
            "endColumnNumber": 177
        },
        {
            "charLength": 3,
            "startLineNumber": 137,
            "startColumnNumber": 20,
            "endLineNumber": 137,
            "endColumnNumber": 23
        },
        {
            "charLength": 3,
            "startLineNumber": 141,
            "startColumnNumber": 46,
            "endLineNumber": 141,
            "endColumnNumber": 49
        },
        {
            "charLength": 3,
            "startLineNumber": 145,
            "startColumnNumber": 39,
            "endLineNumber": 145,
            "endColumnNumber": 42
        },
        {
            "charLength": 3,
            "startLineNumber": 153,
            "startColumnNumber": 16,
            "endLineNumber": 153,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 155,
            "startColumnNumber": 76,
            "endLineNumber": 155,
            "endColumnNumber": 79
        },
        {
            "charLength": 3,
            "startLineNumber": 157,
            "startColumnNumber": 71,
            "endLineNumber": 157,
            "endColumnNumber": 74
        },
        {
            "charLength": 3,
            "startLineNumber": 162,
            "startColumnNumber": 16,
            "endLineNumber": 162,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 166,
            "startColumnNumber": 38,
            "endLineNumber": 166,
            "endColumnNumber": 41
        },
        {
            "charLength": 3,
            "startLineNumber": 169,
            "startColumnNumber": 52,
            "endLineNumber": 169,
            "endColumnNumber": 55
        },
        {
            "charLength": 3,
            "startLineNumber": 171,
            "startColumnNumber": 47,
            "endLineNumber": 171,
            "endColumnNumber": 50
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 1
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 1
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 1
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        }
    ]
}