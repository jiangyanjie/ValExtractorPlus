{
    "id": 5540,
    "expression": "o[2]",
    "projectName": "commons-math",
    "commitID": "c4cc69cf5210ed3ddf67be8802a55f0a8058e260",
    "filePath": "src/java/org/apache/commons/math/geometry/Rotation.java",
    "occurrences": 9,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 973,
                "startColumnNumber": 6,
                "endLineNumber": 973,
                "endColumnNumber": 10
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 973,
                        "startColumnNumber": 6,
                        "endLineNumber": 973,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[2][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 973,
                        "startColumnNumber": 6,
                        "endLineNumber": 973,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 973,
                        "startColumnNumber": 6,
                        "endLineNumber": 973,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 973,
                    "startColumnNumber": 6,
                    "endLineNumber": 973,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 974,
                "startColumnNumber": 6,
                "endLineNumber": 974,
                "endColumnNumber": 10
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 974,
                    "startColumnNumber": 6,
                    "endLineNumber": 974,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 975,
                "startColumnNumber": 6,
                "endLineNumber": 975,
                "endColumnNumber": 10
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 975,
                        "startColumnNumber": 6,
                        "endLineNumber": 975,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[2][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 975,
                        "startColumnNumber": 6,
                        "endLineNumber": 975,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 975,
                        "startColumnNumber": 6,
                        "endLineNumber": 975,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 975,
                    "startColumnNumber": 6,
                    "endLineNumber": 975,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 984,
                "startColumnNumber": 22,
                "endLineNumber": 984,
                "endColumnNumber": 26
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 984,
                        "startColumnNumber": 22,
                        "endLineNumber": 984,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[2][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 984,
                        "startColumnNumber": 22,
                        "endLineNumber": 984,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[2][0] - m[2][0]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 984,
                        "startColumnNumber": 13,
                        "endLineNumber": 984,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr20=o[2][0] - m[2][0]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 984,
                        "startColumnNumber": 6,
                        "endLineNumber": 984,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr20=o[2][0] - m[2][0];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 984,
                    "startColumnNumber": 6,
                    "endLineNumber": 984,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr20=o[2][0] - m[2][0];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 985,
                "startColumnNumber": 22,
                "endLineNumber": 985,
                "endColumnNumber": 26
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 985,
                        "startColumnNumber": 22,
                        "endLineNumber": 985,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 985,
                        "startColumnNumber": 22,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[2][1] - m[2][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 985,
                        "startColumnNumber": 13,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr21=o[2][1] - m[2][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 985,
                        "startColumnNumber": 6,
                        "endLineNumber": 985,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 985,
                    "startColumnNumber": 6,
                    "endLineNumber": 985,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 986,
                "startColumnNumber": 22,
                "endLineNumber": 986,
                "endColumnNumber": 26
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 986,
                        "startColumnNumber": 22,
                        "endLineNumber": 986,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[2][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 986,
                        "startColumnNumber": 22,
                        "endLineNumber": 986,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[2][2] - m[2][2]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 986,
                        "startColumnNumber": 13,
                        "endLineNumber": 986,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr22=o[2][2] - m[2][2]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 986,
                        "startColumnNumber": 6,
                        "endLineNumber": 986,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr22=o[2][2] - m[2][2];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 986,
                    "startColumnNumber": 6,
                    "endLineNumber": 986,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr22=o[2][2] - m[2][2];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 1004,
                "startColumnNumber": 12,
                "endLineNumber": 1004,
                "endColumnNumber": 16
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1004,
                        "startColumnNumber": 12,
                        "endLineNumber": 1004,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[2][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1004,
                        "startColumnNumber": 6,
                        "endLineNumber": 1004,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x20=o[2][0]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1004,
                        "startColumnNumber": 6,
                        "endLineNumber": 1004,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x20=o[2][0];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1004,
                    "startColumnNumber": 6,
                    "endLineNumber": 1004,
                    "endColumnNumber": 20
                },
                "nodeContext": "x20=o[2][0];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 1005,
                "startColumnNumber": 12,
                "endLineNumber": 1005,
                "endColumnNumber": 16
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1005,
                        "startColumnNumber": 12,
                        "endLineNumber": 1005,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1005,
                        "startColumnNumber": 6,
                        "endLineNumber": 1005,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x21=o[2][1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1005,
                        "startColumnNumber": 6,
                        "endLineNumber": 1005,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x21=o[2][1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1005,
                    "startColumnNumber": 6,
                    "endLineNumber": 1005,
                    "endColumnNumber": 20
                },
                "nodeContext": "x21=o[2][1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "double[]"
        },
        {
            "nodeContext": "o[2]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 1006,
                "startColumnNumber": 12,
                "endLineNumber": 1006,
                "endColumnNumber": 16
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1006,
                        "startColumnNumber": 12,
                        "endLineNumber": 1006,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[2][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1006,
                        "startColumnNumber": 6,
                        "endLineNumber": 1006,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x22=o[2][2]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1006,
                        "startColumnNumber": 6,
                        "endLineNumber": 1006,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x22=o[2][2];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1006,
                    "startColumnNumber": 6,
                    "endLineNumber": 1006,
                    "endColumnNumber": 20
                },
                "nodeContext": "x22=o[2][2];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "double[]"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 973,
            "startColumnNumber": 6,
            "endLineNumber": 973,
            "endColumnNumber": 10
        },
        {
            "charLength": 4,
            "startLineNumber": 974,
            "startColumnNumber": 6,
            "endLineNumber": 974,
            "endColumnNumber": 10
        },
        {
            "charLength": 4,
            "startLineNumber": 975,
            "startColumnNumber": 6,
            "endLineNumber": 975,
            "endColumnNumber": 10
        },
        {
            "charLength": 4,
            "startLineNumber": 984,
            "startColumnNumber": 22,
            "endLineNumber": 984,
            "endColumnNumber": 26
        },
        {
            "charLength": 4,
            "startLineNumber": 985,
            "startColumnNumber": 22,
            "endLineNumber": 985,
            "endColumnNumber": 26
        },
        {
            "charLength": 4,
            "startLineNumber": 986,
            "startColumnNumber": 22,
            "endLineNumber": 986,
            "endColumnNumber": 26
        },
        {
            "charLength": 4,
            "startLineNumber": 1004,
            "startColumnNumber": 12,
            "endLineNumber": 1004,
            "endColumnNumber": 16
        },
        {
            "charLength": 4,
            "startLineNumber": 1005,
            "startColumnNumber": 12,
            "endLineNumber": 1005,
            "endColumnNumber": 16
        },
        {
            "charLength": 4,
            "startLineNumber": 1006,
            "startColumnNumber": 12,
            "endLineNumber": 1006,
            "endColumnNumber": 16
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        }
    ]
}