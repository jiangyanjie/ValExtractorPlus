{
    "id": 1717,
    "expression": "sessionContext.getSecurityProvider()",
    "projectName": "jackrabbit-oak",
    "commitID": "aca6ac3d2b75559b899c335ecfd4661f2fce5959",
    "filePath": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/xml/ImporterImpl.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "sessionContext.getSecurityProvider()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 36,
                "startLineNumber": 178,
                "startColumnNumber": 126,
                "endLineNumber": 178,
                "endColumnNumber": 162
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 178,
                        "startColumnNumber": 16,
                        "endLineNumber": 178,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 178,
                        "startColumnNumber": 12,
                        "endLineNumber": 180,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n  pItemImporters.add(importer);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 334,
                        "startLineNumber": 176,
                        "startColumnNumber": 90,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 416,
                        "startLineNumber": 176,
                        "startColumnNumber": 8,
                        "endLineNumber": 181,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n  if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n    pItemImporters.add(importer);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 178,
                    "startColumnNumber": 16,
                    "endLineNumber": 178,
                    "endColumnNumber": 163
                },
                "nodeContext": "importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "org.apache.jackrabbit.oak.spi.security.SecurityProvider"
        }
    ],
    "positionList": [
        {
            "charLength": 36,
            "startLineNumber": 178,
            "startColumnNumber": 126,
            "endLineNumber": 178,
            "endColumnNumber": 162
        }
    ],
    "layoutRelationDataList": []
}