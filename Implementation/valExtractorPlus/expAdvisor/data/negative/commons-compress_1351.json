{
    "id": 1351,
    "expression": "linkArray",
    "projectName": "commons-compress",
    "commitID": "1470c26cadbbfe6a7150f862766eaa30937fbd2b",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 293,
                "startColumnNumber": 12,
                "endLineNumber": 293,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 293,
                        "startColumnNumber": 12,
                        "endLineNumber": 293,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "linkArray.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 293,
                        "startColumnNumber": 12,
                        "endLineNumber": 293,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "linkArray.length == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 293,
                    "startColumnNumber": 12,
                    "endLineNumber": 293,
                    "endColumnNumber": 33
                },
                "nodeContext": "linkArray.length == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 295,
                "startColumnNumber": 19,
                "endLineNumber": 295,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 295,
                        "startColumnNumber": 19,
                        "endLineNumber": 295,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "linkArray.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 295,
                        "startColumnNumber": 19,
                        "endLineNumber": 295,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "linkArray.length > tmp.length - 10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 295,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 295,
                    "startColumnNumber": 19,
                    "endLineNumber": 295,
                    "endColumnNumber": 53
                },
                "nodeContext": "linkArray.length > tmp.length - 10",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 296,
                "startColumnNumber": 70,
                "endLineNumber": 296,
                "endColumnNumber": 79
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 296,
                        "startColumnNumber": 70,
                        "endLineNumber": 296,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "linkArray.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 296,
                        "startColumnNumber": 35,
                        "endLineNumber": 297,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 296,
                        "startColumnNumber": 18,
                        "endLineNumber": 297,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 117,
                        "startLineNumber": 296,
                        "startColumnNumber": 12,
                        "endLineNumber": 297,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 295,
                        "startColumnNumber": 55,
                        "endLineNumber": 298,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 295,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 296,
                    "startColumnNumber": 70,
                    "endLineNumber": 296,
                    "endColumnNumber": 86
                },
                "nodeContext": "linkArray.length",
                "nodeType": "QualifiedName",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 299,
                "startColumnNumber": 38,
                "endLineNumber": 299,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 299,
                        "startColumnNumber": 12,
                        "endLineNumber": 299,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 299,
                        "startColumnNumber": 12,
                        "endLineNumber": 299,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 171,
                        "startLineNumber": 298,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 295,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 299,
                    "startColumnNumber": 12,
                    "endLineNumber": 299,
                    "endColumnNumber": 70
                },
                "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 299,
                "startColumnNumber": 52,
                "endLineNumber": 299,
                "endColumnNumber": 61
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 299,
                        "startColumnNumber": 52,
                        "endLineNumber": 299,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "linkArray.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 299,
                        "startColumnNumber": 12,
                        "endLineNumber": 299,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 299,
                        "startColumnNumber": 12,
                        "endLineNumber": 299,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 171,
                        "startLineNumber": 298,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 295,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 299,
                    "startColumnNumber": 12,
                    "endLineNumber": 299,
                    "endColumnNumber": 70
                },
                "nodeContext": "System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "linkArray",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 300,
                "startColumnNumber": 30,
                "endLineNumber": 300,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 300,
                        "startColumnNumber": 19,
                        "endLineNumber": 300,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "new String(linkArray)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 300,
                        "startColumnNumber": 12,
                        "endLineNumber": 300,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "link=new String(linkArray)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 300,
                        "startColumnNumber": 12,
                        "endLineNumber": 300,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "link=new String(linkArray);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 171,
                        "startLineNumber": 298,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 295,
                        "startColumnNumber": 15,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 293,
                        "startColumnNumber": 8,
                        "endLineNumber": 301,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1611,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2016,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 305,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  if (length < WORD) {\n    throw new ZipException(\"The length is too short, only \" + length + \" bytes, expected at least \"+ WORD);\n  }\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 220,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 300,
                    "startColumnNumber": 12,
                    "endLineNumber": 300,
                    "endColumnNumber": 41
                },
                "nodeContext": "link=new String(linkArray);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "byte[]"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 293,
            "startColumnNumber": 12,
            "endLineNumber": 293,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 295,
            "startColumnNumber": 19,
            "endLineNumber": 295,
            "endColumnNumber": 28
        },
        {
            "charLength": 9,
            "startLineNumber": 296,
            "startColumnNumber": 70,
            "endLineNumber": 296,
            "endColumnNumber": 79
        },
        {
            "charLength": 9,
            "startLineNumber": 299,
            "startColumnNumber": 38,
            "endLineNumber": 299,
            "endColumnNumber": 47
        },
        {
            "charLength": 9,
            "startLineNumber": 299,
            "startColumnNumber": 52,
            "endLineNumber": 299,
            "endColumnNumber": 61
        },
        {
            "charLength": 9,
            "startLineNumber": 300,
            "startColumnNumber": 30,
            "endLineNumber": 300,
            "endColumnNumber": 39
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 0
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        }
    ]
}