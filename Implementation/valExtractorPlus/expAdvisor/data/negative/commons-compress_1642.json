{
    "id": 1642,
    "expression": "0",
    "projectName": "commons-compress",
    "commitID": "6383b06ebe04efe06d20888c00eeeebe27782fc3",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 269,
                "startColumnNumber": 17,
                "endLineNumber": 269,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 269,
                        "startColumnNumber": 12,
                        "endLineNumber": 269,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "n <= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 269,
                        "startColumnNumber": 12,
                        "endLineNumber": 269,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "n <= 0 || isDirectory()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 269,
                        "startColumnNumber": 8,
                        "endLineNumber": 271,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (n <= 0 || isDirectory()) {\n  return 0;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 467,
                        "startLineNumber": 268,
                        "startColumnNumber": 54,
                        "endLineNumber": 283,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (n <= 0 || isDirectory()) {\n    return 0;\n  }\n  final long available=currEntry.getRealSize() - entryOffset;\n  final long skipped;\n  if (!currEntry.isSparse()) {\n    skipped=IOUtils.skip(inputStream,Math.min(n,available));\n  }\n else {\n    skipped=skipSparse(Math.min(n,available));\n  }\n  count(skipped);\n  entryOffset+=skipped;\n  return skipped;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1306,
                        "startLineNumber": 251,
                        "startColumnNumber": 4,
                        "endLineNumber": 283,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Skips over and discards <code>n</code> bytes of data from this input stream. The <code>skip</code> method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly <code>0</code>. This may result from any of a number of conditions; reaching end of file or end of entry before <code>n</code> bytes have been skipped; are only two possibilities. The actual number of bytes skipped is returned. If <code>n</code> is negative, no bytes are skipped.\n * @param n the number of bytes to be skipped.\n * @return the actual number of bytes skipped.\n * @throws IOException if some other I/O error occurs.\n */\n@Override public long skip(final long n) throws IOException {\n  if (n <= 0 || isDirectory()) {\n    return 0;\n  }\n  final long available=currEntry.getRealSize() - entryOffset;\n  final long skipped;\n  if (!currEntry.isSparse()) {\n    skipped=IOUtils.skip(inputStream,Math.min(n,available));\n  }\n else {\n    skipped=skipSparse(Math.min(n,available));\n  }\n  count(skipped);\n  entryOffset+=skipped;\n  return skipped;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 78,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 269,
                    "startColumnNumber": 12,
                    "endLineNumber": 269,
                    "endColumnNumber": 35
                },
                "nodeContext": "n <= 0 || isDirectory()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 270,
                "startColumnNumber": 19,
                "endLineNumber": 270,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 270,
                        "startColumnNumber": 12,
                        "endLineNumber": 270,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "return 0;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 269,
                        "startColumnNumber": 37,
                        "endLineNumber": 271,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  return 0;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 3,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 269,
                        "startColumnNumber": 8,
                        "endLineNumber": 271,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (n <= 0 || isDirectory()) {\n  return 0;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 467,
                        "startLineNumber": 268,
                        "startColumnNumber": 54,
                        "endLineNumber": 283,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (n <= 0 || isDirectory()) {\n    return 0;\n  }\n  final long available=currEntry.getRealSize() - entryOffset;\n  final long skipped;\n  if (!currEntry.isSparse()) {\n    skipped=IOUtils.skip(inputStream,Math.min(n,available));\n  }\n else {\n    skipped=skipSparse(Math.min(n,available));\n  }\n  count(skipped);\n  entryOffset+=skipped;\n  return skipped;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1306,
                        "startLineNumber": 251,
                        "startColumnNumber": 4,
                        "endLineNumber": 283,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Skips over and discards <code>n</code> bytes of data from this input stream. The <code>skip</code> method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly <code>0</code>. This may result from any of a number of conditions; reaching end of file or end of entry before <code>n</code> bytes have been skipped; are only two possibilities. The actual number of bytes skipped is returned. If <code>n</code> is negative, no bytes are skipped.\n * @param n the number of bytes to be skipped.\n * @return the actual number of bytes skipped.\n * @throws IOException if some other I/O error occurs.\n */\n@Override public long skip(final long n) throws IOException {\n  if (n <= 0 || isDirectory()) {\n    return 0;\n  }\n  final long available=currEntry.getRealSize() - entryOffset;\n  final long skipped;\n  if (!currEntry.isSparse()) {\n    skipped=IOUtils.skip(inputStream,Math.min(n,available));\n  }\n else {\n    skipped=skipSparse(Math.min(n,available));\n  }\n  count(skipped);\n  entryOffset+=skipped;\n  return skipped;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 78,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 270,
                    "startColumnNumber": 12,
                    "endLineNumber": 270,
                    "endColumnNumber": 21
                },
                "nodeContext": "return 0;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 269,
            "startColumnNumber": 17,
            "endLineNumber": 269,
            "endColumnNumber": 18
        },
        {
            "charLength": 1,
            "startLineNumber": 270,
            "startColumnNumber": 19,
            "endLineNumber": 270,
            "endColumnNumber": 20
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        }
    ]
}