{
    "id": 858,
    "expression": "last.getOffset() + last.getNumbytes() > getRealSize()",
    "projectName": "commons-compress",
    "commitID": "a3b3b82506426708a7048405c2b77c1ebfdbf361",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "last.getOffset() + last.getNumbytes() > getRealSize()",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 53,
                "startLineNumber": 966,
                "startColumnNumber": 16,
                "endLineNumber": 966,
                "endColumnNumber": 69
            },
            "astNodeNumber": 10,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 966,
                        "startColumnNumber": 12,
                        "endLineNumber": 968,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n  throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 322,
                        "startLineNumber": 964,
                        "startColumnNumber": 43,
                        "endLineNumber": 969,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n  if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n    throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 32,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 357,
                        "startLineNumber": 964,
                        "startColumnNumber": 8,
                        "endLineNumber": 969,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!orderedAndFiltered.isEmpty()) {\n  final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n  if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n    throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 37,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1580,
                        "startLineNumber": 941,
                        "startColumnNumber": 85,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1984,
                        "startLineNumber": 934,
                        "startColumnNumber": 4,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Get this entry's sparse headers ordered by offset with all empty sparse sections at the start filtered out.\n * @return immutable list of this entry's sparse headers, never null\n * @since 1.21\n * @throws IOException if the list of sparse headers contains blocks that overlap\n */\npublic List<TarArchiveStructSparse> getOrderedSparseHeaders() throws IOException {\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 185,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 192,
                    "startLineNumber": 966,
                    "startColumnNumber": 12,
                    "endLineNumber": 968,
                    "endColumnNumber": 13
                },
                "nodeContext": "if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n  throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n}\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 7,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 53,
            "startLineNumber": 966,
            "startColumnNumber": 16,
            "endLineNumber": 966,
            "endColumnNumber": 69
        }
    ],
    "layoutRelationDataList": []
}