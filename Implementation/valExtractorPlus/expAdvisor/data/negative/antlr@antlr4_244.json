{
    "id": 244,
    "expression": "\"..\"",
    "projectName": "antlr@antlr4",
    "commitID": "df62fba4b053f0255b80e4b06f904d31c658fb6a",
    "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "\"..\"",
            "nodeType": "StringLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 606,
                "startColumnNumber": 19,
                "endLineNumber": 606,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 606,
                        "startColumnNumber": 9,
                        "endLineNumber": 606,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "sb.append(\"..\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 606,
                        "startColumnNumber": 9,
                        "endLineNumber": 606,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "sb.append(\"..\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 604,
                        "startColumnNumber": 39,
                        "endLineNumber": 608,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  sb.append(((RangeAST)child).getChild(0).getText());\n  sb.append(\"..\");\n  sb.append(((RangeAST)child).getChild(1).getText());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 276,
                        "startLineNumber": 604,
                        "startColumnNumber": 8,
                        "endLineNumber": 611,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (child instanceof RangeAST) {\n  sb.append(((RangeAST)child).getChild(0).getText());\n  sb.append(\"..\");\n  sb.append(((RangeAST)child).getChild(1).getText());\n}\n else {\n  sb.append(((GrammarAST)child).getText());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 324,
                        "startLineNumber": 603,
                        "startColumnNumber": 50,
                        "endLineNumber": 613,
                        "endColumnNumber": 8
                    },
                    "nodeContext": "{\n  if (child instanceof RangeAST) {\n    sb.append(((RangeAST)child).getChild(0).getText());\n    sb.append(\"..\");\n    sb.append(((RangeAST)child).getChild(1).getText());\n  }\n else {\n    sb.append(((GrammarAST)child).getText());\n  }\n  sb.append(\" | \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 57,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 367,
                        "startLineNumber": 603,
                        "startColumnNumber": 7,
                        "endLineNumber": 613,
                        "endColumnNumber": 8
                    },
                    "nodeContext": "for (Object child : rootAst.getChildren()) {\n  if (child instanceof RangeAST) {\n    sb.append(((RangeAST)child).getChild(0).getText());\n    sb.append(\"..\");\n    sb.append(((RangeAST)child).getChild(1).getText());\n  }\n else {\n    sb.append(((GrammarAST)child).getText());\n  }\n  sb.append(\" | \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 65,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 521,
                        "startLineNumber": 601,
                        "startColumnNumber": 11,
                        "endLineNumber": 616,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  StringBuilder sb=new StringBuilder();\n  for (  Object child : rootAst.getChildren()) {\n    if (child instanceof RangeAST) {\n      sb.append(((RangeAST)child).getChild(0).getText());\n      sb.append(\"..\");\n      sb.append(((RangeAST)child).getChild(1).getText());\n    }\n else {\n      sb.append(((GrammarAST)child).getText());\n    }\n    sb.append(\" | \");\n  }\n  sb.replace(sb.length() - 3,sb.length(),\"\");\n  setText=sb.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 93,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 616,
                        "startLineNumber": 598,
                        "startColumnNumber": 6,
                        "endLineNumber": 616,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (rootAst.getChildren() == null) {\n  setText=rootAst.getText();\n}\n else {\n  StringBuilder sb=new StringBuilder();\n  for (  Object child : rootAst.getChildren()) {\n    if (child instanceof RangeAST) {\n      sb.append(((RangeAST)child).getChild(0).getText());\n      sb.append(\"..\");\n      sb.append(((RangeAST)child).getChild(1).getText());\n    }\n else {\n      sb.append(((GrammarAST)child).getText());\n    }\n    sb.append(\" | \");\n  }\n  sb.replace(sb.length() - 3,sb.length(),\"\");\n  setText=sb.toString();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 106,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 928,
                        "startLineNumber": 596,
                        "startColumnNumber": 26,
                        "endLineNumber": 622,
                        "endColumnNumber": 6
                    },
                    "nodeContext": "{\n  String setText;\n  if (rootAst.getChildren() == null) {\n    setText=rootAst.getText();\n  }\n else {\n    StringBuilder sb=new StringBuilder();\n    for (    Object child : rootAst.getChildren()) {\n      if (child instanceof RangeAST) {\n        sb.append(((RangeAST)child).getChild(0).getText());\n        sb.append(\"..\");\n        sb.append(((RangeAST)child).getChild(1).getText());\n      }\n else {\n        sb.append(((GrammarAST)child).getText());\n      }\n      sb.append(\" | \");\n    }\n    sb.replace(sb.length() - 3,sb.length(),\"\");\n    setText=sb.toString();\n  }\n  String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n  g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n  charactersCollision=true;\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 596,
                        "startColumnNumber": 5,
                        "endLineNumber": 622,
                        "endColumnNumber": 6
                    },
                    "nodeContext": "if (set.contains(i)) {\n  String setText;\n  if (rootAst.getChildren() == null) {\n    setText=rootAst.getText();\n  }\n else {\n    StringBuilder sb=new StringBuilder();\n    for (    Object child : rootAst.getChildren()) {\n      if (child instanceof RangeAST) {\n        sb.append(((RangeAST)child).getChild(0).getText());\n        sb.append(\"..\");\n        sb.append(((RangeAST)child).getChild(1).getText());\n      }\n else {\n        sb.append(((GrammarAST)child).getText());\n      }\n      sb.append(\" | \");\n    }\n    sb.replace(sb.length() - 3,sb.length(),\"\");\n    setText=sb.toString();\n  }\n  String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n  g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n  charactersCollision=true;\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 164,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 964,
                        "startLineNumber": 595,
                        "startColumnNumber": 33,
                        "endLineNumber": 623,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (set.contains(i)) {\n    String setText;\n    if (rootAst.getChildren() == null) {\n      setText=rootAst.getText();\n    }\n else {\n      StringBuilder sb=new StringBuilder();\n      for (      Object child : rootAst.getChildren()) {\n        if (child instanceof RangeAST) {\n          sb.append(((RangeAST)child).getChild(0).getText());\n          sb.append(\"..\");\n          sb.append(((RangeAST)child).getChild(1).getText());\n        }\n else {\n          sb.append(((GrammarAST)child).getText());\n        }\n        sb.append(\" | \");\n      }\n      sb.replace(sb.length() - 3,sb.length(),\"\");\n      setText=sb.toString();\n    }\n    String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n    g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n    charactersCollision=true;\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 165,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 993,
                        "startLineNumber": 595,
                        "startColumnNumber": 4,
                        "endLineNumber": 623,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "for (int i=a; i <= b; i++) {\n  if (set.contains(i)) {\n    String setText;\n    if (rootAst.getChildren() == null) {\n      setText=rootAst.getText();\n    }\n else {\n      StringBuilder sb=new StringBuilder();\n      for (      Object child : rootAst.getChildren()) {\n        if (child instanceof RangeAST) {\n          sb.append(((RangeAST)child).getChild(0).getText());\n          sb.append(\"..\");\n          sb.append(((RangeAST)child).getChild(1).getText());\n        }\n else {\n          sb.append(((GrammarAST)child).getText());\n        }\n        sb.append(\" | \");\n      }\n      sb.replace(sb.length() - 3,sb.length(),\"\");\n      setText=sb.toString();\n    }\n    String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n    g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n    charactersCollision=true;\n    break;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 176,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1006,
                        "startLineNumber": 594,
                        "startColumnNumber": 29,
                        "endLineNumber": 624,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "{\n  for (int i=a; i <= b; i++) {\n    if (set.contains(i)) {\n      String setText;\n      if (rootAst.getChildren() == null) {\n        setText=rootAst.getText();\n      }\n else {\n        StringBuilder sb=new StringBuilder();\n        for (        Object child : rootAst.getChildren()) {\n          if (child instanceof RangeAST) {\n            sb.append(((RangeAST)child).getChild(0).getText());\n            sb.append(\"..\");\n            sb.append(((RangeAST)child).getChild(1).getText());\n          }\n else {\n            sb.append(((GrammarAST)child).getText());\n          }\n          sb.append(\" | \");\n        }\n        sb.replace(sb.length() - 3,sb.length(),\"\");\n        setText=sb.toString();\n      }\n      String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n      g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n      charactersCollision=true;\n      break;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 177,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1032,
                        "startLineNumber": 594,
                        "startColumnNumber": 3,
                        "endLineNumber": 624,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (!charactersCollision) {\n  for (int i=a; i <= b; i++) {\n    if (set.contains(i)) {\n      String setText;\n      if (rootAst.getChildren() == null) {\n        setText=rootAst.getText();\n      }\n else {\n        StringBuilder sb=new StringBuilder();\n        for (        Object child : rootAst.getChildren()) {\n          if (child instanceof RangeAST) {\n            sb.append(((RangeAST)child).getChild(0).getText());\n            sb.append(\"..\");\n            sb.append(((RangeAST)child).getChild(1).getText());\n          }\n else {\n            sb.append(((GrammarAST)child).getText());\n          }\n          sb.append(\" | \");\n        }\n        sb.replace(sb.length() - 3,sb.length(),\"\");\n        setText=sb.toString();\n      }\n      String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n      g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n      charactersCollision=true;\n      break;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 180,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1256,
                        "startLineNumber": 592,
                        "startColumnNumber": 7,
                        "endLineNumber": 627,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  boolean charactersCollision=previousStatus != null && previousStatus.collision;\n  if (!charactersCollision) {\n    for (int i=a; i <= b; i++) {\n      if (set.contains(i)) {\n        String setText;\n        if (rootAst.getChildren() == null) {\n          setText=rootAst.getText();\n        }\n else {\n          StringBuilder sb=new StringBuilder();\n          for (          Object child : rootAst.getChildren()) {\n            if (child instanceof RangeAST) {\n              sb.append(((RangeAST)child).getChild(0).getText());\n              sb.append(\"..\");\n              sb.append(((RangeAST)child).getChild(1).getText());\n            }\n else {\n              sb.append(((GrammarAST)child).getText());\n            }\n            sb.append(\" | \");\n          }\n          sb.replace(sb.length() - 3,sb.length(),\"\");\n          setText=sb.toString();\n        }\n        String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n        g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n        charactersCollision=true;\n        break;\n      }\n    }\n  }\n  status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n  set.add(a,b);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 208,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1813,
                        "startLineNumber": 581,
                        "startColumnNumber": 2,
                        "endLineNumber": 627,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (caseInsensitive) {\n  status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n  if (charactersData.isSingleRange()) {\n    status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n  }\n else {\n    status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n    status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n  }\n}\n else {\n  boolean charactersCollision=previousStatus != null && previousStatus.collision;\n  if (!charactersCollision) {\n    for (int i=a; i <= b; i++) {\n      if (set.contains(i)) {\n        String setText;\n        if (rootAst.getChildren() == null) {\n          setText=rootAst.getText();\n        }\n else {\n          StringBuilder sb=new StringBuilder();\n          for (          Object child : rootAst.getChildren()) {\n            if (child instanceof RangeAST) {\n              sb.append(((RangeAST)child).getChild(0).getText());\n              sb.append(\"..\");\n              sb.append(((RangeAST)child).getChild(1).getText());\n            }\n else {\n              sb.append(((GrammarAST)child).getText());\n            }\n            sb.append(\" | \");\n          }\n          sb.replace(sb.length() - 3,sb.length(),\"\");\n          setText=sb.toString();\n        }\n        String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n        g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n        charactersCollision=true;\n        break;\n      }\n    }\n  }\n  status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n  set.add(a,b);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 271,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2059,
                        "startLineNumber": 577,
                        "startColumnNumber": 191,
                        "endLineNumber": 629,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  CharactersDataCheckStatus status;\n  RangeBorderCharactersData charactersData=RangeBorderCharactersData.getAndCheckCharactersData(a,b,g,ast,previousStatus == null || !previousStatus.notImpliedCharacters);\n  if (caseInsensitive) {\n    status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n    if (charactersData.isSingleRange()) {\n      status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n    }\n else {\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n    }\n  }\n else {\n    boolean charactersCollision=previousStatus != null && previousStatus.collision;\n    if (!charactersCollision) {\n      for (int i=a; i <= b; i++) {\n        if (set.contains(i)) {\n          String setText;\n          if (rootAst.getChildren() == null) {\n            setText=rootAst.getText();\n          }\n else {\n            StringBuilder sb=new StringBuilder();\n            for (            Object child : rootAst.getChildren()) {\n              if (child instanceof RangeAST) {\n                sb.append(((RangeAST)child).getChild(0).getText());\n                sb.append(\"..\");\n                sb.append(((RangeAST)child).getChild(1).getText());\n              }\n else {\n                sb.append(((GrammarAST)child).getText());\n              }\n              sb.append(\" | \");\n            }\n            sb.replace(sb.length() - 3,sb.length(),\"\");\n            setText=sb.toString();\n          }\n          String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n          g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n          charactersCollision=true;\n          break;\n        }\n      }\n    }\n    status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n    set.add(a,b);\n  }\n  return status;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 299,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2249,
                        "startLineNumber": 577,
                        "startColumnNumber": 1,
                        "endLineNumber": 629,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private CharactersDataCheckStatus checkRangeAndAddToSet(GrammarAST rootAst,GrammarAST ast,IntervalSet set,int a,int b,boolean caseInsensitive,CharactersDataCheckStatus previousStatus){\n  CharactersDataCheckStatus status;\n  RangeBorderCharactersData charactersData=RangeBorderCharactersData.getAndCheckCharactersData(a,b,g,ast,previousStatus == null || !previousStatus.notImpliedCharacters);\n  if (caseInsensitive) {\n    status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n    if (charactersData.isSingleRange()) {\n      status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n    }\n else {\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n    }\n  }\n else {\n    boolean charactersCollision=previousStatus != null && previousStatus.collision;\n    if (!charactersCollision) {\n      for (int i=a; i <= b; i++) {\n        if (set.contains(i)) {\n          String setText;\n          if (rootAst.getChildren() == null) {\n            setText=rootAst.getText();\n          }\n else {\n            StringBuilder sb=new StringBuilder();\n            for (            Object child : rootAst.getChildren()) {\n              if (child instanceof RangeAST) {\n                sb.append(((RangeAST)child).getChild(0).getText());\n                sb.append(\"..\");\n                sb.append(((RangeAST)child).getChild(1).getText());\n              }\n else {\n                sb.append(((GrammarAST)child).getText());\n              }\n              sb.append(\" | \");\n            }\n            sb.replace(sb.length() - 3,sb.length(),\"\");\n            setText=sb.toString();\n          }\n          String charsString=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n          g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),charsString,setText);\n          charactersCollision=true;\n          break;\n        }\n      }\n    }\n    status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n    set.add(a,b);\n  }\n  return status;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 329,
                    "astHeight": 24
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 606,
                    "startColumnNumber": 9,
                    "endLineNumber": 606,
                    "endColumnNumber": 25
                },
                "nodeContext": "sb.append(\"..\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 606,
            "startColumnNumber": 19,
            "endLineNumber": 606,
            "endColumnNumber": 23
        }
    ],
    "layoutRelationDataList": []
}