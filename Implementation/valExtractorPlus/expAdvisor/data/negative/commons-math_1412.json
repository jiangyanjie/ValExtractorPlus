{
    "id": 1412,
    "expression": "new ArrayList<Vertex>()",
    "projectName": "commons-math",
    "commitID": "e5002ce3f6a625bfd52f63fa38279c09178e8354",
    "filePath": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/GrahamScan.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "new ArrayList<Vertex>()",
            "nodeType": "ClassInstanceCreation",
            "nodePosition": {
                "charLength": 23,
                "startLineNumber": 83,
                "startColumnNumber": 49,
                "endLineNumber": 83,
                "endColumnNumber": 72
            },
            "astNodeNumber": 6,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 83,
                        "startColumnNumber": 27,
                        "endLineNumber": 83,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "pointsSortedByAngle=new ArrayList<Vertex>()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 83,
                        "startColumnNumber": 8,
                        "endLineNumber": 83,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "final List<Vertex> pointsSortedByAngle=new ArrayList<Vertex>();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2520,
                        "startLineNumber": 72,
                        "startColumnNumber": 97,
                        "endLineNumber": 137,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  MathUtils.checkNotNull(points);\n  if (points.size() < 3) {\n    return new ConvexHull2D(points,tolerance);\n  }\n  final Vector2D referencePoint=getReferencePoint(points);\n  final List<Vertex> pointsSortedByAngle=new ArrayList<Vertex>();\n  for (  final Vector2D p : points) {\n    pointsSortedByAngle.add(new Vertex(p,getAngleBetweenPoints(p,referencePoint)));\n  }\n  Collections.sort(pointsSortedByAngle,new Comparator<Vertex>(){\n    public int compare(    final Vertex o1,    final Vertex o2){\n      return (int)FastMath.signum(o2.angle - o1.angle);\n    }\n  }\n);\n  final List<Vector2D> hullVertices=new ArrayList<Vector2D>(points.size());\n  final Iterator<Vertex> it=pointsSortedByAngle.iterator();\n  hullVertices.add(it.next().point);\n  hullVertices.add(it.next().point);\n  Vector2D currentPoint=null;\n  while (it.hasNext() || currentPoint != null) {\n    final int size=hullVertices.size();\n    if (size == 1) {\n      hullVertices.add(currentPoint != null ? currentPoint : it.next().point);\n      currentPoint=null;\n      continue;\n    }\n    final Vector2D p1=hullVertices.get(size - 2);\n    final Vector2D p2=hullVertices.get(size - 1);\n    final Line line=new Line(p1,p2,tolerance);\n    if (currentPoint == null) {\n      currentPoint=it.next().point;\n    }\n    final double offset=line.getOffset(currentPoint);\n    if (offset < 0.0) {\n      hullVertices.add(currentPoint);\n      currentPoint=null;\n    }\n else {\n      hullVertices.remove(size - 1);\n    }\n  }\n  return new ConvexHull2D(hullVertices,tolerance);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 71,
                        "startColumnNumber": 4,
                        "endLineNumber": 137,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic ConvexHull2D generate(final Collection<Vector2D> points) throws NullArgumentException {\n  MathUtils.checkNotNull(points);\n  if (points.size() < 3) {\n    return new ConvexHull2D(points,tolerance);\n  }\n  final Vector2D referencePoint=getReferencePoint(points);\n  final List<Vertex> pointsSortedByAngle=new ArrayList<Vertex>();\n  for (  final Vector2D p : points) {\n    pointsSortedByAngle.add(new Vertex(p,getAngleBetweenPoints(p,referencePoint)));\n  }\n  Collections.sort(pointsSortedByAngle,new Comparator<Vertex>(){\n    public int compare(    final Vertex o1,    final Vertex o2){\n      return (int)FastMath.signum(o2.angle - o1.angle);\n    }\n  }\n);\n  final List<Vector2D> hullVertices=new ArrayList<Vector2D>(points.size());\n  final Iterator<Vertex> it=pointsSortedByAngle.iterator();\n  hullVertices.add(it.next().point);\n  hullVertices.add(it.next().point);\n  Vector2D currentPoint=null;\n  while (it.hasNext() || currentPoint != null) {\n    final int size=hullVertices.size();\n    if (size == 1) {\n      hullVertices.add(currentPoint != null ? currentPoint : it.next().point);\n      currentPoint=null;\n      continue;\n    }\n    final Vector2D p1=hullVertices.get(size - 2);\n    final Vector2D p2=hullVertices.get(size - 1);\n    final Line line=new Line(p1,p2,tolerance);\n    if (currentPoint == null) {\n      currentPoint=it.next().point;\n    }\n    final double offset=line.getOffset(currentPoint);\n    if (offset < 0.0) {\n      hullVertices.add(currentPoint);\n      currentPoint=null;\n    }\n else {\n      hullVertices.remove(size - 1);\n    }\n  }\n  return new ConvexHull2D(hullVertices,tolerance);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 300,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 83,
                    "startColumnNumber": 8,
                    "endLineNumber": 83,
                    "endColumnNumber": 73
                },
                "nodeContext": "final List<Vertex> pointsSortedByAngle=new ArrayList<Vertex>();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.hull.GrahamScan.Vertex>"
        }
    ],
    "positionList": [
        {
            "charLength": 23,
            "startLineNumber": 83,
            "startColumnNumber": 49,
            "endLineNumber": 83,
            "endColumnNumber": 72
        }
    ],
    "layoutRelationDataList": []
}