{
    "id": 385,
    "expression": "parsingBehavior.fill(ze,data,start + WORD,length,local)",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "parsingBehavior.fill(ze,data,start + WORD,length,local)",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 59,
                "startLineNumber": 214,
                "startColumnNumber": 45,
                "endLineNumber": 214,
                "endColumnNumber": 104
            },
            "astNodeNumber": 10,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 214,
                        "startColumnNumber": 22,
                        "endLineNumber": 215,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 214,
                        "startColumnNumber": 16,
                        "endLineNumber": 215,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 141,
                        "startLineNumber": 214,
                        "startColumnNumber": 16,
                        "endLineNumber": 215,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 388,
                        "startLineNumber": 211,
                        "startColumnNumber": 16,
                        "endLineNumber": 217,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n  v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n  start+=length + WORD;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 39,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 561,
                        "startLineNumber": 211,
                        "startColumnNumber": 12,
                        "endLineNumber": 219,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n  v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n  start+=length + WORD;\n}\n catch (final InstantiationException|IllegalAccessException ie) {\n  throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 197,
                        "startColumnNumber": 44,
                        "endLineNumber": 220,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final ZipShort headerId=new ZipShort(data,start);\n  final int length=new ZipShort(data,start + 2).getValue();\n  if (start + WORD + length > data.length) {\n    final ZipExtraField field=parsingBehavior.onUnparseableExtraField(data,start,data.length - start,local,length);\n    if (field != null) {\n      v.add(field);\n    }\n    break LOOP;\n  }\n  try {\n    final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n    v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n    start+=length + WORD;\n  }\n catch (  final InstantiationException|IllegalAccessException ie) {\n    throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 129,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
                    "nodePosition": {
                        "charLength": 1279,
                        "startLineNumber": 197,
                        "startColumnNumber": 8,
                        "endLineNumber": 220,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (start <= data.length - WORD) {\n  final ZipShort headerId=new ZipShort(data,start);\n  final int length=new ZipShort(data,start + 2).getValue();\n  if (start + WORD + length > data.length) {\n    final ZipExtraField field=parsingBehavior.onUnparseableExtraField(data,start,data.length - start,local,length);\n    if (field != null) {\n      v.add(field);\n    }\n    break LOOP;\n  }\n  try {\n    final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n    v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n    start+=length + WORD;\n  }\n catch (  final InstantiationException|IllegalAccessException ie) {\n    throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 137,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1294,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 220,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "LOOP: while (start <= data.length - WORD) {\n  final ZipShort headerId=new ZipShort(data,start);\n  final int length=new ZipShort(data,start + 2).getValue();\n  if (start + WORD + length > data.length) {\n    final ZipExtraField field=parsingBehavior.onUnparseableExtraField(data,start,data.length - start,local,length);\n    if (field != null) {\n      v.add(field);\n    }\n    break LOOP;\n  }\n  try {\n    final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n    v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n    start+=length + WORD;\n  }\n catch (  final InstantiationException|IllegalAccessException ie) {\n    throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n  }\n}\n",
                    "nodeType": "LabeledStatement",
                    "astNodeNumber": 139,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1500,
                        "startLineNumber": 193,
                        "startColumnNumber": 28,
                        "endLineNumber": 224,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<ZipExtraField> v=new ArrayList<>();\n  int start=0;\n  LOOP:   while (start <= data.length - WORD) {\n    final ZipShort headerId=new ZipShort(data,start);\n    final int length=new ZipShort(data,start + 2).getValue();\n    if (start + WORD + length > data.length) {\n      final ZipExtraField field=parsingBehavior.onUnparseableExtraField(data,start,data.length - start,local,length);\n      if (field != null) {\n        v.add(field);\n      }\n      break LOOP;\n    }\n    try {\n      final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n      v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n      start+=length + WORD;\n    }\n catch (    final InstantiationException|IllegalAccessException ie) {\n      throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n    }\n  }\n  final ZipExtraField[] result=new ZipExtraField[v.size()];\n  return v.toArray(result);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2113,
                        "startLineNumber": 179,
                        "startColumnNumber": 4,
                        "endLineNumber": 224,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Split the array into ExtraFields and populate them with the given data.\n * @param data an array of bytes\n * @param parsingBehavior controls parsing of extra fields.\n * @param local whether data originates from the local file dataor the central directory\n * @return an array of ExtraFields\n * @throws ZipException on error\n * @since 1.19\n */\npublic static ZipExtraField[] parse(final byte[] data,final boolean local,final ExtraFieldParsingBehavior parsingBehavior) throws ZipException {\n  final List<ZipExtraField> v=new ArrayList<>();\n  int start=0;\n  LOOP:   while (start <= data.length - WORD) {\n    final ZipShort headerId=new ZipShort(data,start);\n    final int length=new ZipShort(data,start + 2).getValue();\n    if (start + WORD + length > data.length) {\n      final ZipExtraField field=parsingBehavior.onUnparseableExtraField(data,start,data.length - start,local,length);\n      if (field != null) {\n        v.add(field);\n      }\n      break LOOP;\n    }\n    try {\n      final ZipExtraField ze=Objects.requireNonNull(parsingBehavior.createExtraField(headerId),\"createExtraField must not return null\");\n      v.add(Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\"));\n      start+=length + WORD;\n    }\n catch (    final InstantiationException|IllegalAccessException ie) {\n      throw (ZipException)new ZipException(ie.getMessage()).initCause(ie);\n    }\n  }\n  final ZipExtraField[] result=new ZipExtraField[v.size()];\n  return v.toArray(result);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 205,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 133,
                    "startLineNumber": 214,
                    "startColumnNumber": 22,
                    "endLineNumber": 215,
                    "endColumnNumber": 48
                },
                "nodeContext": "Objects.requireNonNull(parsingBehavior.fill(ze,data,start + WORD,length,local),\"fill must not return null\")",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 4
            },
            "tokenLength": 9,
            "type": "org.apache.commons.compress.archivers.zip.ZipExtraField"
        }
    ],
    "positionList": [
        {
            "charLength": 59,
            "startLineNumber": 214,
            "startColumnNumber": 45,
            "endLineNumber": 214,
            "endColumnNumber": 104
        }
    ],
    "layoutRelationDataList": []
}