{
    "id": 151,
    "expression": "stringBuffer",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "4f60170081b4d51159c65f38eaef2abd45127d39",
    "filePath": "services/src/main/java/org/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java",
    "occurrences": 14,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 125,
                "startColumnNumber": 16,
                "endLineNumber": 125,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 125,
                        "startColumnNumber": 16,
                        "endLineNumber": 125,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "stringBuffer.append(\"\\n\\n/* Location:              \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 125,
                        "startColumnNumber": 16,
                        "endLineNumber": 125,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "stringBuffer.append(\"\\n\\n/* Location:              \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 125,
                    "startColumnNumber": 16,
                    "endLineNumber": 125,
                    "endColumnNumber": 70
                },
                "nodeContext": "stringBuffer.append(\"\\n\\n/* Location:              \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 126,
                "startColumnNumber": 16,
                "endLineNumber": 126,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 126,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "stringBuffer.append(location)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 126,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "stringBuffer.append(location);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 126,
                    "startColumnNumber": 16,
                    "endLineNumber": 126,
                    "endColumnNumber": 46
                },
                "nodeContext": "stringBuffer.append(location);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 131,
                "startColumnNumber": 20,
                "endLineNumber": 131,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 131,
                        "startColumnNumber": 20,
                        "endLineNumber": 131,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "stringBuffer.append(\"\\n * Java compiler version: \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 131,
                        "startColumnNumber": 20,
                        "endLineNumber": 131,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "stringBuffer.append(\"\\n * Java compiler version: \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 131,
                    "startColumnNumber": 20,
                    "endLineNumber": 131,
                    "endColumnNumber": 72
                },
                "nodeContext": "stringBuffer.append(\"\\n * Java compiler version: \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 134,
                "startColumnNumber": 24,
                "endLineNumber": 134,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 134,
                        "startColumnNumber": 24,
                        "endLineNumber": 134,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "stringBuffer.append(majorVersion - (49 - 5))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 134,
                        "startColumnNumber": 24,
                        "endLineNumber": 134,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "stringBuffer.append(majorVersion - (49 - 5));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 133,
                        "startColumnNumber": 44,
                        "endLineNumber": 135,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  stringBuffer.append(majorVersion - (49 - 5));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 220,
                        "startLineNumber": 133,
                        "startColumnNumber": 20,
                        "endLineNumber": 137,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (majorVersion >= 49) {\n  stringBuffer.append(majorVersion - (49 - 5));\n}\n else {\n  stringBuffer.append(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 134,
                    "startColumnNumber": 24,
                    "endLineNumber": 134,
                    "endColumnNumber": 69
                },
                "nodeContext": "stringBuffer.append(majorVersion - (49 - 5));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 136,
                "startColumnNumber": 24,
                "endLineNumber": 136,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 136,
                        "startColumnNumber": 24,
                        "endLineNumber": 136,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "stringBuffer.append(majorVersion - (45 - 1))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 136,
                        "startColumnNumber": 24,
                        "endLineNumber": 136,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "stringBuffer.append(majorVersion - (45 - 1));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 135,
                        "startColumnNumber": 27,
                        "endLineNumber": 137,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  stringBuffer.append(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 220,
                        "startLineNumber": 133,
                        "startColumnNumber": 20,
                        "endLineNumber": 137,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (majorVersion >= 49) {\n  stringBuffer.append(majorVersion - (49 - 5));\n}\n else {\n  stringBuffer.append(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 136,
                    "startColumnNumber": 24,
                    "endLineNumber": 136,
                    "endColumnNumber": 69
                },
                "nodeContext": "stringBuffer.append(majorVersion - (45 - 1));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 139,
                "startColumnNumber": 20,
                "endLineNumber": 139,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 139,
                        "startColumnNumber": 20,
                        "endLineNumber": 139,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "stringBuffer.append(\" (\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 139,
                        "startColumnNumber": 20,
                        "endLineNumber": 139,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "stringBuffer.append(\" (\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 26,
                    "startLineNumber": 139,
                    "startColumnNumber": 20,
                    "endLineNumber": 139,
                    "endColumnNumber": 46
                },
                "nodeContext": "stringBuffer.append(\" (\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 140,
                "startColumnNumber": 20,
                "endLineNumber": 140,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 140,
                        "startColumnNumber": 20,
                        "endLineNumber": 140,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "stringBuffer.append(majorVersion)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 140,
                        "startColumnNumber": 20,
                        "endLineNumber": 140,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "stringBuffer.append(majorVersion);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 140,
                    "startColumnNumber": 20,
                    "endLineNumber": 140,
                    "endColumnNumber": 54
                },
                "nodeContext": "stringBuffer.append(majorVersion);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 141,
                "startColumnNumber": 20,
                "endLineNumber": 141,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 141,
                        "startColumnNumber": 20,
                        "endLineNumber": 141,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "stringBuffer.append('.')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 141,
                        "startColumnNumber": 20,
                        "endLineNumber": 141,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "stringBuffer.append('.');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 141,
                    "startColumnNumber": 20,
                    "endLineNumber": 141,
                    "endColumnNumber": 45
                },
                "nodeContext": "stringBuffer.append('.');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 142,
                "startColumnNumber": 20,
                "endLineNumber": 142,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 142,
                        "startColumnNumber": 20,
                        "endLineNumber": 142,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "stringBuffer.append(printer.getMinorVersion())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 142,
                        "startColumnNumber": 20,
                        "endLineNumber": 142,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "stringBuffer.append(printer.getMinorVersion());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 142,
                    "startColumnNumber": 20,
                    "endLineNumber": 142,
                    "endColumnNumber": 67
                },
                "nodeContext": "stringBuffer.append(printer.getMinorVersion());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 143,
                "startColumnNumber": 20,
                "endLineNumber": 143,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 143,
                        "startColumnNumber": 20,
                        "endLineNumber": 143,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "stringBuffer.append(')')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 143,
                        "startColumnNumber": 20,
                        "endLineNumber": 143,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "stringBuffer.append(')');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 607,
                        "startLineNumber": 130,
                        "startColumnNumber": 40,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 631,
                        "startLineNumber": 130,
                        "startColumnNumber": 16,
                        "endLineNumber": 144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  stringBuffer.append(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    stringBuffer.append(majorVersion - (49 - 5));\n  }\n else {\n    stringBuffer.append(majorVersion - (45 - 1));\n  }\n  stringBuffer.append(\" (\");\n  stringBuffer.append(majorVersion);\n  stringBuffer.append('.');\n  stringBuffer.append(printer.getMinorVersion());\n  stringBuffer.append(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 143,
                    "startColumnNumber": 20,
                    "endLineNumber": 143,
                    "endColumnNumber": 45
                },
                "nodeContext": "stringBuffer.append(')');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 146,
                "startColumnNumber": 16,
                "endLineNumber": 146,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 146,
                        "startColumnNumber": 16,
                        "endLineNumber": 146,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "stringBuffer.append(\"\\n * JD-Core Version:       \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 146,
                        "startColumnNumber": 16,
                        "endLineNumber": 146,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "stringBuffer.append(\"\\n * JD-Core Version:       \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 146,
                    "startColumnNumber": 16,
                    "endLineNumber": 146,
                    "endColumnNumber": 68
                },
                "nodeContext": "stringBuffer.append(\"\\n * JD-Core Version:       \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 147,
                "startColumnNumber": 16,
                "endLineNumber": 147,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 147,
                        "startColumnNumber": 16,
                        "endLineNumber": 147,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "stringBuffer.append(jdCoreVersion)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 147,
                        "startColumnNumber": 16,
                        "endLineNumber": 147,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "stringBuffer.append(jdCoreVersion);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 147,
                    "startColumnNumber": 16,
                    "endLineNumber": 147,
                    "endColumnNumber": 51
                },
                "nodeContext": "stringBuffer.append(jdCoreVersion);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 148,
                "startColumnNumber": 16,
                "endLineNumber": 148,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 148,
                        "startColumnNumber": 16,
                        "endLineNumber": 148,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "stringBuffer.append(\"\\n */\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 148,
                        "startColumnNumber": 16,
                        "endLineNumber": 148,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "stringBuffer.append(\"\\n */\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1379,
                        "startLineNumber": 119,
                        "startColumnNumber": 71,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 113,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1438,
                        "startLineNumber": 119,
                        "startColumnNumber": 12,
                        "endLineNumber": 149,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  stringBuffer.append(\"\\n\\n/* Location:              \");\n  stringBuffer.append(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    stringBuffer.append(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      stringBuffer.append(majorVersion - (49 - 5));\n    }\n else {\n      stringBuffer.append(majorVersion - (45 - 1));\n    }\n    stringBuffer.append(\" (\");\n    stringBuffer.append(majorVersion);\n    stringBuffer.append('.');\n    stringBuffer.append(printer.getMinorVersion());\n    stringBuffer.append(')');\n  }\n  stringBuffer.append(\"\\n * JD-Core Version:       \");\n  stringBuffer.append(jdCoreVersion);\n  stringBuffer.append(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 119,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 148,
                    "startColumnNumber": 16,
                    "endLineNumber": 148,
                    "endColumnNumber": 45
                },
                "nodeContext": "stringBuffer.append(\"\\n */\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        },
        {
            "nodeContext": "stringBuffer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 152,
                "startColumnNumber": 25,
                "endLineNumber": 152,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 152,
                        "startColumnNumber": 25,
                        "endLineNumber": 152,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "stringBuffer.toString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 152,
                        "startColumnNumber": 16,
                        "endLineNumber": 152,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "ps.print(stringBuffer.toString())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 152,
                        "startColumnNumber": 16,
                        "endLineNumber": 152,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "ps.print(stringBuffer.toString());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 151,
                        "startColumnNumber": 120,
                        "endLineNumber": 153,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  ps.print(stringBuffer.toString());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 273,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 155,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n  ps.print(stringBuffer.toString());\n}\n catch (IOException e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 37,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 3208,
                        "startLineNumber": 86,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 296,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 152,
                    "startColumnNumber": 16,
                    "endLineNumber": 152,
                    "endColumnNumber": 50
                },
                "nodeContext": "ps.print(stringBuffer.toString());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.StringBuilder"
        }
    ],
    "positionList": [
        {
            "charLength": 12,
            "startLineNumber": 125,
            "startColumnNumber": 16,
            "endLineNumber": 125,
            "endColumnNumber": 28
        },
        {
            "charLength": 12,
            "startLineNumber": 126,
            "startColumnNumber": 16,
            "endLineNumber": 126,
            "endColumnNumber": 28
        },
        {
            "charLength": 12,
            "startLineNumber": 131,
            "startColumnNumber": 20,
            "endLineNumber": 131,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 134,
            "startColumnNumber": 24,
            "endLineNumber": 134,
            "endColumnNumber": 36
        },
        {
            "charLength": 12,
            "startLineNumber": 136,
            "startColumnNumber": 24,
            "endLineNumber": 136,
            "endColumnNumber": 36
        },
        {
            "charLength": 12,
            "startLineNumber": 139,
            "startColumnNumber": 20,
            "endLineNumber": 139,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 140,
            "startColumnNumber": 20,
            "endLineNumber": 140,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 141,
            "startColumnNumber": 20,
            "endLineNumber": 141,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 142,
            "startColumnNumber": 20,
            "endLineNumber": 142,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 143,
            "startColumnNumber": 20,
            "endLineNumber": 143,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 146,
            "startColumnNumber": 16,
            "endLineNumber": 146,
            "endColumnNumber": 28
        },
        {
            "charLength": 12,
            "startLineNumber": 147,
            "startColumnNumber": 16,
            "endLineNumber": 147,
            "endColumnNumber": 28
        },
        {
            "charLength": 12,
            "startLineNumber": 148,
            "startColumnNumber": 16,
            "endLineNumber": 148,
            "endColumnNumber": 28
        },
        {
            "charLength": 12,
            "startLineNumber": 152,
            "startColumnNumber": 25,
            "endLineNumber": 152,
            "endColumnNumber": 37
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 5
        }
    ]
}