{
    "id": 461,
    "expression": "new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name))",
    "projectName": "jackrabbit-oak",
    "commitID": "709a2719ed5108b9972cdd0ce55d2e53ad705884",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name))",
            "nodeType": "ClassInstanceCreation",
            "nodePosition": {
                "charLength": 57,
                "startLineNumber": 1097,
                "startColumnNumber": 19,
                "endLineNumber": 1097,
                "endColumnNumber": 76
            },
            "astNodeNumber": 12,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 1097,
                        "startColumnNumber": 12,
                        "endLineNumber": 1097,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 1096,
                        "startColumnNumber": 36,
                        "endLineNumber": 1098,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 117,
                        "startLineNumber": 1096,
                        "startColumnNumber": 8,
                        "endLineNumber": 1098,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (pr.isNullRestriction()) {\n  return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 1097,
                    "startColumnNumber": 12,
                    "endLineNumber": 1097,
                    "endColumnNumber": 77
                },
                "nodeContext": "return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 7,
            "type": "org.apache.jackrabbit.oak.plugins.index.lucene.TermQuery"
        }
    ],
    "positionList": [
        {
            "charLength": 57,
            "startLineNumber": 1097,
            "startColumnNumber": 19,
            "endLineNumber": 1097,
            "endColumnNumber": 76
        }
    ],
    "layoutRelationDataList": []
}