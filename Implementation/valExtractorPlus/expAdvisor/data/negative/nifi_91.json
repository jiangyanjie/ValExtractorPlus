{
    "id": 91,
    "expression": "flowFileId",
    "projectName": "nifi",
    "commitID": "84b2484fd46a0fc883e8b9d380ccef199432db35",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1385,
                "startColumnNumber": 41,
                "endLineNumber": 1385,
                "endColumnNumber": 51
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 1385,
                        "startColumnNumber": 20,
                        "endLineNumber": 1385,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "childrenIds.contains(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 351,
                        "startLineNumber": 1385,
                        "startColumnNumber": 16,
                        "endLineNumber": 1393,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (childrenIds.contains(flowFileId)) {\n  eventBuilder.removeChildFlowFile(flowFile);\n  if (copy == null) {\n    copy=eventBuilder.copy();\n    copy.getChildFlowFileIds().clear();\n  }\n  copy.addChildFlowFile(flowFileId);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 475,
                        "startLineNumber": 1383,
                        "startColumnNumber": 54,
                        "endLineNumber": 1394,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (childrenIds.contains(flowFileId)) {\n    eventBuilder.removeChildFlowFile(flowFile);\n    if (copy == null) {\n      copy=eventBuilder.copy();\n      copy.getChildFlowFileIds().clear();\n    }\n    copy.addChildFlowFile(flowFileId);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 517,
                        "startLineNumber": 1383,
                        "startColumnNumber": 12,
                        "endLineNumber": 1394,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (childrenIds.contains(flowFileId)) {\n    eventBuilder.removeChildFlowFile(flowFile);\n    if (copy == null) {\n      copy=eventBuilder.copy();\n      copy.getChildFlowFileIds().clear();\n    }\n    copy.addChildFlowFile(flowFileId);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 55,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 1385,
                    "startColumnNumber": 20,
                    "endLineNumber": 1385,
                    "endColumnNumber": 52
                },
                "nodeContext": "childrenIds.contains(flowFileId)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1392,
                "startColumnNumber": 42,
                "endLineNumber": 1392,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 1392,
                        "startColumnNumber": 20,
                        "endLineNumber": 1392,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "copy.addChildFlowFile(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 1392,
                        "startColumnNumber": 20,
                        "endLineNumber": 1392,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "copy.addChildFlowFile(flowFileId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 313,
                        "startLineNumber": 1385,
                        "startColumnNumber": 54,
                        "endLineNumber": 1393,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  eventBuilder.removeChildFlowFile(flowFile);\n  if (copy == null) {\n    copy=eventBuilder.copy();\n    copy.getChildFlowFileIds().clear();\n  }\n  copy.addChildFlowFile(flowFileId);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 351,
                        "startLineNumber": 1385,
                        "startColumnNumber": 16,
                        "endLineNumber": 1393,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (childrenIds.contains(flowFileId)) {\n  eventBuilder.removeChildFlowFile(flowFile);\n  if (copy == null) {\n    copy=eventBuilder.copy();\n    copy.getChildFlowFileIds().clear();\n  }\n  copy.addChildFlowFile(flowFileId);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 475,
                        "startLineNumber": 1383,
                        "startColumnNumber": 54,
                        "endLineNumber": 1394,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (childrenIds.contains(flowFileId)) {\n    eventBuilder.removeChildFlowFile(flowFile);\n    if (copy == null) {\n      copy=eventBuilder.copy();\n      copy.getChildFlowFileIds().clear();\n    }\n    copy.addChildFlowFile(flowFileId);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 517,
                        "startLineNumber": 1383,
                        "startColumnNumber": 12,
                        "endLineNumber": 1394,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (childrenIds.contains(flowFileId)) {\n    eventBuilder.removeChildFlowFile(flowFile);\n    if (copy == null) {\n      copy=eventBuilder.copy();\n      copy.getChildFlowFileIds().clear();\n    }\n    copy.addChildFlowFile(flowFileId);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 55,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 1392,
                    "startColumnNumber": 20,
                    "endLineNumber": 1392,
                    "endColumnNumber": 54
                },
                "nodeContext": "copy.addChildFlowFile(flowFileId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1433,
                "startColumnNumber": 40,
                "endLineNumber": 1433,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1433,
                        "startColumnNumber": 16,
                        "endLineNumber": 1433,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "removedFlowFiles.remove(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 1433,
                        "startColumnNumber": 12,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (removedFlowFiles.remove(flowFileId)) {\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 1433,
                    "startColumnNumber": 16,
                    "endLineNumber": 1433,
                    "endColumnNumber": 51
                },
                "nodeContext": "removedFlowFiles.remove(flowFileId)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1434,
                "startColumnNumber": 46,
                "endLineNumber": 1434,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1434,
                        "startColumnNumber": 16,
                        "endLineNumber": 1434,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "newOwner.removedFlowFiles.add(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1434,
                        "startColumnNumber": 16,
                        "endLineNumber": 1434,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "newOwner.removedFlowFiles.add(flowFileId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 261,
                        "startLineNumber": 1433,
                        "startColumnNumber": 53,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 1433,
                        "startColumnNumber": 12,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (removedFlowFiles.remove(flowFileId)) {\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1434,
                    "startColumnNumber": 16,
                    "endLineNumber": 1434,
                    "endColumnNumber": 58
                },
                "nodeContext": "newOwner.removedFlowFiles.add(flowFileId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1442,
                "startColumnNumber": 40,
                "endLineNumber": 1442,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1442,
                        "startColumnNumber": 16,
                        "endLineNumber": 1442,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "createdFlowFiles.remove(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 1442,
                        "startColumnNumber": 12,
                        "endLineNumber": 1444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (createdFlowFiles.remove(flowFileId)) {\n  newOwner.createdFlowFiles.add(flowFileId);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 1442,
                    "startColumnNumber": 16,
                    "endLineNumber": 1442,
                    "endColumnNumber": 51
                },
                "nodeContext": "createdFlowFiles.remove(flowFileId)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "flowFileId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 1443,
                "startColumnNumber": 46,
                "endLineNumber": 1443,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1443,
                        "startColumnNumber": 16,
                        "endLineNumber": 1443,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "newOwner.createdFlowFiles.add(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1443,
                        "startColumnNumber": 16,
                        "endLineNumber": 1443,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "newOwner.createdFlowFiles.add(flowFileId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1442,
                        "startColumnNumber": 53,
                        "endLineNumber": 1444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.createdFlowFiles.add(flowFileId);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 1442,
                        "startColumnNumber": 12,
                        "endLineNumber": 1444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (createdFlowFiles.remove(flowFileId)) {\n  newOwner.createdFlowFiles.add(flowFileId);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1443,
                    "startColumnNumber": 16,
                    "endLineNumber": 1443,
                    "endColumnNumber": 58
                },
                "nodeContext": "newOwner.createdFlowFiles.add(flowFileId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 10,
            "startLineNumber": 1385,
            "startColumnNumber": 41,
            "endLineNumber": 1385,
            "endColumnNumber": 51
        },
        {
            "charLength": 10,
            "startLineNumber": 1392,
            "startColumnNumber": 42,
            "endLineNumber": 1392,
            "endColumnNumber": 52
        },
        {
            "charLength": 10,
            "startLineNumber": 1433,
            "startColumnNumber": 40,
            "endLineNumber": 1433,
            "endColumnNumber": 50
        },
        {
            "charLength": 10,
            "startLineNumber": 1434,
            "startColumnNumber": 46,
            "endLineNumber": 1434,
            "endColumnNumber": 56
        },
        {
            "charLength": 10,
            "startLineNumber": 1442,
            "startColumnNumber": 40,
            "endLineNumber": 1442,
            "endColumnNumber": 50
        },
        {
            "charLength": 10,
            "startLineNumber": 1443,
            "startColumnNumber": 46,
            "endLineNumber": 1443,
            "endColumnNumber": 56
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        }
    ]
}