{
    "id": 106,
    "expression": "newOwner",
    "projectName": "nifi",
    "commitID": "84b2484fd46a0fc883e8b9d380ccef199432db35",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java",
    "occurrences": 18,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1397,
                "startColumnNumber": 16,
                "endLineNumber": 1397,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 1397,
                        "startColumnNumber": 16,
                        "endLineNumber": 1397,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "newOwner.forkEventBuilders",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1397,
                        "startColumnNumber": 16,
                        "endLineNumber": 1397,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1397,
                        "startColumnNumber": 16,
                        "endLineNumber": 1397,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 1396,
                        "startColumnNumber": 30,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 162,
                        "startLineNumber": 1396,
                        "startColumnNumber": 12,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (copy != null) {\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 1397,
                    "startColumnNumber": 16,
                    "endLineNumber": 1397,
                    "endColumnNumber": 68
                },
                "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1404,
                "startColumnNumber": 8,
                "endLineNumber": 1404,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1404,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "newOwner.processingStartTime",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1404,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1404,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 91,
                    "startLineNumber": 1404,
                    "startColumnNumber": 8,
                    "endLineNumber": 1404,
                    "endColumnNumber": 99
                },
                "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1404,
                "startColumnNumber": 48,
                "endLineNumber": 1404,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1404,
                        "startColumnNumber": 48,
                        "endLineNumber": 1404,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "newOwner.processingStartTime",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 1404,
                        "startColumnNumber": 39,
                        "endLineNumber": 1404,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "Math.min(newOwner.processingStartTime,processingStartTime)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1404,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1404,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 91,
                    "startLineNumber": 1404,
                    "startColumnNumber": 8,
                    "endLineNumber": 1404,
                    "endColumnNumber": 99
                },
                "nodeContext": "newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1410,
                "startColumnNumber": 12,
                "endLineNumber": 1410,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1410,
                        "startColumnNumber": 12,
                        "endLineNumber": 1410,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "newOwner.records",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1410,
                        "startColumnNumber": 12,
                        "endLineNumber": 1410,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "newOwner.records.put(flowFileRecord.getId(),repoRecord)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1410,
                        "startColumnNumber": 12,
                        "endLineNumber": 1410,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "newOwner.records.put(flowFileRecord.getId(),repoRecord);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 1410,
                    "startColumnNumber": 12,
                    "endLineNumber": 1410,
                    "endColumnNumber": 69
                },
                "nodeContext": "newOwner.records.put(flowFileRecord.getId(),repoRecord);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1420,
                "startColumnNumber": 16,
                "endLineNumber": 1420,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 1420,
                        "startColumnNumber": 16,
                        "endLineNumber": 1420,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 1420,
                        "startColumnNumber": 16,
                        "endLineNumber": 1420,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 689,
                        "startLineNumber": 1417,
                        "startColumnNumber": 36,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 80,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 1417,
                        "startColumnNumber": 12,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (inputQueue != null) {\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 84,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 94,
                    "startLineNumber": 1420,
                    "startColumnNumber": 16,
                    "endLineNumber": 1420,
                    "endColumnNumber": 110
                },
                "nodeContext": "newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1423,
                "startColumnNumber": 16,
                "endLineNumber": 1423,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 1423,
                        "startColumnNumber": 16,
                        "endLineNumber": 1423,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "newOwner.unacknowledgedFlowFiles",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 1423,
                        "startColumnNumber": 16,
                        "endLineNumber": 1423,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 106,
                        "startLineNumber": 1423,
                        "startColumnNumber": 16,
                        "endLineNumber": 1423,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 1423,
                        "startColumnNumber": 16,
                        "endLineNumber": 1423,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 17,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 689,
                        "startLineNumber": 1417,
                        "startColumnNumber": 36,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 80,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 1417,
                        "startColumnNumber": 12,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (inputQueue != null) {\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 84,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 107,
                    "startLineNumber": 1423,
                    "startColumnNumber": 16,
                    "endLineNumber": 1423,
                    "endColumnNumber": 123
                },
                "nodeContext": "newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 17,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1428,
                "startColumnNumber": 16,
                "endLineNumber": 1428,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1428,
                        "startColumnNumber": 16,
                        "endLineNumber": 1428,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "newOwner.flowFilesIn",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1428,
                        "startColumnNumber": 16,
                        "endLineNumber": 1428,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "newOwner.flowFilesIn++",
                    "nodeType": "PostfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1428,
                        "startColumnNumber": 16,
                        "endLineNumber": 1428,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "newOwner.flowFilesIn++;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 689,
                        "startLineNumber": 1417,
                        "startColumnNumber": 36,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 80,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 1417,
                        "startColumnNumber": 12,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (inputQueue != null) {\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 84,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 1428,
                    "startColumnNumber": 16,
                    "endLineNumber": 1428,
                    "endColumnNumber": 39
                },
                "nodeContext": "newOwner.flowFilesIn++;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1429,
                "startColumnNumber": 16,
                "endLineNumber": 1429,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1429,
                        "startColumnNumber": 16,
                        "endLineNumber": 1429,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "newOwner.contentSizeIn",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 1429,
                        "startColumnNumber": 16,
                        "endLineNumber": 1429,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "newOwner.contentSizeIn+=flowFile.getSize()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 1429,
                        "startColumnNumber": 16,
                        "endLineNumber": 1429,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "newOwner.contentSizeIn+=flowFile.getSize();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 689,
                        "startLineNumber": 1417,
                        "startColumnNumber": 36,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 80,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 1417,
                        "startColumnNumber": 12,
                        "endLineNumber": 1430,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (inputQueue != null) {\n  final String connectionId=inputQueue.getIdentifier();\n  incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n  newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n  unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n  newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n  flowFilesIn--;\n  contentSizeIn-=flowFile.getSize();\n  newOwner.flowFilesIn++;\n  newOwner.contentSizeIn+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 84,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 1429,
                    "startColumnNumber": 16,
                    "endLineNumber": 1429,
                    "endColumnNumber": 61
                },
                "nodeContext": "newOwner.contentSizeIn+=flowFile.getSize();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1434,
                "startColumnNumber": 16,
                "endLineNumber": 1434,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1434,
                        "startColumnNumber": 16,
                        "endLineNumber": 1434,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "newOwner.removedFlowFiles",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1434,
                        "startColumnNumber": 16,
                        "endLineNumber": 1434,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "newOwner.removedFlowFiles.add(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1434,
                        "startColumnNumber": 16,
                        "endLineNumber": 1434,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "newOwner.removedFlowFiles.add(flowFileId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 261,
                        "startLineNumber": 1433,
                        "startColumnNumber": 53,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 1433,
                        "startColumnNumber": 12,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (removedFlowFiles.remove(flowFileId)) {\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1434,
                    "startColumnNumber": 16,
                    "endLineNumber": 1434,
                    "endColumnNumber": 58
                },
                "nodeContext": "newOwner.removedFlowFiles.add(flowFileId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1435,
                "startColumnNumber": 16,
                "endLineNumber": 1435,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 1435,
                        "startColumnNumber": 16,
                        "endLineNumber": 1435,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "newOwner.removedCount",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1435,
                        "startColumnNumber": 16,
                        "endLineNumber": 1435,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "newOwner.removedCount++",
                    "nodeType": "PostfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1435,
                        "startColumnNumber": 16,
                        "endLineNumber": 1435,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "newOwner.removedCount++;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 261,
                        "startLineNumber": 1433,
                        "startColumnNumber": 53,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 1433,
                        "startColumnNumber": 12,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (removedFlowFiles.remove(flowFileId)) {\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1435,
                    "startColumnNumber": 16,
                    "endLineNumber": 1435,
                    "endColumnNumber": 40
                },
                "nodeContext": "newOwner.removedCount++;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1436,
                "startColumnNumber": 16,
                "endLineNumber": 1436,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 1436,
                        "startColumnNumber": 16,
                        "endLineNumber": 1436,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "newOwner.removedBytes",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 1436,
                        "startColumnNumber": 16,
                        "endLineNumber": 1436,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "newOwner.removedBytes+=flowFile.getSize()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 1436,
                        "startColumnNumber": 16,
                        "endLineNumber": 1436,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "newOwner.removedBytes+=flowFile.getSize();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 261,
                        "startLineNumber": 1433,
                        "startColumnNumber": 53,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 1433,
                        "startColumnNumber": 12,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (removedFlowFiles.remove(flowFileId)) {\n  newOwner.removedFlowFiles.add(flowFileId);\n  newOwner.removedCount++;\n  newOwner.removedBytes+=flowFile.getSize();\n  removedCount--;\n  removedBytes-=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 1436,
                    "startColumnNumber": 16,
                    "endLineNumber": 1436,
                    "endColumnNumber": 60
                },
                "nodeContext": "newOwner.removedBytes+=flowFile.getSize();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1443,
                "startColumnNumber": 16,
                "endLineNumber": 1443,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1443,
                        "startColumnNumber": 16,
                        "endLineNumber": 1443,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "newOwner.createdFlowFiles",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1443,
                        "startColumnNumber": 16,
                        "endLineNumber": 1443,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "newOwner.createdFlowFiles.add(flowFileId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1443,
                        "startColumnNumber": 16,
                        "endLineNumber": 1443,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "newOwner.createdFlowFiles.add(flowFileId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1442,
                        "startColumnNumber": 53,
                        "endLineNumber": 1444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.createdFlowFiles.add(flowFileId);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 1442,
                        "startColumnNumber": 12,
                        "endLineNumber": 1444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (createdFlowFiles.remove(flowFileId)) {\n  newOwner.createdFlowFiles.add(flowFileId);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1443,
                    "startColumnNumber": 16,
                    "endLineNumber": 1443,
                    "endColumnNumber": 58
                },
                "nodeContext": "newOwner.createdFlowFiles.add(flowFileId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1450,
                "startColumnNumber": 16,
                "endLineNumber": 1450,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 1450,
                        "startColumnNumber": 16,
                        "endLineNumber": 1450,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "newOwner.flowFilesOut",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1450,
                        "startColumnNumber": 16,
                        "endLineNumber": 1450,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "newOwner.flowFilesOut++",
                    "nodeType": "PostfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1450,
                        "startColumnNumber": 16,
                        "endLineNumber": 1450,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "newOwner.flowFilesOut++;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 206,
                        "startLineNumber": 1446,
                        "startColumnNumber": 62,
                        "endLineNumber": 1452,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  flowFilesOut--;\n  contentSizeOut-=flowFile.getSize();\n  newOwner.flowFilesOut++;\n  newOwner.contentSizeOut+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 1446,
                        "startColumnNumber": 12,
                        "endLineNumber": 1452,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (repoRecord.getTransferRelationship() != null) {\n  flowFilesOut--;\n  contentSizeOut-=flowFile.getSize();\n  newOwner.flowFilesOut++;\n  newOwner.contentSizeOut+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1450,
                    "startColumnNumber": 16,
                    "endLineNumber": 1450,
                    "endColumnNumber": 40
                },
                "nodeContext": "newOwner.flowFilesOut++;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1451,
                "startColumnNumber": 16,
                "endLineNumber": 1451,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1451,
                        "startColumnNumber": 16,
                        "endLineNumber": 1451,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "newOwner.contentSizeOut",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 1451,
                        "startColumnNumber": 16,
                        "endLineNumber": 1451,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "newOwner.contentSizeOut+=flowFile.getSize()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 1451,
                        "startColumnNumber": 16,
                        "endLineNumber": 1451,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "newOwner.contentSizeOut+=flowFile.getSize();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 206,
                        "startLineNumber": 1446,
                        "startColumnNumber": 62,
                        "endLineNumber": 1452,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  flowFilesOut--;\n  contentSizeOut-=flowFile.getSize();\n  newOwner.flowFilesOut++;\n  newOwner.contentSizeOut+=flowFile.getSize();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 1446,
                        "startColumnNumber": 12,
                        "endLineNumber": 1452,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (repoRecord.getTransferRelationship() != null) {\n  flowFilesOut--;\n  contentSizeOut-=flowFile.getSize();\n  newOwner.flowFilesOut++;\n  newOwner.contentSizeOut+=flowFile.getSize();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 1451,
                    "startColumnNumber": 16,
                    "endLineNumber": 1451,
                    "endColumnNumber": 62
                },
                "nodeContext": "newOwner.contentSizeOut+=flowFile.getSize();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1456,
                "startColumnNumber": 16,
                "endLineNumber": 1456,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 1456,
                        "startColumnNumber": 16,
                        "endLineNumber": 1456,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "newOwner.generatedProvenanceEvents",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1456,
                        "startColumnNumber": 16,
                        "endLineNumber": 1456,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "newOwner.generatedProvenanceEvents.put(flowFile,events)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1456,
                        "startColumnNumber": 16,
                        "endLineNumber": 1456,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "newOwner.generatedProvenanceEvents.put(flowFile,events);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 1455,
                        "startColumnNumber": 32,
                        "endLineNumber": 1457,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.generatedProvenanceEvents.put(flowFile,events);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 1455,
                        "startColumnNumber": 12,
                        "endLineNumber": 1457,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (events != null) {\n  newOwner.generatedProvenanceEvents.put(flowFile,events);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 1456,
                    "startColumnNumber": 16,
                    "endLineNumber": 1456,
                    "endColumnNumber": 73
                },
                "nodeContext": "newOwner.generatedProvenanceEvents.put(flowFile,events);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1463,
                "startColumnNumber": 20,
                "endLineNumber": 1463,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 1463,
                        "startColumnNumber": 20,
                        "endLineNumber": 1463,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "newOwner.appendableStreams",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 1463,
                        "startColumnNumber": 20,
                        "endLineNumber": 1463,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "newOwner.appendableStreams.put(currentClaim,appendableStream)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 1463,
                        "startColumnNumber": 20,
                        "endLineNumber": 1463,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "newOwner.appendableStreams.put(currentClaim,appendableStream);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 1462,
                        "startColumnNumber": 46,
                        "endLineNumber": 1464,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  newOwner.appendableStreams.put(currentClaim,appendableStream);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 1462,
                        "startColumnNumber": 16,
                        "endLineNumber": 1464,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (appendableStream != null) {\n  newOwner.appendableStreams.put(currentClaim,appendableStream);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 271,
                        "startLineNumber": 1460,
                        "startColumnNumber": 38,
                        "endLineNumber": 1465,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n  if (appendableStream != null) {\n    newOwner.appendableStreams.put(currentClaim,appendableStream);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 24,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 297,
                        "startLineNumber": 1460,
                        "startColumnNumber": 12,
                        "endLineNumber": 1465,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (currentClaim != null) {\n  final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n  if (appendableStream != null) {\n    newOwner.appendableStreams.put(currentClaim,appendableStream);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 1463,
                    "startColumnNumber": 20,
                    "endLineNumber": 1463,
                    "endColumnNumber": 83
                },
                "nodeContext": "newOwner.appendableStreams.put(currentClaim,appendableStream);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1469,
                "startColumnNumber": 16,
                "endLineNumber": 1469,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1469,
                        "startColumnNumber": 16,
                        "endLineNumber": 1469,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "newOwner.deleteOnCommit",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 1469,
                        "startColumnNumber": 16,
                        "endLineNumber": 1469,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "newOwner.deleteOnCommit.put(flowFile,toDelete)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 1469,
                        "startColumnNumber": 16,
                        "endLineNumber": 1469,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "newOwner.deleteOnCommit.put(flowFile,toDelete);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 1468,
                        "startColumnNumber": 34,
                        "endLineNumber": 1470,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.deleteOnCommit.put(flowFile,toDelete);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 1468,
                        "startColumnNumber": 12,
                        "endLineNumber": 1470,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (toDelete != null) {\n  newOwner.deleteOnCommit.put(flowFile,toDelete);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2999,
                        "startLineNumber": 1406,
                        "startColumnNumber": 50,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 305,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1471,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final FlowFile flowFile : flowFiles) {\n  final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n  final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n  newOwner.records.put(flowFileRecord.getId(),repoRecord);\n  final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n  if (inputQueue != null) {\n    final String connectionId=inputQueue.getIdentifier();\n    incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n    newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n    unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n    newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n    flowFilesIn--;\n    contentSizeIn-=flowFile.getSize();\n    newOwner.flowFilesIn++;\n    newOwner.contentSizeIn+=flowFile.getSize();\n  }\n  final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n  if (removedFlowFiles.remove(flowFileId)) {\n    newOwner.removedFlowFiles.add(flowFileId);\n    newOwner.removedCount++;\n    newOwner.removedBytes+=flowFile.getSize();\n    removedCount--;\n    removedBytes-=flowFile.getSize();\n  }\n  if (createdFlowFiles.remove(flowFileId)) {\n    newOwner.createdFlowFiles.add(flowFileId);\n  }\n  if (repoRecord.getTransferRelationship() != null) {\n    flowFilesOut--;\n    contentSizeOut-=flowFile.getSize();\n    newOwner.flowFilesOut++;\n    newOwner.contentSizeOut+=flowFile.getSize();\n  }\n  final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n  if (events != null) {\n    newOwner.generatedProvenanceEvents.put(flowFile,events);\n  }\n  final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n  if (currentClaim != null) {\n    final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n    if (appendableStream != null) {\n      newOwner.appendableStreams.put(currentClaim,appendableStream);\n    }\n  }\n  final Path toDelete=deleteOnCommit.remove(flowFile);\n  if (toDelete != null) {\n    newOwner.deleteOnCommit.put(flowFile,toDelete);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 312,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 48,
                    "startLineNumber": 1469,
                    "startColumnNumber": 16,
                    "endLineNumber": 1469,
                    "endColumnNumber": 64
                },
                "nodeContext": "newOwner.deleteOnCommit.put(flowFile,toDelete);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        },
        {
            "nodeContext": "newOwner",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 1473,
                "startColumnNumber": 35,
                "endLineNumber": 1473,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 1473,
                        "startColumnNumber": 35,
                        "endLineNumber": 1473,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "newOwner.provenanceReporter",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 1473,
                        "startColumnNumber": 8,
                        "endLineNumber": 1473,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 1473,
                        "startColumnNumber": 8,
                        "endLineNumber": 1473,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 1473,
                    "startColumnNumber": 8,
                    "endLineNumber": 1473,
                    "endColumnNumber": 77
                },
                "nodeContext": "provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.controller.repository.StandardProcessSession"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 1397,
            "startColumnNumber": 16,
            "endLineNumber": 1397,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1404,
            "startColumnNumber": 8,
            "endLineNumber": 1404,
            "endColumnNumber": 16
        },
        {
            "charLength": 8,
            "startLineNumber": 1404,
            "startColumnNumber": 48,
            "endLineNumber": 1404,
            "endColumnNumber": 56
        },
        {
            "charLength": 8,
            "startLineNumber": 1410,
            "startColumnNumber": 12,
            "endLineNumber": 1410,
            "endColumnNumber": 20
        },
        {
            "charLength": 8,
            "startLineNumber": 1420,
            "startColumnNumber": 16,
            "endLineNumber": 1420,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1423,
            "startColumnNumber": 16,
            "endLineNumber": 1423,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1428,
            "startColumnNumber": 16,
            "endLineNumber": 1428,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1429,
            "startColumnNumber": 16,
            "endLineNumber": 1429,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1434,
            "startColumnNumber": 16,
            "endLineNumber": 1434,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1435,
            "startColumnNumber": 16,
            "endLineNumber": 1435,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1436,
            "startColumnNumber": 16,
            "endLineNumber": 1436,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1443,
            "startColumnNumber": 16,
            "endLineNumber": 1443,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1450,
            "startColumnNumber": 16,
            "endLineNumber": 1450,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1451,
            "startColumnNumber": 16,
            "endLineNumber": 1451,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1456,
            "startColumnNumber": 16,
            "endLineNumber": 1456,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1463,
            "startColumnNumber": 20,
            "endLineNumber": 1463,
            "endColumnNumber": 28
        },
        {
            "charLength": 8,
            "startLineNumber": 1469,
            "startColumnNumber": 16,
            "endLineNumber": 1469,
            "endColumnNumber": 24
        },
        {
            "charLength": 8,
            "startLineNumber": 1473,
            "startColumnNumber": 35,
            "endLineNumber": 1473,
            "endColumnNumber": 43
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        }
    ]
}