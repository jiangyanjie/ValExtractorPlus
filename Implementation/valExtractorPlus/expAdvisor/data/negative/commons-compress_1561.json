{
    "id": 1561,
    "expression": "buf",
    "projectName": "commons-compress",
    "commitID": "1470c26cadbbfe6a7150f862766eaa30937fbd2b",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
    "occurrences": 25,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1395,
                "startColumnNumber": 38,
                "endLineNumber": 1395,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1395,
                        "startColumnNumber": 8,
                        "endLineNumber": 1395,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1395,
                        "startColumnNumber": 8,
                        "endLineNumber": 1395,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 1395,
                    "startColumnNumber": 8,
                    "endLineNumber": 1395,
                    "endColumnNumber": 65
                },
                "nodeContext": "System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1400,
                "startColumnNumber": 16,
                "endLineNumber": 1400,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 1399,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 1399,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 151,
                    "startLineNumber": 1399,
                    "startColumnNumber": 8,
                    "endLineNumber": 1400,
                    "endColumnNumber": 48
                },
                "nodeContext": "putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1405,
                "startColumnNumber": 12,
                "endLineNumber": 1405,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1405,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 1404,
                        "startColumnNumber": 8,
                        "endLineNumber": 1405,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 139,
                    "startLineNumber": 1404,
                    "startColumnNumber": 8,
                    "endLineNumber": 1405,
                    "endColumnNumber": 43
                },
                "nodeContext": "putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1406,
                "startColumnNumber": 101,
                "endLineNumber": 1406,
                "endColumnNumber": 104
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1406,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 1406,
                        "startColumnNumber": 8,
                        "endLineNumber": 1406,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 1406,
                    "startColumnNumber": 8,
                    "endLineNumber": 1406,
                    "endColumnNumber": 122
                },
                "nodeContext": "getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1409,
                "startColumnNumber": 28,
                "endLineNumber": 1409,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 1409,
                        "startColumnNumber": 8,
                        "endLineNumber": 1409,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "putShort(zipMethod,buf,CFH_METHOD_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 1409,
                        "startColumnNumber": 8,
                        "endLineNumber": 1409,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 1409,
                    "startColumnNumber": 8,
                    "endLineNumber": 1409,
                    "endColumnNumber": 52
                },
                "nodeContext": "putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1413,
                "startColumnNumber": 58,
                "endLineNumber": 1413,
                "endColumnNumber": 61
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 1413,
                        "startColumnNumber": 8,
                        "endLineNumber": 1413,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 1413,
                        "startColumnNumber": 8,
                        "endLineNumber": 1413,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 1413,
                    "startColumnNumber": 8,
                    "endLineNumber": 1413,
                    "endColumnNumber": 80
                },
                "nodeContext": "ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1418,
                "startColumnNumber": 29,
                "endLineNumber": 1418,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1418,
                        "startColumnNumber": 8,
                        "endLineNumber": 1418,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "putLong(ze.getCrc(),buf,CFH_CRC_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1418,
                        "startColumnNumber": 8,
                        "endLineNumber": 1418,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1418,
                    "startColumnNumber": 8,
                    "endLineNumber": 1418,
                    "endColumnNumber": 50
                },
                "nodeContext": "putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1422,
                "startColumnNumber": 40,
                "endLineNumber": 1422,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 1422,
                        "startColumnNumber": 12,
                        "endLineNumber": 1422,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 1422,
                        "startColumnNumber": 12,
                        "endLineNumber": 1422,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 160,
                        "startLineNumber": 1421,
                        "startColumnNumber": 50,
                        "endLineNumber": 1424,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 465,
                        "startLineNumber": 1419,
                        "startColumnNumber": 8,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n else {\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 52,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 1422,
                    "startColumnNumber": 12,
                    "endLineNumber": 1422,
                    "endColumnNumber": 73
                },
                "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1423,
                "startColumnNumber": 40,
                "endLineNumber": 1423,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 1423,
                        "startColumnNumber": 12,
                        "endLineNumber": 1423,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 1423,
                        "startColumnNumber": 12,
                        "endLineNumber": 1423,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 160,
                        "startLineNumber": 1421,
                        "startColumnNumber": 50,
                        "endLineNumber": 1424,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 465,
                        "startLineNumber": 1419,
                        "startColumnNumber": 8,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n else {\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 52,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 1423,
                    "startColumnNumber": 12,
                    "endLineNumber": 1423,
                    "endColumnNumber": 71
                },
                "nodeContext": "ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1425,
                "startColumnNumber": 44,
                "endLineNumber": 1425,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 1425,
                        "startColumnNumber": 12,
                        "endLineNumber": 1425,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 1425,
                        "startColumnNumber": 12,
                        "endLineNumber": 1425,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 1424,
                        "startColumnNumber": 15,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 465,
                        "startLineNumber": 1419,
                        "startColumnNumber": 8,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n else {\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 52,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 1425,
                    "startColumnNumber": 12,
                    "endLineNumber": 1425,
                    "endColumnNumber": 77
                },
                "nodeContext": "putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1426,
                "startColumnNumber": 34,
                "endLineNumber": 1426,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1426,
                        "startColumnNumber": 12,
                        "endLineNumber": 1426,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 1426,
                        "startColumnNumber": 12,
                        "endLineNumber": 1426,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 1424,
                        "startColumnNumber": 15,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 465,
                        "startLineNumber": 1419,
                        "startColumnNumber": 8,
                        "endLineNumber": 1427,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n  ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n else {\n  putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n  putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 52,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 1426,
                    "startColumnNumber": 12,
                    "endLineNumber": 1426,
                    "endColumnNumber": 65
                },
                "nodeContext": "putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1429,
                "startColumnNumber": 26,
                "endLineNumber": 1429,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 1429,
                        "startColumnNumber": 8,
                        "endLineNumber": 1429,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1429,
                        "startColumnNumber": 8,
                        "endLineNumber": 1429,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 1429,
                    "startColumnNumber": 8,
                    "endLineNumber": 1429,
                    "endColumnNumber": 59
                },
                "nodeContext": "putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1432,
                "startColumnNumber": 31,
                "endLineNumber": 1432,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1432,
                        "startColumnNumber": 8,
                        "endLineNumber": 1432,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 1432,
                        "startColumnNumber": 8,
                        "endLineNumber": 1432,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 1432,
                    "startColumnNumber": 8,
                    "endLineNumber": 1432,
                    "endColumnNumber": 61
                },
                "nodeContext": "putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1434,
                "startColumnNumber": 29,
                "endLineNumber": 1434,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1434,
                        "startColumnNumber": 8,
                        "endLineNumber": 1434,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 1434,
                        "startColumnNumber": 8,
                        "endLineNumber": 1434,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 1434,
                    "startColumnNumber": 8,
                    "endLineNumber": 1434,
                    "endColumnNumber": 61
                },
                "nodeContext": "putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1439,
                "startColumnNumber": 44,
                "endLineNumber": 1439,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1439,
                        "startColumnNumber": 16,
                        "endLineNumber": 1439,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1439,
                        "startColumnNumber": 16,
                        "endLineNumber": 1439,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1438,
                        "startColumnNumber": 95,
                        "endLineNumber": 1440,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 1438,
                        "startColumnNumber": 12,
                        "endLineNumber": 1442,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n  putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n}\n else {\n  putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 309,
                        "startLineNumber": 1437,
                        "startColumnNumber": 23,
                        "endLineNumber": 1443,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 1437,
                        "startColumnNumber": 8,
                        "endLineNumber": 1445,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSplitZip) {\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n else {\n  System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 1439,
                    "startColumnNumber": 16,
                    "endLineNumber": 1439,
                    "endColumnNumber": 73
                },
                "nodeContext": "putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1441,
                "startColumnNumber": 56,
                "endLineNumber": 1441,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 1441,
                        "startColumnNumber": 16,
                        "endLineNumber": 1441,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 1441,
                        "startColumnNumber": 16,
                        "endLineNumber": 1441,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 1440,
                        "startColumnNumber": 19,
                        "endLineNumber": 1442,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 1438,
                        "startColumnNumber": 12,
                        "endLineNumber": 1442,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n  putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n}\n else {\n  putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 309,
                        "startLineNumber": 1437,
                        "startColumnNumber": 23,
                        "endLineNumber": 1443,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 1437,
                        "startColumnNumber": 8,
                        "endLineNumber": 1445,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSplitZip) {\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n else {\n  System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 1441,
                    "startColumnNumber": 16,
                    "endLineNumber": 1441,
                    "endColumnNumber": 85
                },
                "nodeContext": "putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1444,
                "startColumnNumber": 38,
                "endLineNumber": 1444,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 1444,
                        "startColumnNumber": 12,
                        "endLineNumber": 1444,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 1444,
                        "startColumnNumber": 12,
                        "endLineNumber": 1444,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 88,
                        "startLineNumber": 1443,
                        "startColumnNumber": 15,
                        "endLineNumber": 1445,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 1437,
                        "startColumnNumber": 8,
                        "endLineNumber": 1445,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isSplitZip) {\n  if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n    putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n  }\n else {\n    putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n  }\n}\n else {\n  System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 62,
                    "startLineNumber": 1444,
                    "startColumnNumber": 12,
                    "endLineNumber": 1444,
                    "endColumnNumber": 74
                },
                "nodeContext": "System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1448,
                "startColumnNumber": 45,
                "endLineNumber": 1448,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1448,
                        "startColumnNumber": 8,
                        "endLineNumber": 1448,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1448,
                        "startColumnNumber": 8,
                        "endLineNumber": 1448,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 1448,
                    "startColumnNumber": 8,
                    "endLineNumber": 1448,
                    "endColumnNumber": 82
                },
                "nodeContext": "putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1451,
                "startColumnNumber": 44,
                "endLineNumber": 1451,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 1451,
                        "startColumnNumber": 8,
                        "endLineNumber": 1451,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1451,
                        "startColumnNumber": 8,
                        "endLineNumber": 1451,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 1451,
                    "startColumnNumber": 8,
                    "endLineNumber": 1451,
                    "endColumnNumber": 81
                },
                "nodeContext": "putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1455,
                "startColumnNumber": 33,
                "endLineNumber": 1455,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1455,
                        "startColumnNumber": 12,
                        "endLineNumber": 1455,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1455,
                        "startColumnNumber": 12,
                        "endLineNumber": 1455,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 1454,
                        "startColumnNumber": 82,
                        "endLineNumber": 1456,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 1454,
                        "startColumnNumber": 8,
                        "endLineNumber": 1458,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n}\n else {\n  putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 1455,
                    "startColumnNumber": 12,
                    "endLineNumber": 1455,
                    "endColumnNumber": 54
                },
                "nodeContext": "putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1457,
                "startColumnNumber": 65,
                "endLineNumber": 1457,
                "endColumnNumber": 68
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1457,
                        "startColumnNumber": 12,
                        "endLineNumber": 1457,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1457,
                        "startColumnNumber": 12,
                        "endLineNumber": 1457,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 100,
                        "startLineNumber": 1456,
                        "startColumnNumber": 15,
                        "endLineNumber": 1458,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 1454,
                        "startColumnNumber": 8,
                        "endLineNumber": 1458,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n  putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n}\n else {\n  putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 1457,
                    "startColumnNumber": 12,
                    "endLineNumber": 1457,
                    "endColumnNumber": 86
                },
                "nodeContext": "putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1461,
                "startColumnNumber": 59,
                "endLineNumber": 1461,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 1461,
                        "startColumnNumber": 8,
                        "endLineNumber": 1461,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 1461,
                        "startColumnNumber": 8,
                        "endLineNumber": 1461,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 86,
                    "startLineNumber": 1461,
                    "startColumnNumber": 8,
                    "endLineNumber": 1461,
                    "endColumnNumber": 94
                },
                "nodeContext": "System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1464,
                "startColumnNumber": 35,
                "endLineNumber": 1464,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1464,
                        "startColumnNumber": 8,
                        "endLineNumber": 1464,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "System.arraycopy(extra,0,buf,extraStart,extra.length)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 1464,
                        "startColumnNumber": 8,
                        "endLineNumber": 1464,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "System.arraycopy(extra,0,buf,extraStart,extra.length);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 1464,
                    "startColumnNumber": 8,
                    "endLineNumber": 1464,
                    "endColumnNumber": 66
                },
                "nodeContext": "System.arraycopy(extra,0,buf,extraStart,extra.length);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1469,
                "startColumnNumber": 67,
                "endLineNumber": 1469,
                "endColumnNumber": 70
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 1469,
                        "startColumnNumber": 8,
                        "endLineNumber": 1469,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 1469,
                        "startColumnNumber": 8,
                        "endLineNumber": 1469,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 90,
                    "startLineNumber": 1469,
                    "startColumnNumber": 8,
                    "endLineNumber": 1469,
                    "endColumnNumber": 98
                },
                "nodeContext": "System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "byte[]"
        },
        {
            "nodeContext": "buf",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 1470,
                "startColumnNumber": 15,
                "endLineNumber": 1470,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 1470,
                        "startColumnNumber": 8,
                        "endLineNumber": 1470,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "return buf;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4425,
                        "startLineNumber": 1368,
                        "startColumnNumber": 93,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 453,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4914,
                        "startLineNumber": 1359,
                        "startColumnNumber": 4,
                        "endLineNumber": 1471,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes the central file header entry.\n * @param ze the entry to write\n * @param name The encoded name\n * @param entryMetaData meta data for this file\n * @throws IOException on error\n */\nprivate byte[] createCentralFileHeader(final ZipArchiveEntry ze,final ByteBuffer name,final EntryMetaData entryMetaData,final boolean needsZip64Extra) throws IOException {\n  if (isSplitZip) {\n    final int currentSplitSegment=((ZipSplitOutputStream)this.out).getCurrentSplitSegmentIndex();\n    if (numberOfCDInDiskData.get(currentSplitSegment) == null) {\n      numberOfCDInDiskData.put(currentSplitSegment,1);\n    }\n else {\n      final int originalNumberOfCD=numberOfCDInDiskData.get(currentSplitSegment);\n      numberOfCDInDiskData.put(currentSplitSegment,originalNumberOfCD + 1);\n    }\n  }\n  final byte[] extra=ze.getCentralDirectoryExtra();\n  String comm=ze.getComment();\n  if (comm == null) {\n    comm=\"\";\n  }\n  final ByteBuffer commentB=getEntryEncoding(ze).encode(comm);\n  final int nameLen=name.limit() - name.position();\n  final int commentLen=commentB.limit() - commentB.position();\n  final int len=CFH_FILENAME_OFFSET + nameLen + extra.length+ commentLen;\n  final byte[] buf=new byte[len];\n  System.arraycopy(CFH_SIG,0,buf,CFH_SIG_OFFSET,WORD);\n  putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),buf,CFH_VERSION_MADE_BY_OFFSET);\n  final int zipMethod=ze.getMethod();\n  final boolean encodable=zipEncoding.canEncode(ze.getName());\n  putShort(versionNeededToExtract(zipMethod,needsZip64Extra,entryMetaData.usesDataDescriptor),buf,CFH_VERSION_NEEDED_OFFSET);\n  getGeneralPurposeBits(!encodable && fallbackToUTF8,entryMetaData.usesDataDescriptor).encode(buf,CFH_GPB_OFFSET);\n  putShort(zipMethod,buf,CFH_METHOD_OFFSET);\n  ZipUtil.toDosTime(calendarInstance,ze.getTime(),buf,CFH_TIME_OFFSET);\n  putLong(ze.getCrc(),buf,CFH_CRC_OFFSET);\n  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_COMPRESSED_SIZE_OFFSET);\n    ZipLong.ZIP64_MAGIC.putLong(buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n else {\n    putLong(ze.getCompressedSize(),buf,CFH_COMPRESSED_SIZE_OFFSET);\n    putLong(ze.getSize(),buf,CFH_ORIGINAL_SIZE_OFFSET);\n  }\n  putShort(nameLen,buf,CFH_FILENAME_LENGTH_OFFSET);\n  putShort(extra.length,buf,CFH_EXTRA_LENGTH_OFFSET);\n  putShort(commentLen,buf,CFH_COMMENT_LENGTH_OFFSET);\n  if (isSplitZip) {\n    if (ze.getDiskNumberStart() >= ZIP64_MAGIC_SHORT || zip64Mode == Zip64Mode.Always) {\n      putShort(ZIP64_MAGIC_SHORT,buf,CFH_DISK_NUMBER_OFFSET);\n    }\n else {\n      putShort((int)ze.getDiskNumberStart(),buf,CFH_DISK_NUMBER_OFFSET);\n    }\n  }\n else {\n    System.arraycopy(ZERO,0,buf,CFH_DISK_NUMBER_OFFSET,SHORT);\n  }\n  putShort(ze.getInternalAttributes(),buf,CFH_INTERNAL_ATTRIBUTES_OFFSET);\n  putLong(ze.getExternalAttributes(),buf,CFH_EXTERNAL_ATTRIBUTES_OFFSET);\n  if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {\n    putLong(ZIP64_MAGIC,buf,CFH_LFH_OFFSET);\n  }\n else {\n    putLong(Math.min(entryMetaData.offset,ZIP64_MAGIC),buf,CFH_LFH_OFFSET);\n  }\n  System.arraycopy(name.array(),name.arrayOffset(),buf,CFH_FILENAME_OFFSET,nameLen);\n  final int extraStart=CFH_FILENAME_OFFSET + nameLen;\n  System.arraycopy(extra,0,buf,extraStart,extra.length);\n  final int commentStart=extraStart + extra.length;\n  System.arraycopy(commentB.array(),commentB.arrayOffset(),buf,commentStart,commentLen);\n  return buf;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 481,
                    "astHeight": 11
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 1470,
                    "startColumnNumber": 8,
                    "endLineNumber": 1470,
                    "endColumnNumber": 19
                },
                "nodeContext": "return buf;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "byte[]"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 1395,
            "startColumnNumber": 38,
            "endLineNumber": 1395,
            "endColumnNumber": 41
        },
        {
            "charLength": 3,
            "startLineNumber": 1400,
            "startColumnNumber": 16,
            "endLineNumber": 1400,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 1405,
            "startColumnNumber": 12,
            "endLineNumber": 1405,
            "endColumnNumber": 15
        },
        {
            "charLength": 3,
            "startLineNumber": 1406,
            "startColumnNumber": 101,
            "endLineNumber": 1406,
            "endColumnNumber": 104
        },
        {
            "charLength": 3,
            "startLineNumber": 1409,
            "startColumnNumber": 28,
            "endLineNumber": 1409,
            "endColumnNumber": 31
        },
        {
            "charLength": 3,
            "startLineNumber": 1413,
            "startColumnNumber": 58,
            "endLineNumber": 1413,
            "endColumnNumber": 61
        },
        {
            "charLength": 3,
            "startLineNumber": 1418,
            "startColumnNumber": 29,
            "endLineNumber": 1418,
            "endColumnNumber": 32
        },
        {
            "charLength": 3,
            "startLineNumber": 1422,
            "startColumnNumber": 40,
            "endLineNumber": 1422,
            "endColumnNumber": 43
        },
        {
            "charLength": 3,
            "startLineNumber": 1423,
            "startColumnNumber": 40,
            "endLineNumber": 1423,
            "endColumnNumber": 43
        },
        {
            "charLength": 3,
            "startLineNumber": 1425,
            "startColumnNumber": 44,
            "endLineNumber": 1425,
            "endColumnNumber": 47
        },
        {
            "charLength": 3,
            "startLineNumber": 1426,
            "startColumnNumber": 34,
            "endLineNumber": 1426,
            "endColumnNumber": 37
        },
        {
            "charLength": 3,
            "startLineNumber": 1429,
            "startColumnNumber": 26,
            "endLineNumber": 1429,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 1432,
            "startColumnNumber": 31,
            "endLineNumber": 1432,
            "endColumnNumber": 34
        },
        {
            "charLength": 3,
            "startLineNumber": 1434,
            "startColumnNumber": 29,
            "endLineNumber": 1434,
            "endColumnNumber": 32
        },
        {
            "charLength": 3,
            "startLineNumber": 1439,
            "startColumnNumber": 44,
            "endLineNumber": 1439,
            "endColumnNumber": 47
        },
        {
            "charLength": 3,
            "startLineNumber": 1441,
            "startColumnNumber": 56,
            "endLineNumber": 1441,
            "endColumnNumber": 59
        },
        {
            "charLength": 3,
            "startLineNumber": 1444,
            "startColumnNumber": 38,
            "endLineNumber": 1444,
            "endColumnNumber": 41
        },
        {
            "charLength": 3,
            "startLineNumber": 1448,
            "startColumnNumber": 45,
            "endLineNumber": 1448,
            "endColumnNumber": 48
        },
        {
            "charLength": 3,
            "startLineNumber": 1451,
            "startColumnNumber": 44,
            "endLineNumber": 1451,
            "endColumnNumber": 47
        },
        {
            "charLength": 3,
            "startLineNumber": 1455,
            "startColumnNumber": 33,
            "endLineNumber": 1455,
            "endColumnNumber": 36
        },
        {
            "charLength": 3,
            "startLineNumber": 1457,
            "startColumnNumber": 65,
            "endLineNumber": 1457,
            "endColumnNumber": 68
        },
        {
            "charLength": 3,
            "startLineNumber": 1461,
            "startColumnNumber": 59,
            "endLineNumber": 1461,
            "endColumnNumber": 62
        },
        {
            "charLength": 3,
            "startLineNumber": 1464,
            "startColumnNumber": 35,
            "endLineNumber": 1464,
            "endColumnNumber": 38
        },
        {
            "charLength": 3,
            "startLineNumber": 1469,
            "startColumnNumber": 67,
            "endLineNumber": 1469,
            "endColumnNumber": 70
        },
        {
            "charLength": 3,
            "startLineNumber": 1470,
            "startColumnNumber": 15,
            "endLineNumber": 1470,
            "endColumnNumber": 18
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 24,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 13,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 16,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 17,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 18,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 19,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 20,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 21,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 22,
            "layout": 1
        },
        {
            "firstKey": 24,
            "secondKey": 23,
            "layout": 1
        }
    ]
}