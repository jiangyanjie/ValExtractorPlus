{
    "id": 101,
    "expression": "aggregate",
    "projectName": "tinkerpop",
    "commitID": "595cf3b7d880b2bfefa386dabbb1b9c1275fc97f",
    "filePath": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/op/AbstractOpProcessor.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "aggregate",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 132,
                "startColumnNumber": 16,
                "endLineNumber": 132,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 132,
                        "startColumnNumber": 16,
                        "endLineNumber": 132,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "aggregate.size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 132,
                        "startColumnNumber": 16,
                        "endLineNumber": 132,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "aggregate.size() < resultIterationBatchSize",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 132,
                        "startColumnNumber": 16,
                        "endLineNumber": 132,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "aggregate.size() < resultIterationBatchSize && itty.hasNext()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 132,
                        "startColumnNumber": 16,
                        "endLineNumber": 132,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 132,
                        "startColumnNumber": 12,
                        "endLineNumber": 132,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush) aggregate.add(itty.next());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6732,
                        "startLineNumber": 112,
                        "startColumnNumber": 24,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 257,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6748,
                        "startLineNumber": 112,
                        "startColumnNumber": 8,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (hasMore) {\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 259,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8818,
                        "startLineNumber": 75,
                        "startColumnNumber": 124,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 433,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9557,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Provides a generic way of iterating a result set back to the client. Implementers should respect the {@link Settings#serializedResponseTimeout} configuration and break the serialization process ifit begins to take too long to do so, throwing a  {@link java.util.concurrent.TimeoutException} in suchcases.\n * @param context The Gremlin Server {@link Context} object containing settings, request message, etc.\n * @param itty The result to iterator\n * @throws TimeoutException if the time taken to serialize the entire result set exceeds the allowable time.\n */\nprotected void handleIterator(final Context context,final Iterator itty) throws TimeoutException, InterruptedException {\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 452,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 132,
                    "startColumnNumber": 12,
                    "endLineNumber": 132,
                    "endColumnNumber": 121
                },
                "nodeContext": "if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush) aggregate.add(itty.next());\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 20,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.Object>"
        },
        {
            "nodeContext": "aggregate",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 132,
                "startColumnNumber": 94,
                "endLineNumber": 132,
                "endColumnNumber": 103
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 132,
                        "startColumnNumber": 94,
                        "endLineNumber": 132,
                        "endColumnNumber": 120
                    },
                    "nodeContext": "aggregate.add(itty.next())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 132,
                        "startColumnNumber": 94,
                        "endLineNumber": 132,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "aggregate.add(itty.next());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 132,
                        "startColumnNumber": 12,
                        "endLineNumber": 132,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush) aggregate.add(itty.next());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6732,
                        "startLineNumber": 112,
                        "startColumnNumber": 24,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 257,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6748,
                        "startLineNumber": 112,
                        "startColumnNumber": 8,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (hasMore) {\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 259,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8818,
                        "startLineNumber": 75,
                        "startColumnNumber": 124,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 433,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9557,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Provides a generic way of iterating a result set back to the client. Implementers should respect the {@link Settings#serializedResponseTimeout} configuration and break the serialization process ifit begins to take too long to do so, throwing a  {@link java.util.concurrent.TimeoutException} in suchcases.\n * @param context The Gremlin Server {@link Context} object containing settings, request message, etc.\n * @param itty The result to iterator\n * @throws TimeoutException if the time taken to serialize the entire result set exceeds the allowable time.\n */\nprotected void handleIterator(final Context context,final Iterator itty) throws TimeoutException, InterruptedException {\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 452,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 132,
                    "startColumnNumber": 12,
                    "endLineNumber": 132,
                    "endColumnNumber": 121
                },
                "nodeContext": "if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush) aggregate.add(itty.next());\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 20,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.Object>"
        },
        {
            "nodeContext": "aggregate",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 137,
                "startColumnNumber": 34,
                "endLineNumber": 137,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 137,
                        "startColumnNumber": 34,
                        "endLineNumber": 137,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "aggregate.size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 137,
                        "startColumnNumber": 34,
                        "endLineNumber": 137,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "aggregate.size() == resultIterationBatchSize",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 137,
                        "startColumnNumber": 20,
                        "endLineNumber": 137,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "forceFlush || aggregate.size() == resultIterationBatchSize",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 137,
                        "startColumnNumber": 20,
                        "endLineNumber": 137,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3754,
                        "startLineNumber": 137,
                        "startColumnNumber": 16,
                        "endLineNumber": 189,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n  final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n  Frame frame=null;\n  try {\n    frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    if (managedTransactionsForRequest)     attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    break;\n  }\n  try {\n    if (itty.hasNext())     aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n      if (managedTransactionsForRequest)       attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      hasMore=false;\n    }\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    throw ex;\n  }\n  if (!itty.hasNext())   iterateComplete(ctx,msg,itty);\n  ctx.writeAndFlush(frame);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 145,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3786,
                        "startLineNumber": 136,
                        "startColumnNumber": 44,
                        "endLineNumber": 190,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n    final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n    Frame frame=null;\n    try {\n      frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      if (managedTransactionsForRequest)       attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      break;\n    }\n    try {\n      if (itty.hasNext())       aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n        if (managedTransactionsForRequest)         attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        hasMore=false;\n      }\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      throw ex;\n    }\n    if (!itty.hasNext())     iterateComplete(ctx,msg,itty);\n    ctx.writeAndFlush(frame);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4414,
                        "startLineNumber": 136,
                        "startColumnNumber": 12,
                        "endLineNumber": 200,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ctx.channel().isWritable()) {\n  if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n    final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n    Frame frame=null;\n    try {\n      frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      if (managedTransactionsForRequest)       attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      break;\n    }\n    try {\n      if (itty.hasNext())       aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n        if (managedTransactionsForRequest)         attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        hasMore=false;\n      }\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      throw ex;\n    }\n    if (!itty.hasNext())     iterateComplete(ctx,msg,itty);\n    ctx.writeAndFlush(frame);\n  }\n}\n else {\n  if (!warnOnce) {\n    logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n    warnOnce=true;\n  }\n  TimeUnit.MILLISECONDS.sleep(10);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 174,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6732,
                        "startLineNumber": 112,
                        "startColumnNumber": 24,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 257,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6748,
                        "startLineNumber": 112,
                        "startColumnNumber": 8,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (hasMore) {\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 259,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8818,
                        "startLineNumber": 75,
                        "startColumnNumber": 124,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 433,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9557,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Provides a generic way of iterating a result set back to the client. Implementers should respect the {@link Settings#serializedResponseTimeout} configuration and break the serialization process ifit begins to take too long to do so, throwing a  {@link java.util.concurrent.TimeoutException} in suchcases.\n * @param context The Gremlin Server {@link Context} object containing settings, request message, etc.\n * @param itty The result to iterator\n * @throws TimeoutException if the time taken to serialize the entire result set exceeds the allowable time.\n */\nprotected void handleIterator(final Context context,final Iterator itty) throws TimeoutException, InterruptedException {\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 452,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 77,
                    "startLineNumber": 137,
                    "startColumnNumber": 20,
                    "endLineNumber": 137,
                    "endColumnNumber": 97
                },
                "nodeContext": "forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.Object>"
        },
        {
            "nodeContext": "aggregate",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 145,
                "startColumnNumber": 75,
                "endLineNumber": 145,
                "endColumnNumber": 84
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 145,
                        "startColumnNumber": 32,
                        "endLineNumber": 145,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 145,
                        "startColumnNumber": 24,
                        "endLineNumber": 145,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty))",
                    "nodeType": "Assignment",
                    "astNodeNumber": 16,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 145,
                        "startColumnNumber": 24,
                        "endLineNumber": 145,
                        "endColumnNumber": 132
                    },
                    "nodeContext": "frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 144,
                        "startColumnNumber": 24,
                        "endLineNumber": 146,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 778,
                        "startLineNumber": 144,
                        "startColumnNumber": 20,
                        "endLineNumber": 155,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "try {\n  frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n}\n catch (Exception ex) {\n  if (frame != null)   frame.tryRelease();\n  if (managedTransactionsForRequest)   attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n  break;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 46,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3671,
                        "startLineNumber": 137,
                        "startColumnNumber": 99,
                        "endLineNumber": 189,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n  Frame frame=null;\n  try {\n    frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    if (managedTransactionsForRequest)     attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    break;\n  }\n  try {\n    if (itty.hasNext())     aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n      if (managedTransactionsForRequest)       attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      hasMore=false;\n    }\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    throw ex;\n  }\n  if (!itty.hasNext())   iterateComplete(ctx,msg,itty);\n  ctx.writeAndFlush(frame);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 132,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3754,
                        "startLineNumber": 137,
                        "startColumnNumber": 16,
                        "endLineNumber": 189,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n  final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n  Frame frame=null;\n  try {\n    frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    if (managedTransactionsForRequest)     attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    break;\n  }\n  try {\n    if (itty.hasNext())     aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n      if (managedTransactionsForRequest)       attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      hasMore=false;\n    }\n  }\n catch (  Exception ex) {\n    if (frame != null)     frame.tryRelease();\n    throw ex;\n  }\n  if (!itty.hasNext())   iterateComplete(ctx,msg,itty);\n  ctx.writeAndFlush(frame);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 145,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3786,
                        "startLineNumber": 136,
                        "startColumnNumber": 44,
                        "endLineNumber": 190,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n    final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n    Frame frame=null;\n    try {\n      frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      if (managedTransactionsForRequest)       attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      break;\n    }\n    try {\n      if (itty.hasNext())       aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n        if (managedTransactionsForRequest)         attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        hasMore=false;\n      }\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      throw ex;\n    }\n    if (!itty.hasNext())     iterateComplete(ctx,msg,itty);\n    ctx.writeAndFlush(frame);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4414,
                        "startLineNumber": 136,
                        "startColumnNumber": 12,
                        "endLineNumber": 200,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ctx.channel().isWritable()) {\n  if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n    final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n    Frame frame=null;\n    try {\n      frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      if (managedTransactionsForRequest)       attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n      break;\n    }\n    try {\n      if (itty.hasNext())       aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n        if (managedTransactionsForRequest)         attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        hasMore=false;\n      }\n    }\n catch (    Exception ex) {\n      if (frame != null)       frame.tryRelease();\n      throw ex;\n    }\n    if (!itty.hasNext())     iterateComplete(ctx,msg,itty);\n    ctx.writeAndFlush(frame);\n  }\n}\n else {\n  if (!warnOnce) {\n    logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n    warnOnce=true;\n  }\n  TimeUnit.MILLISECONDS.sleep(10);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 174,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 6732,
                        "startLineNumber": 112,
                        "startColumnNumber": 24,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 257,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6748,
                        "startLineNumber": 112,
                        "startColumnNumber": 8,
                        "endLineNumber": 210,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (hasMore) {\n  if (Thread.interrupted())   throw new InterruptedException();\n  final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n  if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)   aggregate.add(itty.next());\n  if (ctx.channel().isWritable()) {\n    if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n      final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n      Frame frame=null;\n      try {\n        frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        if (managedTransactionsForRequest)         attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n        break;\n      }\n      try {\n        if (itty.hasNext())         aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n          if (managedTransactionsForRequest)           attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          hasMore=false;\n        }\n      }\n catch (      Exception ex) {\n        if (frame != null)         frame.tryRelease();\n        throw ex;\n      }\n      if (!itty.hasNext())       iterateComplete(ctx,msg,itty);\n      ctx.writeAndFlush(frame);\n    }\n  }\n else {\n    if (!warnOnce) {\n      logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n      warnOnce=true;\n    }\n    TimeUnit.MILLISECONDS.sleep(10);\n  }\n  stopWatch.split();\n  if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n    final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n    throw new TimeoutException(timeoutMsg.trim());\n  }\n  stopWatch.unsplit();\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 259,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8818,
                        "startLineNumber": 75,
                        "startColumnNumber": 124,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 433,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9557,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 213,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Provides a generic way of iterating a result set back to the client. Implementers should respect the {@link Settings#serializedResponseTimeout} configuration and break the serialization process ifit begins to take too long to do so, throwing a  {@link java.util.concurrent.TimeoutException} in suchcases.\n * @param context The Gremlin Server {@link Context} object containing settings, request message, etc.\n * @param itty The result to iterator\n * @throws TimeoutException if the time taken to serialize the entire result set exceeds the allowable time.\n */\nprotected void handleIterator(final Context context,final Iterator itty) throws TimeoutException, InterruptedException {\n  final ChannelHandlerContext ctx=context.getChannelHandlerContext();\n  final RequestMessage msg=context.getRequestMessage();\n  final Settings settings=context.getSettings();\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  boolean warnOnce=false;\n  final boolean managedTransactionsForRequest=manageTransactions ? true : (Boolean)msg.getArgs().getOrDefault(Tokens.ARGS_MANAGE_TRANSACTION,false);\n  if (!itty.hasNext()) {\n    if (managedTransactionsForRequest)     attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n    ctx.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.NO_CONTENT).create());\n    return;\n  }\n  final StopWatch stopWatch=new StopWatch();\n  stopWatch.start();\n  final int resultIterationBatchSize=(Integer)msg.optionalArgs(Tokens.ARGS_BATCH_SIZE).orElse(settings.resultIterationBatchSize);\n  List<Object> aggregate=new ArrayList<>(resultIterationBatchSize);\n  boolean hasMore=itty.hasNext();\n  while (hasMore) {\n    if (Thread.interrupted())     throw new InterruptedException();\n    final boolean forceFlush=isForceFlushed(ctx,msg,itty);\n    if (aggregate.size() < resultIterationBatchSize && itty.hasNext() && !forceFlush)     aggregate.add(itty.next());\n    if (ctx.channel().isWritable()) {\n      if (forceFlush || aggregate.size() == resultIterationBatchSize || !itty.hasNext()) {\n        final ResponseStatusCode code=itty.hasNext() ? ResponseStatusCode.PARTIAL_CONTENT : ResponseStatusCode.SUCCESS;\n        Frame frame=null;\n        try {\n          frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          if (managedTransactionsForRequest)           attemptRollback(msg,context.getGraphManager(),settings.strictTransactionManagement);\n          break;\n        }\n        try {\n          if (itty.hasNext())           aggregate=new ArrayList<>(resultIterationBatchSize);\n else {\n            if (managedTransactionsForRequest)             attemptCommit(msg,context.getGraphManager(),settings.strictTransactionManagement);\n            hasMore=false;\n          }\n        }\n catch (        Exception ex) {\n          if (frame != null)           frame.tryRelease();\n          throw ex;\n        }\n        if (!itty.hasNext())         iterateComplete(ctx,msg,itty);\n        ctx.writeAndFlush(frame);\n      }\n    }\n else {\n      if (!warnOnce) {\n        logger.warn(\"Pausing response writing as writeBufferHighWaterMark exceeded on {} - writing will continue once client has caught up\",msg);\n        warnOnce=true;\n      }\n      TimeUnit.MILLISECONDS.sleep(10);\n    }\n    stopWatch.split();\n    if (settings.serializedResponseTimeout > 0 && stopWatch.getSplitTime() > settings.serializedResponseTimeout) {\n      final String timeoutMsg=String.format(\"Serialization of the entire response exceeded the 'serializeResponseTimeout' setting %s\",warnOnce ? \"[Gremlin Server paused writes to client as messages were not being consumed quickly enough]\" : \"\");\n      throw new TimeoutException(timeoutMsg.trim());\n    }\n    stopWatch.unsplit();\n  }\n  stopWatch.stop();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 452,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 108,
                    "startLineNumber": 145,
                    "startColumnNumber": 24,
                    "endLineNumber": 145,
                    "endColumnNumber": 132
                },
                "nodeContext": "frame=makeFrame(ctx,msg,serializer,useBinary,aggregate,code,generateMetaData(ctx,msg,code,itty));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 17,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.Object>"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 132,
            "startColumnNumber": 16,
            "endLineNumber": 132,
            "endColumnNumber": 25
        },
        {
            "charLength": 9,
            "startLineNumber": 132,
            "startColumnNumber": 94,
            "endLineNumber": 132,
            "endColumnNumber": 103
        },
        {
            "charLength": 9,
            "startLineNumber": 137,
            "startColumnNumber": 34,
            "endLineNumber": 137,
            "endColumnNumber": 43
        },
        {
            "charLength": 9,
            "startLineNumber": 145,
            "startColumnNumber": 75,
            "endLineNumber": 145,
            "endColumnNumber": 84
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 6
        }
    ]
}