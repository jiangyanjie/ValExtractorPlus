{
    "id": 185,
    "expression": "targetCharValueEscape",
    "projectName": "antlr@antlr4",
    "commitID": "815856bdf0410be1a101630b87247256f373a850",
    "filePath": "tool/src/org/antlr/v4/codegen/target/CppTarget.java",
    "occurrences": 3,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "targetCharValueEscape",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 21,
                "startLineNumber": 180,
                "startColumnNumber": 20,
                "endLineNumber": 180,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 180,
                        "startColumnNumber": 20,
                        "endLineNumber": 180,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "targetCharValueEscape.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 180,
                        "startColumnNumber": 16,
                        "endLineNumber": 180,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "v < targetCharValueEscape.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 180,
                        "startColumnNumber": 6,
                        "endLineNumber": 180,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "v >= 0 && v < targetCharValueEscape.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 180,
                        "startColumnNumber": 6,
                        "endLineNumber": 180,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 180,
                        "startColumnNumber": 2,
                        "endLineNumber": 182,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n  return targetCharValueEscape[v];\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 598,
                        "startLineNumber": 175,
                        "startColumnNumber": 44,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 116,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 652,
                        "startLineNumber": 174,
                        "startColumnNumber": 1,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "@Override public String encodeIntAsCharEscape(int v){\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 126,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 180,
                    "startColumnNumber": 6,
                    "endLineNumber": 180,
                    "endColumnNumber": 84
                },
                "nodeContext": "v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 15,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.String[]"
        },
        {
            "nodeContext": "targetCharValueEscape",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 21,
                "startLineNumber": 180,
                "startColumnNumber": 52,
                "endLineNumber": 180,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 180,
                        "startColumnNumber": 52,
                        "endLineNumber": 180,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "targetCharValueEscape[v]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 180,
                        "startColumnNumber": 52,
                        "endLineNumber": 180,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "targetCharValueEscape[v] != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 180,
                        "startColumnNumber": 6,
                        "endLineNumber": 180,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 180,
                        "startColumnNumber": 2,
                        "endLineNumber": 182,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n  return targetCharValueEscape[v];\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 598,
                        "startLineNumber": 175,
                        "startColumnNumber": 44,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 116,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 652,
                        "startLineNumber": 174,
                        "startColumnNumber": 1,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "@Override public String encodeIntAsCharEscape(int v){\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 126,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 180,
                    "startColumnNumber": 6,
                    "endLineNumber": 180,
                    "endColumnNumber": 84
                },
                "nodeContext": "v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 15,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.String[]"
        },
        {
            "nodeContext": "targetCharValueEscape",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 21,
                "startLineNumber": 181,
                "startColumnNumber": 10,
                "endLineNumber": 181,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 181,
                        "startColumnNumber": 10,
                        "endLineNumber": 181,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "targetCharValueEscape[v]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 181,
                        "startColumnNumber": 3,
                        "endLineNumber": 181,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "return targetCharValueEscape[v];\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 180,
                        "startColumnNumber": 86,
                        "endLineNumber": 182,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  return targetCharValueEscape[v];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 180,
                        "startColumnNumber": 2,
                        "endLineNumber": 182,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n  return targetCharValueEscape[v];\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 598,
                        "startLineNumber": 175,
                        "startColumnNumber": 44,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 116,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 652,
                        "startLineNumber": 174,
                        "startColumnNumber": 1,
                        "endLineNumber": 195,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "@Override public String encodeIntAsCharEscape(int v){\n  if (v < Character.MIN_VALUE || v > Character.MAX_VALUE) {\n    throw new IllegalArgumentException(String.format(\"Cannot encode the specified value: %d\",v));\n  }\n  if (v >= 0 && v < targetCharValueEscape.length && targetCharValueEscape[v] != null) {\n    return targetCharValueEscape[v];\n  }\n  if (v >= 0x20 && v < 127 && (!Character.isDigit(v) || v == '8' || v == '9')) {\n    return String.valueOf((char)v);\n  }\n  if (v >= 0 && v <= 127) {\n    String oct=Integer.toOctalString(v);\n    return \"\\\\\" + oct;\n  }\n  String hex=Integer.toHexString(v | 0x10000).substring(1,5);\n  return \"\\\\u\" + hex;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 126,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 181,
                    "startColumnNumber": 3,
                    "endLineNumber": 181,
                    "endColumnNumber": 35
                },
                "nodeContext": "return targetCharValueEscape[v];\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String[]"
        }
    ],
    "positionList": [
        {
            "charLength": 21,
            "startLineNumber": 180,
            "startColumnNumber": 20,
            "endLineNumber": 180,
            "endColumnNumber": 41
        },
        {
            "charLength": 21,
            "startLineNumber": 180,
            "startColumnNumber": 52,
            "endLineNumber": 180,
            "endColumnNumber": 73
        },
        {
            "charLength": 21,
            "startLineNumber": 181,
            "startColumnNumber": 10,
            "endLineNumber": 181,
            "endColumnNumber": 31
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        }
    ]
}