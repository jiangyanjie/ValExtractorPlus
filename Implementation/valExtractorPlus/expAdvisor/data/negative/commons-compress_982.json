{
    "id": 982,
    "expression": "IOUtils",
    "projectName": "commons-compress",
    "commitID": "8543b030e93fa71b6093ac7d4cdb8c4e98bfd63d",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "IOUtils",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 743,
                "startColumnNumber": 8,
                "endLineNumber": 743,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 743,
                        "startColumnNumber": 8,
                        "endLineNumber": 743,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "IOUtils.readFully(archive,cfhBbuf)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 743,
                        "startColumnNumber": 8,
                        "endLineNumber": 743,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "IOUtils.readFully(archive,cfhBbuf);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 743,
                    "startColumnNumber": 8,
                    "endLineNumber": 743,
                    "endColumnNumber": 44
                },
                "nodeContext": "IOUtils.readFully(archive,cfhBbuf);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.utils.IOUtils"
        },
        {
            "nodeContext": "IOUtils",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 803,
                "startColumnNumber": 8,
                "endLineNumber": 803,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 803,
                        "startColumnNumber": 8,
                        "endLineNumber": 803,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(fileName))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 803,
                        "startColumnNumber": 8,
                        "endLineNumber": 803,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 803,
                    "startColumnNumber": 8,
                    "endLineNumber": 803,
                    "endColumnNumber": 62
                },
                "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.utils.IOUtils"
        },
        {
            "nodeContext": "IOUtils",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 812,
                "startColumnNumber": 8,
                "endLineNumber": 812,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 812,
                        "startColumnNumber": 8,
                        "endLineNumber": 812,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 812,
                        "startColumnNumber": 8,
                        "endLineNumber": 812,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 812,
                    "startColumnNumber": 8,
                    "endLineNumber": 812,
                    "endColumnNumber": 65
                },
                "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.utils.IOUtils"
        },
        {
            "nodeContext": "IOUtils",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 818,
                "startColumnNumber": 8,
                "endLineNumber": 818,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 818,
                        "startColumnNumber": 8,
                        "endLineNumber": 818,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(comment))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 818,
                        "startColumnNumber": 8,
                        "endLineNumber": 818,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 818,
                    "startColumnNumber": 8,
                    "endLineNumber": 818,
                    "endColumnNumber": 61
                },
                "nodeContext": "IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.utils.IOUtils"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 743,
            "startColumnNumber": 8,
            "endLineNumber": 743,
            "endColumnNumber": 15
        },
        {
            "charLength": 7,
            "startLineNumber": 803,
            "startColumnNumber": 8,
            "endLineNumber": 803,
            "endColumnNumber": 15
        },
        {
            "charLength": 7,
            "startLineNumber": 812,
            "startColumnNumber": 8,
            "endLineNumber": 812,
            "endColumnNumber": 15
        },
        {
            "charLength": 7,
            "startLineNumber": 818,
            "startColumnNumber": 8,
            "endLineNumber": 818,
            "endColumnNumber": 15
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        }
    ]
}