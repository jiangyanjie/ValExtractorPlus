{
    "id": 709,
    "expression": "':'",
    "projectName": "jackrabbit-oak",
    "commitID": "e454c2276616af914df61a7787f9f13901d6a54d",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Checkpoints.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "':'",
            "nodeType": "CharacterLiteral",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 210,
                "startColumnNumber": 28,
                "endLineNumber": 210,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 210,
                        "startColumnNumber": 16,
                        "endLineNumber": 210,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "reader.read(':')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 210,
                        "startColumnNumber": 16,
                        "endLineNumber": 210,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "reader.read(':');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 807,
                        "startLineNumber": 201,
                        "startColumnNumber": 38,
                        "endLineNumber": 219,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  map=Maps.newHashMap();\n  JsopReader reader=new JsopTokenizer(info);\n  reader.read('{');\n  String key=reader.readString();\n  if (!EXPIRES.equals(key)) {\n    throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n  }\n  reader.read(':');\n  expiryTime=Long.parseLong(reader.readString());\n  while (reader.matches(',')) {\n    key=reader.readString();\n    reader.read(':');\n    map.put(key,reader.readString());\n  }\n  reader.read('}');\n  reader.read(JsopReader.END);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 95,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 981,
                        "startLineNumber": 201,
                        "startColumnNumber": 12,
                        "endLineNumber": 223,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (info.startsWith(\"{\")) {\n  map=Maps.newHashMap();\n  JsopReader reader=new JsopTokenizer(info);\n  reader.read('{');\n  String key=reader.readString();\n  if (!EXPIRES.equals(key)) {\n    throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n  }\n  reader.read(':');\n  expiryTime=Long.parseLong(reader.readString());\n  while (reader.matches(',')) {\n    key=reader.readString();\n    reader.read(':');\n    map.put(key,reader.readString());\n  }\n  reader.read('}');\n  reader.read(JsopReader.END);\n}\n else {\n  map=Collections.emptyMap();\n  expiryTime=Long.parseLong(info);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 114,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1117,
                        "startLineNumber": 198,
                        "startColumnNumber": 44,
                        "endLineNumber": 225,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  long expiryTime;\n  Map<String,String> map;\n  if (info.startsWith(\"{\")) {\n    map=Maps.newHashMap();\n    JsopReader reader=new JsopTokenizer(info);\n    reader.read('{');\n    String key=reader.readString();\n    if (!EXPIRES.equals(key)) {\n      throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n    }\n    reader.read(':');\n    expiryTime=Long.parseLong(reader.readString());\n    while (reader.matches(',')) {\n      key=reader.readString();\n      reader.read(':');\n      map.put(key,reader.readString());\n    }\n    reader.read('}');\n    reader.read(JsopReader.END);\n  }\n else {\n    map=Collections.emptyMap();\n    expiryTime=Long.parseLong(info);\n  }\n  return new Info(expiryTime,map);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1153,
                        "startLineNumber": 198,
                        "startColumnNumber": 8,
                        "endLineNumber": 225,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Info fromString(String info){\n  long expiryTime;\n  Map<String,String> map;\n  if (info.startsWith(\"{\")) {\n    map=Maps.newHashMap();\n    JsopReader reader=new JsopTokenizer(info);\n    reader.read('{');\n    String key=reader.readString();\n    if (!EXPIRES.equals(key)) {\n      throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n    }\n    reader.read(':');\n    expiryTime=Long.parseLong(reader.readString());\n    while (reader.matches(',')) {\n      key=reader.readString();\n      reader.read(':');\n      map.put(key,reader.readString());\n    }\n    reader.read('}');\n    reader.read(JsopReader.END);\n  }\n else {\n    map=Collections.emptyMap();\n    expiryTime=Long.parseLong(info);\n  }\n  return new Info(expiryTime,map);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 144,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 210,
                    "startColumnNumber": 16,
                    "endLineNumber": 210,
                    "endColumnNumber": 33
                },
                "nodeContext": "reader.read(':');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "char"
        },
        {
            "nodeContext": "':'",
            "nodeType": "CharacterLiteral",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 214,
                "startColumnNumber": 32,
                "endLineNumber": 214,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 214,
                        "startColumnNumber": 20,
                        "endLineNumber": 214,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "reader.read(':')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 214,
                        "startColumnNumber": 20,
                        "endLineNumber": 214,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "reader.read(':');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 159,
                        "startLineNumber": 212,
                        "startColumnNumber": 44,
                        "endLineNumber": 216,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  key=reader.readString();\n  reader.read(':');\n  map.put(key,reader.readString());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 187,
                        "startLineNumber": 212,
                        "startColumnNumber": 16,
                        "endLineNumber": 216,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "while (reader.matches(',')) {\n  key=reader.readString();\n  reader.read(':');\n  map.put(key,reader.readString());\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 807,
                        "startLineNumber": 201,
                        "startColumnNumber": 38,
                        "endLineNumber": 219,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  map=Maps.newHashMap();\n  JsopReader reader=new JsopTokenizer(info);\n  reader.read('{');\n  String key=reader.readString();\n  if (!EXPIRES.equals(key)) {\n    throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n  }\n  reader.read(':');\n  expiryTime=Long.parseLong(reader.readString());\n  while (reader.matches(',')) {\n    key=reader.readString();\n    reader.read(':');\n    map.put(key,reader.readString());\n  }\n  reader.read('}');\n  reader.read(JsopReader.END);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 95,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 981,
                        "startLineNumber": 201,
                        "startColumnNumber": 12,
                        "endLineNumber": 223,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (info.startsWith(\"{\")) {\n  map=Maps.newHashMap();\n  JsopReader reader=new JsopTokenizer(info);\n  reader.read('{');\n  String key=reader.readString();\n  if (!EXPIRES.equals(key)) {\n    throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n  }\n  reader.read(':');\n  expiryTime=Long.parseLong(reader.readString());\n  while (reader.matches(',')) {\n    key=reader.readString();\n    reader.read(':');\n    map.put(key,reader.readString());\n  }\n  reader.read('}');\n  reader.read(JsopReader.END);\n}\n else {\n  map=Collections.emptyMap();\n  expiryTime=Long.parseLong(info);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 114,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1117,
                        "startLineNumber": 198,
                        "startColumnNumber": 44,
                        "endLineNumber": 225,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  long expiryTime;\n  Map<String,String> map;\n  if (info.startsWith(\"{\")) {\n    map=Maps.newHashMap();\n    JsopReader reader=new JsopTokenizer(info);\n    reader.read('{');\n    String key=reader.readString();\n    if (!EXPIRES.equals(key)) {\n      throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n    }\n    reader.read(':');\n    expiryTime=Long.parseLong(reader.readString());\n    while (reader.matches(',')) {\n      key=reader.readString();\n      reader.read(':');\n      map.put(key,reader.readString());\n    }\n    reader.read('}');\n    reader.read(JsopReader.END);\n  }\n else {\n    map=Collections.emptyMap();\n    expiryTime=Long.parseLong(info);\n  }\n  return new Info(expiryTime,map);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1153,
                        "startLineNumber": 198,
                        "startColumnNumber": 8,
                        "endLineNumber": 225,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Info fromString(String info){\n  long expiryTime;\n  Map<String,String> map;\n  if (info.startsWith(\"{\")) {\n    map=Maps.newHashMap();\n    JsopReader reader=new JsopTokenizer(info);\n    reader.read('{');\n    String key=reader.readString();\n    if (!EXPIRES.equals(key)) {\n      throw new IllegalArgumentException(\"First entry in the \" + \"checkpoint info must be the expires date: \" + info);\n    }\n    reader.read(':');\n    expiryTime=Long.parseLong(reader.readString());\n    while (reader.matches(',')) {\n      key=reader.readString();\n      reader.read(':');\n      map.put(key,reader.readString());\n    }\n    reader.read('}');\n    reader.read(JsopReader.END);\n  }\n else {\n    map=Collections.emptyMap();\n    expiryTime=Long.parseLong(info);\n  }\n  return new Info(expiryTime,map);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 144,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 214,
                    "startColumnNumber": 20,
                    "endLineNumber": 214,
                    "endColumnNumber": 37
                },
                "nodeContext": "reader.read(':');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "char"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 210,
            "startColumnNumber": 28,
            "endLineNumber": 210,
            "endColumnNumber": 31
        },
        {
            "charLength": 3,
            "startLineNumber": 214,
            "startColumnNumber": 32,
            "endLineNumber": 214,
            "endColumnNumber": 35
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        }
    ]
}