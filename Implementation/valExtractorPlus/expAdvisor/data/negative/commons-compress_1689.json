{
    "id": 1689,
    "expression": "new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\")",
    "projectName": "commons-compress",
    "commitID": "040e42d0f0bebc15ca80cb80fb6db53804b2e082",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\")",
            "nodeType": "ClassInstanceCreation",
            "nodePosition": {
                "charLength": 191,
                "startLineNumber": 294,
                "startColumnNumber": 22,
                "endLineNumber": 296,
                "endColumnNumber": 78
            },
            "astNodeNumber": 11,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 198,
                        "startLineNumber": 294,
                        "startColumnNumber": 16,
                        "endLineNumber": 296,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 230,
                        "startLineNumber": 293,
                        "startColumnNumber": 58,
                        "endLineNumber": 297,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 293,
                        "startColumnNumber": 19,
                        "endLineNumber": 297,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (longFileMode != LONGFILE_TRUNCATE) {\n  throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 915,
                        "startLineNumber": 282,
                        "startColumnNumber": 19,
                        "endLineNumber": 297,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (longFileMode == LONGFILE_GNU) {\n  TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n  longLinkEntry.setSize(nameLen + 1);\n  putArchiveEntry(longLinkEntry);\n  write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n  write(0);\n  closeArchiveEntry();\n}\n else if (longFileMode != LONGFILE_TRUNCATE) {\n  throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1069,
                        "startLineNumber": 279,
                        "startColumnNumber": 12,
                        "endLineNumber": 297,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (longFileMode == LONGFILE_POSIX) {\n  paxHeaders.put(\"path\",entryName);\n  paxHeaderContainsPath=true;\n}\n else if (longFileMode == LONGFILE_GNU) {\n  TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n  longLinkEntry.setSize(nameLen + 1);\n  putArchiveEntry(longLinkEntry);\n  write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n  write(0);\n  closeArchiveEntry();\n}\n else if (longFileMode != LONGFILE_TRUNCATE) {\n  throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 79,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1094,
                        "startLineNumber": 277,
                        "startColumnNumber": 45,
                        "endLineNumber": 298,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (longFileMode == LONGFILE_POSIX) {\n    paxHeaders.put(\"path\",entryName);\n    paxHeaderContainsPath=true;\n  }\n else   if (longFileMode == LONGFILE_GNU) {\n    TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n    longLinkEntry.setSize(nameLen + 1);\n    putArchiveEntry(longLinkEntry);\n    write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n    write(0);\n    closeArchiveEntry();\n  }\n else   if (longFileMode != LONGFILE_TRUNCATE) {\n    throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 80,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1131,
                        "startLineNumber": 277,
                        "startColumnNumber": 8,
                        "endLineNumber": 298,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (nameLen >= TarConstants.NAMELEN) {\n  if (longFileMode == LONGFILE_POSIX) {\n    paxHeaders.put(\"path\",entryName);\n    paxHeaderContainsPath=true;\n  }\n else   if (longFileMode == LONGFILE_GNU) {\n    TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n    longLinkEntry.setSize(nameLen + 1);\n    putArchiveEntry(longLinkEntry);\n    write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n    write(0);\n    closeArchiveEntry();\n  }\n else   if (longFileMode != LONGFILE_TRUNCATE) {\n    throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 86,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2702,
                        "startLineNumber": 267,
                        "startColumnNumber": 78,
                        "endLineNumber": 334,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (finished) {\n    throw new IOException(\"Stream has already been finished\");\n  }\n  TarArchiveEntry entry=(TarArchiveEntry)archiveEntry;\n  Map<String,String> paxHeaders=new HashMap<String,String>();\n  final String entryName=entry.getName();\n  final ByteBuffer encodedName=encoding.encode(entryName);\n  final int nameLen=encodedName.limit() - encodedName.position();\n  boolean paxHeaderContainsPath=false;\n  if (nameLen >= TarConstants.NAMELEN) {\n    if (longFileMode == LONGFILE_POSIX) {\n      paxHeaders.put(\"path\",entryName);\n      paxHeaderContainsPath=true;\n    }\n else     if (longFileMode == LONGFILE_GNU) {\n      TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n      longLinkEntry.setSize(nameLen + 1);\n      putArchiveEntry(longLinkEntry);\n      write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n      write(0);\n      closeArchiveEntry();\n    }\n else     if (longFileMode != LONGFILE_TRUNCATE) {\n      throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n    }\n  }\n  if (bigNumberMode == BIGNUMBER_POSIX) {\n    addPaxHeadersForBigNumbers(paxHeaders,entry);\n  }\n else   if (bigNumberMode != BIGNUMBER_STAR) {\n    failForBigNumbers(entry);\n  }\n  if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) {\n    paxHeaders.put(\"path\",entryName);\n  }\n  if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) {\n    paxHeaders.put(\"linkpath\",entry.getLinkName());\n  }\n  if (paxHeaders.size() > 0) {\n    writePaxHeaders(entryName,paxHeaders);\n  }\n  entry.writeEntryHeader(recordBuf,encoding,bigNumberMode == BIGNUMBER_STAR);\n  writeRecord(recordBuf);\n  currBytes=0;\n  if (entry.isDirectory()) {\n    currSize=0;\n  }\n else {\n    currSize=entry.getSize();\n  }\n  currName=entryName;\n  haveUnclosedEntry=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 274,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3450,
                        "startLineNumber": 253,
                        "startColumnNumber": 4,
                        "endLineNumber": 334,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Put an entry on the output stream. This writes the entry's header record and positions the output stream for writing the contents of the entry. Once this method is called, the stream is ready for calls to write() to write the entry's contents. Once the contents are written, closeArchiveEntry() <B>MUST</B> be called to ensure that all buffered data is completely written to the output stream.\n * @param archiveEntry The TarEntry to be written to the archive.\n * @throws IOException on error\n * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry\n */\n@Override public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n  if (finished) {\n    throw new IOException(\"Stream has already been finished\");\n  }\n  TarArchiveEntry entry=(TarArchiveEntry)archiveEntry;\n  Map<String,String> paxHeaders=new HashMap<String,String>();\n  final String entryName=entry.getName();\n  final ByteBuffer encodedName=encoding.encode(entryName);\n  final int nameLen=encodedName.limit() - encodedName.position();\n  boolean paxHeaderContainsPath=false;\n  if (nameLen >= TarConstants.NAMELEN) {\n    if (longFileMode == LONGFILE_POSIX) {\n      paxHeaders.put(\"path\",entryName);\n      paxHeaderContainsPath=true;\n    }\n else     if (longFileMode == LONGFILE_GNU) {\n      TarArchiveEntry longLinkEntry=new TarArchiveEntry(TarConstants.GNU_LONGLINK,TarConstants.LF_GNUTYPE_LONGNAME);\n      longLinkEntry.setSize(nameLen + 1);\n      putArchiveEntry(longLinkEntry);\n      write(encodedName.array(),encodedName.arrayOffset(),nameLen);\n      write(0);\n      closeArchiveEntry();\n    }\n else     if (longFileMode != LONGFILE_TRUNCATE) {\n      throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n    }\n  }\n  if (bigNumberMode == BIGNUMBER_POSIX) {\n    addPaxHeadersForBigNumbers(paxHeaders,entry);\n  }\n else   if (bigNumberMode != BIGNUMBER_STAR) {\n    failForBigNumbers(entry);\n  }\n  if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) {\n    paxHeaders.put(\"path\",entryName);\n  }\n  if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) {\n    paxHeaders.put(\"linkpath\",entry.getLinkName());\n  }\n  if (paxHeaders.size() > 0) {\n    writePaxHeaders(entryName,paxHeaders);\n  }\n  entry.writeEntryHeader(recordBuf,encoding,bigNumberMode == BIGNUMBER_STAR);\n  writeRecord(recordBuf);\n  currBytes=0;\n  if (entry.isDirectory()) {\n    currSize=0;\n  }\n else {\n    currSize=entry.getSize();\n  }\n  currName=entryName;\n  haveUnclosedEntry=true;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 287,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 198,
                    "startLineNumber": 294,
                    "startColumnNumber": 16,
                    "endLineNumber": 296,
                    "endColumnNumber": 79
                },
                "nodeContext": "throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \"+ TarConstants.NAMELEN+ \" bytes)\");\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 13,
            "type": "java.lang.RuntimeException"
        }
    ],
    "positionList": [
        {
            "charLength": 191,
            "startLineNumber": 294,
            "startColumnNumber": 22,
            "endLineNumber": 296,
            "endColumnNumber": 78
        }
    ],
    "layoutRelationDataList": []
}