{
    "id": 5197,
    "expression": "b",
    "projectName": "commons-math",
    "commitID": "7e7207cd4fa31f8f75b9a8a309c98c12fb672a7b",
    "filePath": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 710,
                "startColumnNumber": 12,
                "endLineNumber": 710,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 710,
                        "startColumnNumber": 12,
                        "endLineNumber": 710,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "b.getRowDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 710,
                        "startColumnNumber": 12,
                        "endLineNumber": 710,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "b.getRowDimension() != this.getRowDimension()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 710,
                        "startColumnNumber": 8,
                        "endLineNumber": 712,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (b.getRowDimension() != this.getRowDimension()) {\n  throw new IllegalArgumentException(\"Incorrect row dimension\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1557,
                        "startLineNumber": 709,
                        "startColumnNumber": 99,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 256,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2137,
                        "startLineNumber": 698,
                        "startColumnNumber": 4,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>.\n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 270,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 710,
                    "startColumnNumber": 12,
                    "endLineNumber": 710,
                    "endColumnNumber": 57
                },
                "nodeContext": "b.getRowDimension() != this.getRowDimension()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrix"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 721,
                "startColumnNumber": 20,
                "endLineNumber": 721,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 721,
                        "startColumnNumber": 20,
                        "endLineNumber": 721,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "b.getColumnDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 721,
                        "startColumnNumber": 12,
                        "endLineNumber": 721,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "nColB=b.getColumnDimension()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 721,
                        "startColumnNumber": 8,
                        "endLineNumber": 721,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "int nColB=b.getColumnDimension();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1557,
                        "startLineNumber": 709,
                        "startColumnNumber": 99,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 256,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2137,
                        "startLineNumber": 698,
                        "startColumnNumber": 4,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>.\n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 270,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 721,
                    "startColumnNumber": 8,
                    "endLineNumber": 721,
                    "endColumnNumber": 43
                },
                "nodeContext": "int nColB=b.getColumnDimension();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrix"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 722,
                "startColumnNumber": 20,
                "endLineNumber": 722,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 722,
                        "startColumnNumber": 20,
                        "endLineNumber": 722,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "b.getRowDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 722,
                        "startColumnNumber": 12,
                        "endLineNumber": 722,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "nRowB=b.getRowDimension()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 722,
                        "startColumnNumber": 8,
                        "endLineNumber": 722,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "int nRowB=b.getRowDimension();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1557,
                        "startLineNumber": 709,
                        "startColumnNumber": 99,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 256,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2137,
                        "startLineNumber": 698,
                        "startColumnNumber": 4,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>.\n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 270,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 722,
                    "startColumnNumber": 8,
                    "endLineNumber": 722,
                    "endColumnNumber": 40
                },
                "nodeContext": "int nRowB=b.getRowDimension();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrix"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 728,
                "startColumnNumber": 31,
                "endLineNumber": 728,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 728,
                        "startColumnNumber": 31,
                        "endLineNumber": 728,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "b.getEntry(permutation[row],col)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 728,
                        "startColumnNumber": 16,
                        "endLineNumber": 728,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "bp[row][col]=b.getEntry(permutation[row],col)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 728,
                        "startColumnNumber": 16,
                        "endLineNumber": 728,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "bp[row][col]=b.getEntry(permutation[row],col);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 727,
                        "startColumnNumber": 50,
                        "endLineNumber": 729,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  bp[row][col]=b.getEntry(permutation[row],col);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 119,
                        "startLineNumber": 727,
                        "startColumnNumber": 12,
                        "endLineNumber": 729,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int col=0; col < nColB; col++) {\n  bp[row][col]=b.getEntry(permutation[row],col);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 726,
                        "startColumnNumber": 46,
                        "endLineNumber": 730,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int col=0; col < nColB; col++) {\n    bp[row][col]=b.getEntry(permutation[row],col);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 181,
                        "startLineNumber": 726,
                        "startColumnNumber": 8,
                        "endLineNumber": 730,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int row=0; row < nRowB; row++) {\n  for (int col=0; col < nColB; col++) {\n    bp[row][col]=b.getEntry(permutation[row],col);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 38,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1557,
                        "startLineNumber": 709,
                        "startColumnNumber": 99,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 256,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2137,
                        "startLineNumber": 698,
                        "startColumnNumber": 4,
                        "endLineNumber": 755,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>.\n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  double[][] bp=new double[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]/=lu[col][col];\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]-=bp[col][j] * lu[i][col];\n      }\n    }\n  }\n  RealMatrixImpl outMat=new RealMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 270,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 728,
                    "startColumnNumber": 16,
                    "endLineNumber": 728,
                    "endColumnNumber": 65
                },
                "nodeContext": "bp[row][col]=b.getEntry(permutation[row],col);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrix"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 710,
            "startColumnNumber": 12,
            "endLineNumber": 710,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 721,
            "startColumnNumber": 20,
            "endLineNumber": 721,
            "endColumnNumber": 21
        },
        {
            "charLength": 1,
            "startLineNumber": 722,
            "startColumnNumber": 20,
            "endLineNumber": 722,
            "endColumnNumber": 21
        },
        {
            "charLength": 1,
            "startLineNumber": 728,
            "startColumnNumber": 31,
            "endLineNumber": 728,
            "endColumnNumber": 32
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 7
        }
    ]
}