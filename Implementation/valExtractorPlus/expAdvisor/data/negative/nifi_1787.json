{
    "id": 1787,
    "expression": "mapper",
    "projectName": "nifi",
    "commitID": "236a2b72b6f1074040b3800377216af2bcba65af",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-content-viewer/src/main/java/org/apache/nifi/web/StandardContentViewerController.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "mapper",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 63,
                "startColumnNumber": 46,
                "endLineNumber": 63,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 63,
                        "startColumnNumber": 46,
                        "endLineNumber": 63,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "mapper.readValue(content.getContentStream(),Object.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 63,
                        "startColumnNumber": 33,
                        "endLineNumber": 63,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "objectJson=mapper.readValue(content.getContentStream(),Object.class)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 63,
                        "startColumnNumber": 20,
                        "endLineNumber": 63,
                        "endColumnNumber": 105
                    },
                    "nodeContext": "final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 332,
                        "startLineNumber": 60,
                        "startColumnNumber": 73,
                        "endLineNumber": 65,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final ObjectMapper mapper=new ObjectMapper();\n  final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n  formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1678,
                        "startLineNumber": 60,
                        "startColumnNumber": 16,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (\"application/json\".equals(content.getContentType())) {\n  final ObjectMapper mapper=new ObjectMapper();\n  final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n  formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n}\n else if (\"application/xml\".equals(content.getContentType())) {\n  final StringWriter writer=new StringWriter();\n  try {\n    final StreamSource source=new StreamSource(content.getContentStream());\n    final StreamResult result=new StreamResult(writer);\n    final TransformerFactory transformFactory=TransformerFactory.newInstance();\n    final Transformer transformer=transformFactory.newTransformer();\n    transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n    transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n    transformer.transform(source,result);\n  }\n catch (  final TransformerFactoryConfigurationError|TransformerException te) {\n    throw new IOException(\"Unable to transform content as XML: \" + te,te);\n  }\n  formatted=writer.toString();\n}\n else {\n  formatted=content.getContent();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 151,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1710,
                        "startLineNumber": 59,
                        "startColumnNumber": 19,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (\"application/json\".equals(content.getContentType())) {\n    final ObjectMapper mapper=new ObjectMapper();\n    final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n    formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n  }\n else   if (\"application/xml\".equals(content.getContentType())) {\n    final StringWriter writer=new StringWriter();\n    try {\n      final StreamSource source=new StreamSource(content.getContentStream());\n      final StreamResult result=new StreamResult(writer);\n      final TransformerFactory transformFactory=TransformerFactory.newInstance();\n      final Transformer transformer=transformFactory.newTransformer();\n      transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n      transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n      transformer.transform(source,result);\n    }\n catch (    final TransformerFactoryConfigurationError|TransformerException te) {\n      throw new IOException(\"Unable to transform content as XML: \" + te,te);\n    }\n    formatted=writer.toString();\n  }\n else {\n    formatted=content.getContent();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1840,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (DisplayMode.Original.equals(content.getDisplayMode())) {\n  formatted=content.getContent();\n}\n else {\n  if (\"application/json\".equals(content.getContentType())) {\n    final ObjectMapper mapper=new ObjectMapper();\n    final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n    formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n  }\n else   if (\"application/xml\".equals(content.getContentType())) {\n    final StringWriter writer=new StringWriter();\n    try {\n      final StreamSource source=new StreamSource(content.getContentStream());\n      final StreamResult result=new StreamResult(writer);\n      final TransformerFactory transformFactory=TransformerFactory.newInstance();\n      final Transformer transformer=transformFactory.newTransformer();\n      transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n      transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n      transformer.transform(source,result);\n    }\n catch (    final TransformerFactoryConfigurationError|TransformerException te) {\n      throw new IOException(\"Unable to transform content as XML: \" + te,te);\n    }\n    formatted=writer.toString();\n  }\n else {\n    formatted=content.getContent();\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2210,
                        "startLineNumber": 53,
                        "startColumnNumber": 168,
                        "endLineNumber": 95,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final String formatted;\n  if (DisplayMode.Original.equals(content.getDisplayMode())) {\n    formatted=content.getContent();\n  }\n else {\n    if (\"application/json\".equals(content.getContentType())) {\n      final ObjectMapper mapper=new ObjectMapper();\n      final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n      formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n    }\n else     if (\"application/xml\".equals(content.getContentType())) {\n      final StringWriter writer=new StringWriter();\n      try {\n        final StreamSource source=new StreamSource(content.getContentStream());\n        final StreamResult result=new StreamResult(writer);\n        final TransformerFactory transformFactory=TransformerFactory.newInstance();\n        final Transformer transformer=transformFactory.newTransformer();\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n        transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n        transformer.transform(source,result);\n      }\n catch (      final TransformerFactoryConfigurationError|TransformerException te) {\n        throw new IOException(\"Unable to transform content as XML: \" + te,te);\n      }\n      formatted=writer.toString();\n    }\n else {\n      formatted=content.getContent();\n    }\n  }\n  request.setAttribute(\"mode\",content.getContentType());\n  request.setAttribute(\"content\",formatted);\n  request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2526,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 98,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n  final String formatted;\n  if (DisplayMode.Original.equals(content.getDisplayMode())) {\n    formatted=content.getContent();\n  }\n else {\n    if (\"application/json\".equals(content.getContentType())) {\n      final ObjectMapper mapper=new ObjectMapper();\n      final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n      formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n    }\n else     if (\"application/xml\".equals(content.getContentType())) {\n      final StringWriter writer=new StringWriter();\n      try {\n        final StreamSource source=new StreamSource(content.getContentStream());\n        final StreamResult result=new StreamResult(writer);\n        final TransformerFactory transformFactory=TransformerFactory.newInstance();\n        final Transformer transformer=transformFactory.newTransformer();\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n        transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n        transformer.transform(source,result);\n      }\n catch (      final TransformerFactoryConfigurationError|TransformerException te) {\n        throw new IOException(\"Unable to transform content as XML: \" + te,te);\n      }\n      formatted=writer.toString();\n    }\n else {\n      formatted=content.getContent();\n    }\n  }\n  request.setAttribute(\"mode\",content.getContentType());\n  request.setAttribute(\"content\",formatted);\n  request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n}\n else {\n  final PrintWriter out=response.getWriter();\n  out.println(\"Unexpected content type: \" + content.getContentType());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2693,
                        "startLineNumber": 49,
                        "startColumnNumber": 120,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 253,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 41,
                        "startColumnNumber": 4,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 272,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 85,
                    "startLineNumber": 63,
                    "startColumnNumber": 20,
                    "endLineNumber": 63,
                    "endColumnNumber": 105
                },
                "nodeContext": "final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.ObjectMapper"
        },
        {
            "nodeContext": "mapper",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 64,
                "startColumnNumber": 32,
                "endLineNumber": 64,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 64,
                        "startColumnNumber": 32,
                        "endLineNumber": 64,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "mapper.writerWithDefaultPrettyPrinter()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 64,
                        "startColumnNumber": 32,
                        "endLineNumber": 64,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 64,
                        "startColumnNumber": 20,
                        "endLineNumber": 64,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 64,
                        "startColumnNumber": 20,
                        "endLineNumber": 64,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 332,
                        "startLineNumber": 60,
                        "startColumnNumber": 73,
                        "endLineNumber": 65,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final ObjectMapper mapper=new ObjectMapper();\n  final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n  formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1678,
                        "startLineNumber": 60,
                        "startColumnNumber": 16,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (\"application/json\".equals(content.getContentType())) {\n  final ObjectMapper mapper=new ObjectMapper();\n  final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n  formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n}\n else if (\"application/xml\".equals(content.getContentType())) {\n  final StringWriter writer=new StringWriter();\n  try {\n    final StreamSource source=new StreamSource(content.getContentStream());\n    final StreamResult result=new StreamResult(writer);\n    final TransformerFactory transformFactory=TransformerFactory.newInstance();\n    final Transformer transformer=transformFactory.newTransformer();\n    transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n    transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n    transformer.transform(source,result);\n  }\n catch (  final TransformerFactoryConfigurationError|TransformerException te) {\n    throw new IOException(\"Unable to transform content as XML: \" + te,te);\n  }\n  formatted=writer.toString();\n}\n else {\n  formatted=content.getContent();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 151,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1710,
                        "startLineNumber": 59,
                        "startColumnNumber": 19,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (\"application/json\".equals(content.getContentType())) {\n    final ObjectMapper mapper=new ObjectMapper();\n    final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n    formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n  }\n else   if (\"application/xml\".equals(content.getContentType())) {\n    final StringWriter writer=new StringWriter();\n    try {\n      final StreamSource source=new StreamSource(content.getContentStream());\n      final StreamResult result=new StreamResult(writer);\n      final TransformerFactory transformFactory=TransformerFactory.newInstance();\n      final Transformer transformer=transformFactory.newTransformer();\n      transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n      transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n      transformer.transform(source,result);\n    }\n catch (    final TransformerFactoryConfigurationError|TransformerException te) {\n      throw new IOException(\"Unable to transform content as XML: \" + te,te);\n    }\n    formatted=writer.toString();\n  }\n else {\n    formatted=content.getContent();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1840,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (DisplayMode.Original.equals(content.getDisplayMode())) {\n  formatted=content.getContent();\n}\n else {\n  if (\"application/json\".equals(content.getContentType())) {\n    final ObjectMapper mapper=new ObjectMapper();\n    final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n    formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n  }\n else   if (\"application/xml\".equals(content.getContentType())) {\n    final StringWriter writer=new StringWriter();\n    try {\n      final StreamSource source=new StreamSource(content.getContentStream());\n      final StreamResult result=new StreamResult(writer);\n      final TransformerFactory transformFactory=TransformerFactory.newInstance();\n      final Transformer transformer=transformFactory.newTransformer();\n      transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n      transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n      transformer.transform(source,result);\n    }\n catch (    final TransformerFactoryConfigurationError|TransformerException te) {\n      throw new IOException(\"Unable to transform content as XML: \" + te,te);\n    }\n    formatted=writer.toString();\n  }\n else {\n    formatted=content.getContent();\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2210,
                        "startLineNumber": 53,
                        "startColumnNumber": 168,
                        "endLineNumber": 95,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final String formatted;\n  if (DisplayMode.Original.equals(content.getDisplayMode())) {\n    formatted=content.getContent();\n  }\n else {\n    if (\"application/json\".equals(content.getContentType())) {\n      final ObjectMapper mapper=new ObjectMapper();\n      final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n      formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n    }\n else     if (\"application/xml\".equals(content.getContentType())) {\n      final StringWriter writer=new StringWriter();\n      try {\n        final StreamSource source=new StreamSource(content.getContentStream());\n        final StreamResult result=new StreamResult(writer);\n        final TransformerFactory transformFactory=TransformerFactory.newInstance();\n        final Transformer transformer=transformFactory.newTransformer();\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n        transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n        transformer.transform(source,result);\n      }\n catch (      final TransformerFactoryConfigurationError|TransformerException te) {\n        throw new IOException(\"Unable to transform content as XML: \" + te,te);\n      }\n      formatted=writer.toString();\n    }\n else {\n      formatted=content.getContent();\n    }\n  }\n  request.setAttribute(\"mode\",content.getContentType());\n  request.setAttribute(\"content\",formatted);\n  request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2526,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 98,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n  final String formatted;\n  if (DisplayMode.Original.equals(content.getDisplayMode())) {\n    formatted=content.getContent();\n  }\n else {\n    if (\"application/json\".equals(content.getContentType())) {\n      final ObjectMapper mapper=new ObjectMapper();\n      final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n      formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n    }\n else     if (\"application/xml\".equals(content.getContentType())) {\n      final StringWriter writer=new StringWriter();\n      try {\n        final StreamSource source=new StreamSource(content.getContentStream());\n        final StreamResult result=new StreamResult(writer);\n        final TransformerFactory transformFactory=TransformerFactory.newInstance();\n        final Transformer transformer=transformFactory.newTransformer();\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n        transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n        transformer.transform(source,result);\n      }\n catch (      final TransformerFactoryConfigurationError|TransformerException te) {\n        throw new IOException(\"Unable to transform content as XML: \" + te,te);\n      }\n      formatted=writer.toString();\n    }\n else {\n      formatted=content.getContent();\n    }\n  }\n  request.setAttribute(\"mode\",content.getContentType());\n  request.setAttribute(\"content\",formatted);\n  request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n}\n else {\n  final PrintWriter out=response.getWriter();\n  out.println(\"Unexpected content type: \" + content.getContentType());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2693,
                        "startLineNumber": 49,
                        "startColumnNumber": 120,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 253,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 41,
                        "startColumnNumber": 4,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 272,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 64,
                    "startColumnNumber": 20,
                    "endLineNumber": 64,
                    "endColumnNumber": 103
                },
                "nodeContext": "formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.ObjectMapper"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 63,
            "startColumnNumber": 46,
            "endLineNumber": 63,
            "endColumnNumber": 52
        },
        {
            "charLength": 6,
            "startLineNumber": 64,
            "startColumnNumber": 32,
            "endLineNumber": 64,
            "endColumnNumber": 38
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        }
    ]
}