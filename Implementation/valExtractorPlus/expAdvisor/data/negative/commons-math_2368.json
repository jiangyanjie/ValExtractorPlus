{
    "id": 2368,
    "expression": "1",
    "projectName": "commons-math",
    "commitID": "367fe7662e738356ef6fef47a12a5bd6e3269e5e",
    "filePath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
    "occurrences": 8,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2654,
                "startColumnNumber": 38,
                "endLineNumber": 2654,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 2654,
                        "startColumnNumber": 32,
                        "endLineNumber": 2654,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "len - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 2654,
                        "startColumnNumber": 18,
                        "endLineNumber": 2654,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "lenMinusOne=len - 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 2654,
                        "startColumnNumber": 8,
                        "endLineNumber": 2654,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "final int lenMinusOne=len - 1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 2654,
                    "startColumnNumber": 8,
                    "endLineNumber": 2654,
                    "endColumnNumber": 40
                },
                "nodeContext": "final int lenMinusOne=len - 1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2657,
                "startColumnNumber": 42,
                "endLineNumber": 2657,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 2657,
                        "startColumnNumber": 33,
                        "endLineNumber": 2657,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "prodHigh[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 2657,
                        "startColumnNumber": 19,
                        "endLineNumber": 2657,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "prodHigh[0] + prodHigh[1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 2657,
                        "startColumnNumber": 8,
                        "endLineNumber": 2657,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "sHigh[0]=prodHigh[0] + prodHigh[1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 2657,
                        "startColumnNumber": 8,
                        "endLineNumber": 2657,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "sHigh[0]=prodHigh[0] + prodHigh[1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 2657,
                    "startColumnNumber": 8,
                    "endLineNumber": 2657,
                    "endColumnNumber": 45
                },
                "nodeContext": "sHigh[0]=prodHigh[0] + prodHigh[1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2658,
                "startColumnNumber": 44,
                "endLineNumber": 2658,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 2658,
                        "startColumnNumber": 35,
                        "endLineNumber": 2658,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "prodHigh[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 2658,
                        "startColumnNumber": 24,
                        "endLineNumber": 2658,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "sHigh[0] - prodHigh[1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 2658,
                        "startColumnNumber": 15,
                        "endLineNumber": 2658,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "sPrime=sHigh[0] - prodHigh[1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 2658,
                        "startColumnNumber": 8,
                        "endLineNumber": 2658,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "double sPrime=sHigh[0] - prodHigh[1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 2658,
                    "startColumnNumber": 8,
                    "endLineNumber": 2658,
                    "endColumnNumber": 47
                },
                "nodeContext": "double sPrime=sHigh[0] - prodHigh[1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2659,
                "startColumnNumber": 35,
                "endLineNumber": 2659,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 2659,
                        "startColumnNumber": 26,
                        "endLineNumber": 2659,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "prodHigh[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 2659,
                        "startColumnNumber": 26,
                        "endLineNumber": 2659,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "prodHigh[1] - (sHigh[0] - sPrime)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 2659,
                        "startColumnNumber": 25,
                        "endLineNumber": 2659,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "(prodHigh[1] - (sHigh[0] - sPrime))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 2659,
                        "startColumnNumber": 25,
                        "endLineNumber": 2659,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 2659,
                        "startColumnNumber": 15,
                        "endLineNumber": 2659,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 2659,
                        "startColumnNumber": 8,
                        "endLineNumber": 2659,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 22,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 2659,
                    "startColumnNumber": 8,
                    "endLineNumber": 2659,
                    "endColumnNumber": 86
                },
                "nodeContext": "double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 22,
                "astHeight": 9
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2661,
                "startColumnNumber": 21,
                "endLineNumber": 2661,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 2661,
                        "startColumnNumber": 17,
                        "endLineNumber": 2661,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "i=1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 2661,
                        "startColumnNumber": 13,
                        "endLineNumber": 2661,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "int i=1",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 2661,
                    "startColumnNumber": 13,
                    "endLineNumber": 2661,
                    "endColumnNumber": 22
                },
                "nodeContext": "int i=1",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2662,
                "startColumnNumber": 33,
                "endLineNumber": 2662,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 2662,
                        "startColumnNumber": 29,
                        "endLineNumber": 2662,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "i - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 2662,
                        "startColumnNumber": 22,
                        "endLineNumber": 2662,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "prev=i - 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 2662,
                        "startColumnNumber": 12,
                        "endLineNumber": 2662,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "final int prev=i - 1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 2661,
                        "startColumnNumber": 46,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 2662,
                    "startColumnNumber": 12,
                    "endLineNumber": 2662,
                    "endColumnNumber": 35
                },
                "nodeContext": "final int prev=i - 1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2663,
                "startColumnNumber": 33,
                "endLineNumber": 2663,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 2663,
                        "startColumnNumber": 29,
                        "endLineNumber": 2663,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "i + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 2663,
                        "startColumnNumber": 22,
                        "endLineNumber": 2663,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "next=i + 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 2663,
                        "startColumnNumber": 12,
                        "endLineNumber": 2663,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "final int next=i + 1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 2661,
                        "startColumnNumber": 46,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 2663,
                    "startColumnNumber": 12,
                    "endLineNumber": 2663,
                    "endColumnNumber": 35
                },
                "nodeContext": "final int next=i + 1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 2669,
                "startColumnNumber": 35,
                "endLineNumber": 2669,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 2669,
                        "startColumnNumber": 21,
                        "endLineNumber": 2669,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "lenMinusOne - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 2669,
                        "startColumnNumber": 15,
                        "endLineNumber": 2669,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "sHigh[lenMinusOne - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 2669,
                        "startColumnNumber": 15,
                        "endLineNumber": 2669,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 2669,
                        "startColumnNumber": 8,
                        "endLineNumber": 2669,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 2669,
                    "startColumnNumber": 8,
                    "endLineNumber": 2669,
                    "endColumnNumber": 63
                },
                "nodeContext": "return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 2654,
            "startColumnNumber": 38,
            "endLineNumber": 2654,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 2657,
            "startColumnNumber": 42,
            "endLineNumber": 2657,
            "endColumnNumber": 43
        },
        {
            "charLength": 1,
            "startLineNumber": 2658,
            "startColumnNumber": 44,
            "endLineNumber": 2658,
            "endColumnNumber": 45
        },
        {
            "charLength": 1,
            "startLineNumber": 2659,
            "startColumnNumber": 35,
            "endLineNumber": 2659,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 2661,
            "startColumnNumber": 21,
            "endLineNumber": 2661,
            "endColumnNumber": 22
        },
        {
            "charLength": 1,
            "startLineNumber": 2662,
            "startColumnNumber": 33,
            "endLineNumber": 2662,
            "endColumnNumber": 34
        },
        {
            "charLength": 1,
            "startLineNumber": 2663,
            "startColumnNumber": 33,
            "endLineNumber": 2663,
            "endColumnNumber": 34
        },
        {
            "charLength": 1,
            "startLineNumber": 2669,
            "startColumnNumber": 35,
            "endLineNumber": 2669,
            "endColumnNumber": 36
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        }
    ]
}