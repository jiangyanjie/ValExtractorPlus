{
    "id": 180,
    "expression": "doc.get(k.getName())",
    "projectName": "jackrabbit-oak",
    "commitID": "3466342724846a51256dbaca7fa49a2f9ec42707",
    "filePath": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/UpdateUtils.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "doc.get(k.getName())",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 20,
                "startLineNumber": 112,
                "startColumnNumber": 27,
                "endLineNumber": 112,
                "endColumnNumber": 47
            },
            "astNodeNumber": 6,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 112,
                        "startColumnNumber": 19,
                        "endLineNumber": 112,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "value=doc.get(k.getName())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 112,
                        "startColumnNumber": 12,
                        "endLineNumber": 112,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "Object value=doc.get(k.getName());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1895,
                        "startLineNumber": 109,
                        "startColumnNumber": 70,
                        "endLineNumber": 155,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Condition c=entry.getValue();\n  Key k=entry.getKey();\n  Object value=doc.get(k.getName());\n  Revision r=k.getRevision();\n  if (c.type == Condition.Type.EXISTS) {\n    if (r == null) {\n      throw new IllegalStateException(\"EXISTS must not contain null revision\");\n    }\n    if (value == null) {\n      if (Boolean.TRUE.equals(c.value)) {\n        return false;\n      }\n    }\n else {\n      if (value instanceof Map) {\n        Map<?,?> map=(Map<?,?>)value;\n        if (Boolean.TRUE.equals(c.value)) {\n          if (!map.containsKey(r)) {\n            return false;\n          }\n        }\n else {\n          if (map.containsKey(r)) {\n            return false;\n          }\n        }\n      }\n else {\n        return false;\n      }\n    }\n  }\n else   if (c.type == Condition.Type.EQUALS || c.type == Condition.Type.NOTEQUALS) {\n    if (r != null) {\n      if (value instanceof Map) {\n        value=((Map)value).get(r);\n      }\n else {\n        value=null;\n      }\n    }\n    boolean equal=Objects.equal(value,c.value);\n    if (c.type == Condition.Type.EQUALS && !equal) {\n      return false;\n    }\n else     if (c.type == Condition.Type.NOTEQUALS && equal) {\n      return false;\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown condition: \" + c.type);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1957,
                        "startLineNumber": 109,
                        "startColumnNumber": 8,
                        "endLineNumber": 155,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (Map.Entry<Key,Condition> entry : conditions.entrySet()) {\n  Condition c=entry.getValue();\n  Key k=entry.getKey();\n  Object value=doc.get(k.getName());\n  Revision r=k.getRevision();\n  if (c.type == Condition.Type.EXISTS) {\n    if (r == null) {\n      throw new IllegalStateException(\"EXISTS must not contain null revision\");\n    }\n    if (value == null) {\n      if (Boolean.TRUE.equals(c.value)) {\n        return false;\n      }\n    }\n else {\n      if (value instanceof Map) {\n        Map<?,?> map=(Map<?,?>)value;\n        if (Boolean.TRUE.equals(c.value)) {\n          if (!map.containsKey(r)) {\n            return false;\n          }\n        }\n else {\n          if (map.containsKey(r)) {\n            return false;\n          }\n        }\n      }\n else {\n        return false;\n      }\n    }\n  }\n else   if (c.type == Condition.Type.EQUALS || c.type == Condition.Type.NOTEQUALS) {\n    if (r != null) {\n      if (value instanceof Map) {\n        value=((Map)value).get(r);\n      }\n else {\n        value=null;\n      }\n    }\n    boolean equal=Objects.equal(value,c.value);\n    if (c.type == Condition.Type.EQUALS && !equal) {\n      return false;\n    }\n else     if (c.type == Condition.Type.NOTEQUALS && equal) {\n      return false;\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown condition: \" + c.type);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 242,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1994,
                        "startLineNumber": 108,
                        "startColumnNumber": 83,
                        "endLineNumber": 157,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Map.Entry<Key,Condition> entry : conditions.entrySet()) {\n    Condition c=entry.getValue();\n    Key k=entry.getKey();\n    Object value=doc.get(k.getName());\n    Revision r=k.getRevision();\n    if (c.type == Condition.Type.EXISTS) {\n      if (r == null) {\n        throw new IllegalStateException(\"EXISTS must not contain null revision\");\n      }\n      if (value == null) {\n        if (Boolean.TRUE.equals(c.value)) {\n          return false;\n        }\n      }\n else {\n        if (value instanceof Map) {\n          Map<?,?> map=(Map<?,?>)value;\n          if (Boolean.TRUE.equals(c.value)) {\n            if (!map.containsKey(r)) {\n              return false;\n            }\n          }\n else {\n            if (map.containsKey(r)) {\n              return false;\n            }\n          }\n        }\n else {\n          return false;\n        }\n      }\n    }\n else     if (c.type == Condition.Type.EQUALS || c.type == Condition.Type.NOTEQUALS) {\n      if (r != null) {\n        if (value instanceof Map) {\n          value=((Map)value).get(r);\n        }\n else {\n          value=null;\n        }\n      }\n      boolean equal=Objects.equal(value,c.value);\n      if (c.type == Condition.Type.EQUALS && !equal) {\n        return false;\n      }\n else       if (c.type == Condition.Type.NOTEQUALS && equal) {\n        return false;\n      }\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown condition: \" + c.type);\n    }\n  }\n  return true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 245,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2138,
                        "startLineNumber": 107,
                        "startColumnNumber": 4,
                        "endLineNumber": 157,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public static boolean checkConditions(@Nonnull Document doc,@Nonnull Map<Key,Condition> conditions){\n  for (  Map.Entry<Key,Condition> entry : conditions.entrySet()) {\n    Condition c=entry.getValue();\n    Key k=entry.getKey();\n    Object value=doc.get(k.getName());\n    Revision r=k.getRevision();\n    if (c.type == Condition.Type.EXISTS) {\n      if (r == null) {\n        throw new IllegalStateException(\"EXISTS must not contain null revision\");\n      }\n      if (value == null) {\n        if (Boolean.TRUE.equals(c.value)) {\n          return false;\n        }\n      }\n else {\n        if (value instanceof Map) {\n          Map<?,?> map=(Map<?,?>)value;\n          if (Boolean.TRUE.equals(c.value)) {\n            if (!map.containsKey(r)) {\n              return false;\n            }\n          }\n else {\n            if (map.containsKey(r)) {\n              return false;\n            }\n          }\n        }\n else {\n          return false;\n        }\n      }\n    }\n else     if (c.type == Condition.Type.EQUALS || c.type == Condition.Type.NOTEQUALS) {\n      if (r != null) {\n        if (value instanceof Map) {\n          value=((Map)value).get(r);\n        }\n else {\n          value=null;\n        }\n      }\n      boolean equal=Objects.equal(value,c.value);\n      if (c.type == Condition.Type.EQUALS && !equal) {\n        return false;\n      }\n else       if (c.type == Condition.Type.NOTEQUALS && equal) {\n        return false;\n      }\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown condition: \" + c.type);\n    }\n  }\n  return true;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 112,
                    "startColumnNumber": 12,
                    "endLineNumber": 112,
                    "endColumnNumber": 48
                },
                "nodeContext": "Object value=doc.get(k.getName());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 4,
            "type": "java.lang.Object"
        }
    ],
    "positionList": [
        {
            "charLength": 20,
            "startLineNumber": 112,
            "startColumnNumber": 27,
            "endLineNumber": 112,
            "endColumnNumber": 47
        }
    ],
    "layoutRelationDataList": []
}