{
    "id": 244,
    "expression": "logConfig",
    "projectName": "storm",
    "commitID": "f9fb20696b4e6e9dd7419b291087123c65cbd35c",
    "filePath": "storm-core/src/jvm/org/apache/storm/daemon/worker/LogConfigManager.java",
    "occurrences": 5,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "logConfig",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 56,
                "startColumnNumber": 20,
                "endLineNumber": 56,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 56,
                        "startColumnNumber": 12,
                        "endLineNumber": 56,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "null != logConfig",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 56,
                    "startColumnNumber": 12,
                    "endLineNumber": 56,
                    "endColumnNumber": 29
                },
                "nodeContext": "null != logConfig",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.storm.generated.LogConfig"
        },
        {
            "nodeContext": "logConfig",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 57,
                "startColumnNumber": 60,
                "endLineNumber": 57,
                "endColumnNumber": 69
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 57,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "LOG.debug(\"Processing received log config: {}\",logConfig)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 57,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "LOG.debug(\"Processing received log config: {}\",logConfig);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2543,
                        "startLineNumber": 56,
                        "startColumnNumber": 31,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 254,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 57,
                    "startColumnNumber": 12,
                    "endLineNumber": 57,
                    "endColumnNumber": 71
                },
                "nodeContext": "LOG.debug(\"Processing received log config: {}\",logConfig);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.storm.generated.LogConfig"
        },
        {
            "nodeContext": "logConfig",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 58,
                "startColumnNumber": 62,
                "endLineNumber": 58,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 58,
                        "startColumnNumber": 62,
                        "endLineNumber": 58,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "logConfig.get_named_logger_level()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 58,
                        "startColumnNumber": 48,
                        "endLineNumber": 58,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "new TreeMap<>(logConfig.get_named_logger_level())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 58,
                        "startColumnNumber": 38,
                        "endLineNumber": 58,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "loggers=new TreeMap<>(logConfig.get_named_logger_level())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 58,
                        "startColumnNumber": 12,
                        "endLineNumber": 58,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2543,
                        "startLineNumber": 56,
                        "startColumnNumber": 31,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 254,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 86,
                    "startLineNumber": 58,
                    "startColumnNumber": 12,
                    "endLineNumber": 58,
                    "endColumnNumber": 98
                },
                "nodeContext": "TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.storm.generated.LogConfig"
        },
        {
            "nodeContext": "logConfig",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 91,
                "startColumnNumber": 51,
                "endLineNumber": 91,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 91,
                        "startColumnNumber": 51,
                        "endLineNumber": 91,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "logConfig.get_named_logger_level()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 91,
                        "startColumnNumber": 51,
                        "endLineNumber": 91,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "logConfig.get_named_logger_level().keySet()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 91,
                        "startColumnNumber": 37,
                        "endLineNumber": 91,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "new TreeSet<>(logConfig.get_named_logger_level().keySet())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 529,
                        "startLineNumber": 91,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n  LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n  loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n  LogLevelAction action=logLevel.get_action();\n  if (action == LogLevelAction.UPDATE) {\n    setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2543,
                        "startLineNumber": 56,
                        "startColumnNumber": 31,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 254,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 91,
                    "startColumnNumber": 37,
                    "endLineNumber": 91,
                    "endColumnNumber": 95
                },
                "nodeContext": "new TreeSet<>(logConfig.get_named_logger_level().keySet())",
                "nodeType": "ClassInstanceCreation",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.storm.generated.LogConfig"
        },
        {
            "nodeContext": "logConfig",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 92,
                "startColumnNumber": 36,
                "endLineNumber": 92,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 92,
                        "startColumnNumber": 36,
                        "endLineNumber": 92,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "logConfig.get_named_logger_level()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 92,
                        "startColumnNumber": 36,
                        "endLineNumber": 92,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "logConfig.get_named_logger_level().get(loggerName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 92,
                        "startColumnNumber": 25,
                        "endLineNumber": 92,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "logLevel=logConfig.get_named_logger_level().get(loggerName)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 92,
                        "startColumnNumber": 16,
                        "endLineNumber": 92,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 444,
                        "startLineNumber": 91,
                        "startColumnNumber": 97,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n  loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n  LogLevelAction action=logLevel.get_action();\n  if (action == LogLevelAction.UPDATE) {\n    setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 529,
                        "startLineNumber": 91,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n  LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n  loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n  LogLevelAction action=logLevel.get_action();\n  if (action == LogLevelAction.UPDATE) {\n    setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 62,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2543,
                        "startLineNumber": 56,
                        "startColumnNumber": 31,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 254,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2566,
                        "startLineNumber": 56,
                        "startColumnNumber": 8,
                        "endLineNumber": 104,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (null != logConfig) {\n  LOG.debug(\"Processing received log config: {}\",logConfig);\n  TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n  LoggerContext logContext=(LoggerContext)LogManager.getContext();\n  Map<String,LogLevel> newLogConfigs=new HashMap<>();\n  for (  Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n    String msgLoggerName=entry.getKey();\n    msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n    LogLevel loggerLevel=entry.getValue();\n    if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n      LogLevel copy=new LogLevel(loggerLevel);\n      if (originalLogLevels.containsKey(msgLoggerName)) {\n        copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n      }\n else {\n        copy.set_reset_log_level(Level.INFO.name());\n      }\n      newLogConfigs.put(msgLoggerName,copy);\n    }\n  }\n  for (  String loggerName : latestLogConfig.get().descendingKeySet()) {\n    if (!newLogConfigs.containsKey(loggerName)) {\n      setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n    }\n  }\n  for (  String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n    LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n    loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n    LogLevelAction action=logLevel.get_action();\n    if (action == LogLevelAction.UPDATE) {\n      setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n    }\n  }\n  logContext.updateLoggers();\n  latestLogConfig.set(new TreeMap<>(newLogConfigs));\n  LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 258,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2582,
                        "startLineNumber": 55,
                        "startColumnNumber": 60,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 259,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 55,
                        "startColumnNumber": 4,
                        "endLineNumber": 105,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void processLogConfigChange(LogConfig logConfig){\n  if (null != logConfig) {\n    LOG.debug(\"Processing received log config: {}\",logConfig);\n    TreeMap<String,LogLevel> loggers=new TreeMap<>(logConfig.get_named_logger_level());\n    LoggerContext logContext=(LoggerContext)LogManager.getContext();\n    Map<String,LogLevel> newLogConfigs=new HashMap<>();\n    for (    Map.Entry<String,LogLevel> entry : loggers.entrySet()) {\n      String msgLoggerName=entry.getKey();\n      msgLoggerName=(\"ROOT\".equalsIgnoreCase(msgLoggerName)) ? LogManager.ROOT_LOGGER_NAME : msgLoggerName;\n      LogLevel loggerLevel=entry.getValue();\n      if (loggerLevel.is_set_reset_log_level_timeout_epoch()) {\n        LogLevel copy=new LogLevel(loggerLevel);\n        if (originalLogLevels.containsKey(msgLoggerName)) {\n          copy.set_reset_log_level(originalLogLevels.get(msgLoggerName).name());\n        }\n else {\n          copy.set_reset_log_level(Level.INFO.name());\n        }\n        newLogConfigs.put(msgLoggerName,copy);\n      }\n    }\n    for (    String loggerName : latestLogConfig.get().descendingKeySet()) {\n      if (!newLogConfigs.containsKey(loggerName)) {\n        setLoggerLevel(logContext,loggerName,latestLogConfig.get().get(loggerName).get_reset_log_level());\n      }\n    }\n    for (    String loggerName : new TreeSet<>(logConfig.get_named_logger_level().keySet())) {\n      LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n      loggerName=(\"ROOT\".equalsIgnoreCase(loggerName)) ? LogManager.ROOT_LOGGER_NAME : loggerName;\n      LogLevelAction action=logLevel.get_action();\n      if (action == LogLevelAction.UPDATE) {\n        setLoggerLevel(logContext,loggerName,logLevel.get_target_log_level());\n      }\n    }\n    logContext.updateLoggers();\n    latestLogConfig.set(new TreeMap<>(newLogConfigs));\n    LOG.debug(\"New merged log config is {}\",latestLogConfig.get());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 267,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 92,
                    "startColumnNumber": 16,
                    "endLineNumber": 92,
                    "endColumnNumber": 87
                },
                "nodeContext": "LogLevel logLevel=logConfig.get_named_logger_level().get(loggerName);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.storm.generated.LogConfig"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 56,
            "startColumnNumber": 20,
            "endLineNumber": 56,
            "endColumnNumber": 29
        },
        {
            "charLength": 9,
            "startLineNumber": 57,
            "startColumnNumber": 60,
            "endLineNumber": 57,
            "endColumnNumber": 69
        },
        {
            "charLength": 9,
            "startLineNumber": 58,
            "startColumnNumber": 62,
            "endLineNumber": 58,
            "endColumnNumber": 71
        },
        {
            "charLength": 9,
            "startLineNumber": 91,
            "startColumnNumber": 51,
            "endLineNumber": 91,
            "endColumnNumber": 60
        },
        {
            "charLength": 9,
            "startLineNumber": 92,
            "startColumnNumber": 36,
            "endLineNumber": 92,
            "endColumnNumber": 45
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        }
    ]
}