{
    "id": 398,
    "expression": "len",
    "projectName": "square@retrofit",
    "commitID": "54363686dc5d6ce11adc6d8339383193b04a0080",
    "filePath": "retrofit/src/main/java/retrofit/RestAdapter.java",
    "occurrences": 2,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 360,
                "startColumnNumber": 57,
                "endLineNumber": 360,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 360,
                        "startColumnNumber": 53,
                        "endLineNumber": 360,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "i < len",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 194,
                        "startLineNumber": 360,
                        "startColumnNumber": 10,
                        "endLineNumber": 363,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n  int end=Math.min(len,i + LOG_CHUNK_SIZE);\n  log.log(bodyString.substring(i,end));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 799,
                        "startLineNumber": 346,
                        "startColumnNumber": 59,
                        "endLineNumber": 364,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  bodySize=bodyBytes.length;\n  String bodyCharset=MimeUtil.parseCharset(bodyMime);\n  String bodyString=new String(bodyBytes,bodyCharset);\n  for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n    int end=Math.min(len,i + LOG_CHUNK_SIZE);\n    log.log(bodyString.substring(i,end));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 111,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 850,
                        "startLineNumber": 346,
                        "startColumnNumber": 8,
                        "endLineNumber": 364,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  bodySize=bodyBytes.length;\n  String bodyCharset=MimeUtil.parseCharset(bodyMime);\n  String bodyString=new String(bodyBytes,bodyCharset);\n  for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n    int end=Math.min(len,i + LOG_CHUNK_SIZE);\n    log.log(bodyString.substring(i,end));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1127,
                        "startLineNumber": 335,
                        "startColumnNumber": 24,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 161,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1145,
                        "startLineNumber": 335,
                        "startColumnNumber": 6,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 165,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1423,
                        "startLineNumber": 328,
                        "startColumnNumber": 58,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 209,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1477,
                        "startLineNumber": 328,
                        "startColumnNumber": 4,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 219,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1595,
                        "startLineNumber": 325,
                        "startColumnNumber": 75,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1764,
                        "startLineNumber": 324,
                        "startColumnNumber": 2,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nprivate Request logAndReplaceRequest(Request request) throws IOException {\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 248,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 360,
                    "startColumnNumber": 53,
                    "endLineNumber": 360,
                    "endColumnNumber": 60
                },
                "nodeContext": "i < len",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 361,
                "startColumnNumber": 31,
                "endLineNumber": 361,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 361,
                        "startColumnNumber": 22,
                        "endLineNumber": 361,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "Math.min(len,i + LOG_CHUNK_SIZE)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 361,
                        "startColumnNumber": 16,
                        "endLineNumber": 361,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "end=Math.min(len,i + LOG_CHUNK_SIZE)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 361,
                        "startColumnNumber": 12,
                        "endLineNumber": 361,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "int end=Math.min(len,i + LOG_CHUNK_SIZE);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 121,
                        "startLineNumber": 360,
                        "startColumnNumber": 83,
                        "endLineNumber": 363,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "{\n  int end=Math.min(len,i + LOG_CHUNK_SIZE);\n  log.log(bodyString.substring(i,end));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 194,
                        "startLineNumber": 360,
                        "startColumnNumber": 10,
                        "endLineNumber": 363,
                        "endColumnNumber": 11
                    },
                    "nodeContext": "for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n  int end=Math.min(len,i + LOG_CHUNK_SIZE);\n  log.log(bodyString.substring(i,end));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 799,
                        "startLineNumber": 346,
                        "startColumnNumber": 59,
                        "endLineNumber": 364,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  bodySize=bodyBytes.length;\n  String bodyCharset=MimeUtil.parseCharset(bodyMime);\n  String bodyString=new String(bodyBytes,bodyCharset);\n  for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n    int end=Math.min(len,i + LOG_CHUNK_SIZE);\n    log.log(bodyString.substring(i,end));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 111,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 850,
                        "startLineNumber": 346,
                        "startColumnNumber": 8,
                        "endLineNumber": 364,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  if (!request.getHeaders().isEmpty()) {\n    log.log(\"\");\n  }\n  if (!(body instanceof TypedByteArray)) {\n    request=Utils.readBodyToBytesIfNecessary(request);\n    body=request.getBody();\n  }\n  byte[] bodyBytes=((TypedByteArray)body).getBytes();\n  bodySize=bodyBytes.length;\n  String bodyCharset=MimeUtil.parseCharset(bodyMime);\n  String bodyString=new String(bodyBytes,bodyCharset);\n  for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n    int end=Math.min(len,i + LOG_CHUNK_SIZE);\n    log.log(bodyString.substring(i,end));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1127,
                        "startLineNumber": 335,
                        "startColumnNumber": 24,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 161,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1145,
                        "startLineNumber": 335,
                        "startColumnNumber": 6,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 165,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1423,
                        "startLineNumber": 328,
                        "startColumnNumber": 58,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 209,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1477,
                        "startLineNumber": 328,
                        "startColumnNumber": 4,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 219,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1595,
                        "startLineNumber": 325,
                        "startColumnNumber": 75,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1764,
                        "startLineNumber": 324,
                        "startColumnNumber": 2,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nprivate Request logAndReplaceRequest(Request request) throws IOException {\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 248,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 361,
                    "startColumnNumber": 12,
                    "endLineNumber": 361,
                    "endColumnNumber": 56
                },
                "nodeContext": "int end=Math.min(len,i + LOG_CHUNK_SIZE);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 360,
            "startColumnNumber": 57,
            "endLineNumber": 360,
            "endColumnNumber": 60
        },
        {
            "charLength": 3,
            "startLineNumber": 361,
            "startColumnNumber": 31,
            "endLineNumber": 361,
            "endColumnNumber": 34
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        }
    ]
}