{
    "id": 41,
    "expression": "isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()",
    "projectName": "dromara@hutool",
    "commitID": "e754ec3e86944f7d2c4d610123c5f3971fb08b99",
    "filePath": "hutool-core/src/main/java/cn/hutool/core/date/BetweenFormater.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 73,
                "startLineNumber": 62,
                "startColumnNumber": 6,
                "endLineNumber": 62,
                "endColumnNumber": 79
            },
            "astNodeNumber": 15,
            "astHeight": 5,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 62,
                        "startColumnNumber": 3,
                        "endLineNumber": 65,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n  sb.append(day).append(Level.DAY.name);\n  levelCount++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1333,
                        "startLineNumber": 50,
                        "startColumnNumber": 19,
                        "endLineNumber": 82,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n  long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1350,
                        "startLineNumber": 50,
                        "startColumnNumber": 2,
                        "endLineNumber": 82,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (betweenMs > 0) {\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n  long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 266,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1517,
                        "startLineNumber": 48,
                        "startColumnNumber": 23,
                        "endLineNumber": 89,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n    long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 298,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 43,
                        "startColumnNumber": 1,
                        "endLineNumber": 89,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 格式化日期间隔输出<br>\n * @return 格式化后的字符串\n */\npublic String format(){\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n    long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 304,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 62,
                    "startColumnNumber": 3,
                    "endLineNumber": 65,
                    "endColumnNumber": 4
                },
                "nodeContext": "if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n  sb.append(day).append(Level.DAY.name);\n  levelCount++;\n}\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 32,
                "astHeight": 7
            },
            "tokenLength": 12,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 73,
            "startLineNumber": 62,
            "startColumnNumber": 6,
            "endLineNumber": 62,
            "endColumnNumber": 79
        }
    ],
    "layoutRelationDataList": []
}