{
    "id": 369,
    "expression": "responseMessage",
    "projectName": "tinkerpop",
    "commitID": "95ff755d6e279c0f19b7be0cabe9eb41df242685",
    "filePath": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/NioGremlinResponseEncoder.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 54,
                "startColumnNumber": 17,
                "endLineNumber": 54,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 54,
                        "startColumnNumber": 17,
                        "endLineNumber": 54,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "responseMessage.getStatus()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 54,
                        "startColumnNumber": 17,
                        "endLineNumber": 54,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "responseMessage.getStatus().getCode()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 54,
                        "startColumnNumber": 17,
                        "endLineNumber": 54,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "responseMessage.getStatus().getCode().isSuccess()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 54,
                        "startColumnNumber": 16,
                        "endLineNumber": 54,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "!responseMessage.getStatus().getCode().isSuccess()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 54,
                        "startColumnNumber": 12,
                        "endLineNumber": 55,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "if (!responseMessage.getStatus().getCode().isSuccess()) errorMeter.mark();\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 644,
                        "startLineNumber": 53,
                        "startColumnNumber": 12,
                        "endLineNumber": 65,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 49,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 54,
                    "startColumnNumber": 16,
                    "endLineNumber": 54,
                    "endColumnNumber": 66
                },
                "nodeContext": "!responseMessage.getStatus().getCode().isSuccess()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        },
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 58,
                "startColumnNumber": 72,
                "endLineNumber": 58,
                "endColumnNumber": 87
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 58,
                        "startColumnNumber": 35,
                        "endLineNumber": 58,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "serializer.serializeResponseAsBinary(responseMessage,ctx.alloc())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 58,
                        "startColumnNumber": 16,
                        "endLineNumber": 58,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 58,
                        "startColumnNumber": 16,
                        "endLineNumber": 58,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 516,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 64,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (useBinary) byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n  final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n  byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 644,
                        "startLineNumber": 53,
                        "startColumnNumber": 12,
                        "endLineNumber": 65,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 49,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 87,
                    "startLineNumber": 58,
                    "startColumnNumber": 16,
                    "endLineNumber": 58,
                    "endColumnNumber": 103
                },
                "nodeContext": "byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        },
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 63,
                "startColumnNumber": 76,
                "endLineNumber": 63,
                "endColumnNumber": 91
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 63,
                        "startColumnNumber": 35,
                        "endLineNumber": 63,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "textSerializer.serializeResponseAsString(responseMessage)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 63,
                        "startColumnNumber": 35,
                        "endLineNumber": 63,
                        "endColumnNumber": 107
                    },
                    "nodeContext": "textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 63,
                        "startColumnNumber": 16,
                        "endLineNumber": 63,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 63,
                        "startColumnNumber": 16,
                        "endLineNumber": 63,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 380,
                        "startLineNumber": 59,
                        "startColumnNumber": 17,
                        "endLineNumber": 64,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n  byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 516,
                        "startLineNumber": 57,
                        "startColumnNumber": 12,
                        "endLineNumber": 64,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (useBinary) byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n  final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n  byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 644,
                        "startLineNumber": 53,
                        "startColumnNumber": 12,
                        "endLineNumber": 65,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 49,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 93,
                    "startLineNumber": 63,
                    "startColumnNumber": 16,
                    "endLineNumber": 63,
                    "endColumnNumber": 109
                },
                "nodeContext": "byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        },
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 67,
                "startColumnNumber": 99,
                "endLineNumber": 67,
                "endColumnNumber": 114
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 67,
                        "startColumnNumber": 99,
                        "endLineNumber": 67,
                        "endColumnNumber": 126
                    },
                    "nodeContext": "responseMessage.getResult()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 67,
                        "startColumnNumber": 12,
                        "endLineNumber": 67,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 67,
                        "startColumnNumber": 12,
                        "endLineNumber": 67,
                        "endColumnNumber": 164
                    },
                    "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 65,
                        "startColumnNumber": 31,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 990,
                        "startLineNumber": 65,
                        "startColumnNumber": 10,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 152,
                    "startLineNumber": 67,
                    "startColumnNumber": 12,
                    "endLineNumber": 67,
                    "endColumnNumber": 164
                },
                "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        },
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 67,
                "startColumnNumber": 128,
                "endLineNumber": 67,
                "endColumnNumber": 143
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 67,
                        "startColumnNumber": 128,
                        "endLineNumber": 67,
                        "endColumnNumber": 158
                    },
                    "nodeContext": "responseMessage.getRequestId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 67,
                        "startColumnNumber": 12,
                        "endLineNumber": 67,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 67,
                        "startColumnNumber": 12,
                        "endLineNumber": 67,
                        "endColumnNumber": 164
                    },
                    "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 65,
                        "startColumnNumber": 31,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 990,
                        "startLineNumber": 65,
                        "startColumnNumber": 10,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 152,
                    "startLineNumber": 67,
                    "startColumnNumber": 12,
                    "endLineNumber": 67,
                    "endColumnNumber": 164
                },
                "nodeContext": "logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        },
        {
            "nodeContext": "responseMessage",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 70,
                "startColumnNumber": 64,
                "endLineNumber": 70,
                "endColumnNumber": 79
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 70,
                        "startColumnNumber": 64,
                        "endLineNumber": 70,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "responseMessage.getRequestId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 70,
                        "startColumnNumber": 42,
                        "endLineNumber": 70,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "ResponseMessage.build(responseMessage.getRequestId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 70,
                        "startColumnNumber": 42,
                        "endLineNumber": 71,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 70,
                        "startColumnNumber": 42,
                        "endLineNumber": 72,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 184,
                        "startLineNumber": 70,
                        "startColumnNumber": 42,
                        "endLineNumber": 72,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 70,
                        "startColumnNumber": 34,
                        "endLineNumber": 72,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 215,
                        "startLineNumber": 70,
                        "startColumnNumber": 12,
                        "endLineNumber": 72,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 65,
                        "startColumnNumber": 31,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 990,
                        "startLineNumber": 65,
                        "startColumnNumber": 10,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 70,
                    "startColumnNumber": 42,
                    "endLineNumber": 70,
                    "endColumnNumber": 95
                },
                "nodeContext": "ResponseMessage.build(responseMessage.getRequestId())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.driver.message.ResponseMessage"
        }
    ],
    "positionList": [
        {
            "charLength": 15,
            "startLineNumber": 54,
            "startColumnNumber": 17,
            "endLineNumber": 54,
            "endColumnNumber": 32
        },
        {
            "charLength": 15,
            "startLineNumber": 58,
            "startColumnNumber": 72,
            "endLineNumber": 58,
            "endColumnNumber": 87
        },
        {
            "charLength": 15,
            "startLineNumber": 63,
            "startColumnNumber": 76,
            "endLineNumber": 63,
            "endColumnNumber": 91
        },
        {
            "charLength": 15,
            "startLineNumber": 67,
            "startColumnNumber": 99,
            "endLineNumber": 67,
            "endColumnNumber": 114
        },
        {
            "charLength": 15,
            "startLineNumber": 67,
            "startColumnNumber": 128,
            "endLineNumber": 67,
            "endColumnNumber": 143
        },
        {
            "charLength": 15,
            "startLineNumber": 70,
            "startColumnNumber": 64,
            "endLineNumber": 70,
            "endColumnNumber": 79
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 7
        }
    ]
}