{
    "id": 1629,
    "expression": "resources",
    "projectName": "nifi",
    "commitID": "fca59ff9d0226ecc4d62d078291413d2fbdb1781",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/controller/ControllerFacade.java",
    "occurrences": 21,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 757,
                "startColumnNumber": 8,
                "endLineNumber": 757,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 757,
                        "startColumnNumber": 8,
                        "endLineNumber": 757,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "resources.add(ResourceFactory.getSystemResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 757,
                        "startColumnNumber": 8,
                        "endLineNumber": 757,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "resources.add(ResourceFactory.getSystemResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 757,
                    "startColumnNumber": 8,
                    "endLineNumber": 757,
                    "endColumnNumber": 59
                },
                "nodeContext": "resources.add(ResourceFactory.getSystemResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 758,
                "startColumnNumber": 8,
                "endLineNumber": 758,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 758,
                        "startColumnNumber": 8,
                        "endLineNumber": 758,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "resources.add(ResourceFactory.getControllerResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 758,
                        "startColumnNumber": 8,
                        "endLineNumber": 758,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "resources.add(ResourceFactory.getControllerResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 758,
                    "startColumnNumber": 8,
                    "endLineNumber": 758,
                    "endColumnNumber": 63
                },
                "nodeContext": "resources.add(ResourceFactory.getControllerResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 759,
                "startColumnNumber": 8,
                "endLineNumber": 759,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 759,
                        "startColumnNumber": 8,
                        "endLineNumber": 759,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "resources.add(ResourceFactory.getFlowResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 759,
                        "startColumnNumber": 8,
                        "endLineNumber": 759,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "resources.add(ResourceFactory.getFlowResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 759,
                    "startColumnNumber": 8,
                    "endLineNumber": 759,
                    "endColumnNumber": 57
                },
                "nodeContext": "resources.add(ResourceFactory.getFlowResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 760,
                "startColumnNumber": 8,
                "endLineNumber": 760,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 760,
                        "startColumnNumber": 8,
                        "endLineNumber": 760,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "resources.add(ResourceFactory.getProvenanceResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 760,
                        "startColumnNumber": 8,
                        "endLineNumber": 760,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "resources.add(ResourceFactory.getProvenanceResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 760,
                    "startColumnNumber": 8,
                    "endLineNumber": 760,
                    "endColumnNumber": 63
                },
                "nodeContext": "resources.add(ResourceFactory.getProvenanceResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 761,
                "startColumnNumber": 8,
                "endLineNumber": 761,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 761,
                        "startColumnNumber": 8,
                        "endLineNumber": 761,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "resources.add(ResourceFactory.getProxyResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 761,
                        "startColumnNumber": 8,
                        "endLineNumber": 761,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "resources.add(ResourceFactory.getProxyResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 761,
                    "startColumnNumber": 8,
                    "endLineNumber": 761,
                    "endColumnNumber": 58
                },
                "nodeContext": "resources.add(ResourceFactory.getProxyResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 762,
                "startColumnNumber": 8,
                "endLineNumber": 762,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 762,
                        "startColumnNumber": 8,
                        "endLineNumber": 762,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "resources.add(ResourceFactory.getResourceResource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 762,
                        "startColumnNumber": 8,
                        "endLineNumber": 762,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "resources.add(ResourceFactory.getResourceResource());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 762,
                    "startColumnNumber": 8,
                    "endLineNumber": 762,
                    "endColumnNumber": 61
                },
                "nodeContext": "resources.add(ResourceFactory.getResourceResource());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 768,
                "startColumnNumber": 12,
                "endLineNumber": 768,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 768,
                        "startColumnNumber": 12,
                        "endLineNumber": 768,
                        "endColumnNumber": 135
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 768,
                        "startColumnNumber": 12,
                        "endLineNumber": 768,
                        "endColumnNumber": 136
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 767,
                        "startColumnNumber": 71,
                        "endLineNumber": 770,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n  resources.add(ResourceFactory.getDataResource(processor.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 296,
                        "startLineNumber": 767,
                        "startColumnNumber": 8,
                        "endLineNumber": 770,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ProcessorNode processor : root.findAllProcessors()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n  resources.add(ResourceFactory.getDataResource(processor.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 768,
                    "startColumnNumber": 12,
                    "endLineNumber": 768,
                    "endColumnNumber": 136
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 769,
                "startColumnNumber": 12,
                "endLineNumber": 769,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 769,
                        "startColumnNumber": 12,
                        "endLineNumber": 769,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(processor.getResource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 769,
                        "startColumnNumber": 12,
                        "endLineNumber": 769,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(processor.getResource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 767,
                        "startColumnNumber": 71,
                        "endLineNumber": 770,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n  resources.add(ResourceFactory.getDataResource(processor.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 296,
                        "startLineNumber": 767,
                        "startColumnNumber": 8,
                        "endLineNumber": 770,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ProcessorNode processor : root.findAllProcessors()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n  resources.add(ResourceFactory.getDataResource(processor.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 769,
                    "startColumnNumber": 12,
                    "endLineNumber": 769,
                    "endColumnNumber": 84
                },
                "nodeContext": "resources.add(ResourceFactory.getDataResource(processor.getResource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 774,
                "startColumnNumber": 12,
                "endLineNumber": 774,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 774,
                        "startColumnNumber": 12,
                        "endLineNumber": 774,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 774,
                        "startColumnNumber": 12,
                        "endLineNumber": 774,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 773,
                        "startColumnNumber": 55,
                        "endLineNumber": 775,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 184,
                        "startLineNumber": 773,
                        "startColumnNumber": 8,
                        "endLineNumber": 775,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Label label : root.findAllLabels()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 113,
                    "startLineNumber": 774,
                    "startColumnNumber": 12,
                    "endLineNumber": 774,
                    "endColumnNumber": 125
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 779,
                "startColumnNumber": 12,
                "endLineNumber": 779,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 132,
                        "startLineNumber": 779,
                        "startColumnNumber": 12,
                        "endLineNumber": 779,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 779,
                        "startColumnNumber": 12,
                        "endLineNumber": 779,
                        "endColumnNumber": 145
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 245,
                        "startLineNumber": 778,
                        "startColumnNumber": 76,
                        "endLineNumber": 781,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 313,
                        "startLineNumber": 778,
                        "startColumnNumber": 8,
                        "endLineNumber": 781,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ProcessGroup processGroup : root.findAllProcessGroups()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 133,
                    "startLineNumber": 779,
                    "startColumnNumber": 12,
                    "endLineNumber": 779,
                    "endColumnNumber": 145
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 780,
                "startColumnNumber": 12,
                "endLineNumber": 780,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 780,
                        "startColumnNumber": 12,
                        "endLineNumber": 780,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(processGroup.getResource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 780,
                        "startColumnNumber": 12,
                        "endLineNumber": 780,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 245,
                        "startLineNumber": 778,
                        "startColumnNumber": 76,
                        "endLineNumber": 781,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 313,
                        "startLineNumber": 778,
                        "startColumnNumber": 8,
                        "endLineNumber": 781,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ProcessGroup processGroup : root.findAllProcessGroups()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 75,
                    "startLineNumber": 780,
                    "startColumnNumber": 12,
                    "endLineNumber": 780,
                    "endColumnNumber": 87
                },
                "nodeContext": "resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 785,
                "startColumnNumber": 12,
                "endLineNumber": 785,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 150,
                        "startLineNumber": 785,
                        "startColumnNumber": 12,
                        "endLineNumber": 785,
                        "endColumnNumber": 162
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 785,
                        "startColumnNumber": 12,
                        "endLineNumber": 785,
                        "endColumnNumber": 163
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 784,
                        "startColumnNumber": 94,
                        "endLineNumber": 787,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 355,
                        "startLineNumber": 784,
                        "startColumnNumber": 8,
                        "endLineNumber": 787,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 151,
                    "startLineNumber": 785,
                    "startColumnNumber": 12,
                    "endLineNumber": 785,
                    "endColumnNumber": 163
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 786,
                "startColumnNumber": 12,
                "endLineNumber": 786,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 786,
                        "startColumnNumber": 12,
                        "endLineNumber": 786,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 786,
                        "startColumnNumber": 12,
                        "endLineNumber": 786,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 784,
                        "startColumnNumber": 94,
                        "endLineNumber": 787,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 355,
                        "startLineNumber": 784,
                        "startColumnNumber": 8,
                        "endLineNumber": 787,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n  resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 786,
                    "startColumnNumber": 12,
                    "endLineNumber": 786,
                    "endColumnNumber": 93
                },
                "nodeContext": "resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 791,
                "startColumnNumber": 12,
                "endLineNumber": 791,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 791,
                        "startColumnNumber": 12,
                        "endLineNumber": 791,
                        "endColumnNumber": 135
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 791,
                        "startColumnNumber": 12,
                        "endLineNumber": 791,
                        "endColumnNumber": 136
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 790,
                        "startColumnNumber": 62,
                        "endLineNumber": 793,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 287,
                        "startLineNumber": 790,
                        "startColumnNumber": 8,
                        "endLineNumber": 793,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Port inputPort : root.findAllInputPorts()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 791,
                    "startColumnNumber": 12,
                    "endLineNumber": 791,
                    "endColumnNumber": 136
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 792,
                "startColumnNumber": 12,
                "endLineNumber": 792,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 792,
                        "startColumnNumber": 12,
                        "endLineNumber": 792,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(inputPort.getResource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 792,
                        "startColumnNumber": 12,
                        "endLineNumber": 792,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 790,
                        "startColumnNumber": 62,
                        "endLineNumber": 793,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 287,
                        "startLineNumber": 790,
                        "startColumnNumber": 8,
                        "endLineNumber": 793,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Port inputPort : root.findAllInputPorts()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 792,
                    "startColumnNumber": 12,
                    "endLineNumber": 792,
                    "endColumnNumber": 84
                },
                "nodeContext": "resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 797,
                "startColumnNumber": 12,
                "endLineNumber": 797,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 126,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 797,
                        "endColumnNumber": 138
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 797,
                        "endColumnNumber": 139
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 237,
                        "startLineNumber": 796,
                        "startColumnNumber": 64,
                        "endLineNumber": 799,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 796,
                        "startColumnNumber": 8,
                        "endLineNumber": 799,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Port outputPort : root.findAllOutputPorts()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 127,
                    "startLineNumber": 797,
                    "startColumnNumber": 12,
                    "endLineNumber": 797,
                    "endColumnNumber": 139
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 798,
                "startColumnNumber": 12,
                "endLineNumber": 798,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 798,
                        "startColumnNumber": 12,
                        "endLineNumber": 798,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(outputPort.getResource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 798,
                        "startColumnNumber": 12,
                        "endLineNumber": 798,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 237,
                        "startLineNumber": 796,
                        "startColumnNumber": 64,
                        "endLineNumber": 799,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 796,
                        "startColumnNumber": 8,
                        "endLineNumber": 799,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Port outputPort : root.findAllOutputPorts()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n  resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 798,
                    "startColumnNumber": 12,
                    "endLineNumber": 798,
                    "endColumnNumber": 85
                },
                "nodeContext": "resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 803,
                "startColumnNumber": 12,
                "endLineNumber": 803,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 803,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 159
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 148,
                        "startLineNumber": 803,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 160
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 802,
                        "startColumnNumber": 104,
                        "endLineNumber": 804,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 268,
                        "startLineNumber": 802,
                        "startColumnNumber": 8,
                        "endLineNumber": 804,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 148,
                    "startLineNumber": 803,
                    "startColumnNumber": 12,
                    "endLineNumber": 803,
                    "endColumnNumber": 160
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 808,
                "startColumnNumber": 12,
                "endLineNumber": 808,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 135,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 808,
                        "endColumnNumber": 147
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 136,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 808,
                        "endColumnNumber": 148
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 160,
                        "startLineNumber": 807,
                        "startColumnNumber": 92,
                        "endLineNumber": 809,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 244,
                        "startLineNumber": 807,
                        "startColumnNumber": 8,
                        "endLineNumber": 809,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n  resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 136,
                    "startLineNumber": 808,
                    "startColumnNumber": 12,
                    "endLineNumber": 808,
                    "endColumnNumber": 148
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 814,
                "startColumnNumber": 12,
                "endLineNumber": 814,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 814,
                        "startColumnNumber": 12,
                        "endLineNumber": 814,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 814,
                        "startColumnNumber": 12,
                        "endLineNumber": 814,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 198,
                        "startLineNumber": 812,
                        "startColumnNumber": 64,
                        "endLineNumber": 815,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final TemplateDTO details=template.getDetails();\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 812,
                        "startColumnNumber": 8,
                        "endLineNumber": 815,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Template template : root.findAllTemplates()) {\n  final TemplateDTO details=template.getDetails();\n  resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 111,
                    "startLineNumber": 814,
                    "startColumnNumber": 12,
                    "endLineNumber": 814,
                    "endColumnNumber": 123
                },
                "nodeContext": "resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        },
        {
            "nodeContext": "resources",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 819,
                "startColumnNumber": 15,
                "endLineNumber": 819,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 819,
                        "startColumnNumber": 8,
                        "endLineNumber": 819,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "return resources;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3536,
                        "startLineNumber": 755,
                        "startColumnNumber": 41,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 363,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3573,
                        "startLineNumber": 755,
                        "startColumnNumber": 4,
                        "endLineNumber": 820,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public List<Resource> getResources(){\n  final List<Resource> resources=new ArrayList<>();\n  resources.add(ResourceFactory.getSystemResource());\n  resources.add(ResourceFactory.getControllerResource());\n  resources.add(ResourceFactory.getFlowResource());\n  resources.add(ResourceFactory.getProvenanceResource());\n  resources.add(ResourceFactory.getProxyResource());\n  resources.add(ResourceFactory.getResourceResource());\n  final ProcessGroup root=flowController.getGroup(flowController.getRootGroupId());\n  for (  final ProcessorNode processor : root.findAllProcessors()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Processor,processor.getIdentifier(),processor.getName()));\n    resources.add(ResourceFactory.getDataResource(processor.getResource()));\n  }\n  for (  final Label label : root.findAllLabels()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Label,label.getIdentifier(),label.getValue()));\n  }\n  for (  final ProcessGroup processGroup : root.findAllProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,processGroup.getIdentifier(),processGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(processGroup.getResource()));\n  }\n  for (  final RemoteProcessGroup remoteProcessGroup : root.findAllRemoteProcessGroups()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteProcessGroup.getIdentifier(),remoteProcessGroup.getName()));\n    resources.add(ResourceFactory.getDataResource(remoteProcessGroup.getResource()));\n  }\n  for (  final Port inputPort : root.findAllInputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.InputPort,inputPort.getIdentifier(),inputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(inputPort.getResource()));\n  }\n  for (  final Port outputPort : root.findAllOutputPorts()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.OutputPort,outputPort.getIdentifier(),outputPort.getName()));\n    resources.add(ResourceFactory.getDataResource(outputPort.getResource()));\n  }\n  for (  final ControllerServiceNode controllerService : flowController.getAllControllerServices()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ControllerService,controllerService.getIdentifier(),controllerService.getName()));\n  }\n  for (  final ReportingTaskNode reportingTask : flowController.getAllReportingTasks()) {\n    resources.add(ResourceFactory.getComponentResource(ResourceType.ReportingTask,reportingTask.getIdentifier(),reportingTask.getName()));\n  }\n  for (  final Template template : root.findAllTemplates()) {\n    final TemplateDTO details=template.getDetails();\n    resources.add(ResourceFactory.getComponentResource(ResourceType.Template,details.getId(),details.getName()));\n  }\n  return resources;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 819,
                    "startColumnNumber": 8,
                    "endLineNumber": 819,
                    "endColumnNumber": 25
                },
                "nodeContext": "return resources;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.nifi.authorization.Resource>"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 757,
            "startColumnNumber": 8,
            "endLineNumber": 757,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 758,
            "startColumnNumber": 8,
            "endLineNumber": 758,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 759,
            "startColumnNumber": 8,
            "endLineNumber": 759,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 760,
            "startColumnNumber": 8,
            "endLineNumber": 760,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 761,
            "startColumnNumber": 8,
            "endLineNumber": 761,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 762,
            "startColumnNumber": 8,
            "endLineNumber": 762,
            "endColumnNumber": 17
        },
        {
            "charLength": 9,
            "startLineNumber": 768,
            "startColumnNumber": 12,
            "endLineNumber": 768,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 769,
            "startColumnNumber": 12,
            "endLineNumber": 769,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 774,
            "startColumnNumber": 12,
            "endLineNumber": 774,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 779,
            "startColumnNumber": 12,
            "endLineNumber": 779,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 780,
            "startColumnNumber": 12,
            "endLineNumber": 780,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 785,
            "startColumnNumber": 12,
            "endLineNumber": 785,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 786,
            "startColumnNumber": 12,
            "endLineNumber": 786,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 791,
            "startColumnNumber": 12,
            "endLineNumber": 791,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 792,
            "startColumnNumber": 12,
            "endLineNumber": 792,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 797,
            "startColumnNumber": 12,
            "endLineNumber": 797,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 798,
            "startColumnNumber": 12,
            "endLineNumber": 798,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 803,
            "startColumnNumber": 12,
            "endLineNumber": 803,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 808,
            "startColumnNumber": 12,
            "endLineNumber": 808,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 814,
            "startColumnNumber": 12,
            "endLineNumber": 814,
            "endColumnNumber": 21
        },
        {
            "charLength": 9,
            "startLineNumber": 819,
            "startColumnNumber": 15,
            "endLineNumber": 819,
            "endColumnNumber": 24
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 1
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 1
        }
    ]
}