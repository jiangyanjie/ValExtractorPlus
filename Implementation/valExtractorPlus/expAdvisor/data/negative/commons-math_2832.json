{
    "id": 2832,
    "expression": "lu[i][col]",
    "projectName": "commons-math",
    "commitID": "57e0c33a52a0f1e641161e6bf1278e63ee6384cc",
    "filePath": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "lu[i][col]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 983,
                "startColumnNumber": 69,
                "endLineNumber": 983,
                "endColumnNumber": 79
            },
            "astNodeNumber": 5,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 983,
                        "startColumnNumber": 49,
                        "endLineNumber": 983,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "bp[col][j].multiply(lu[i][col])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 983,
                        "startColumnNumber": 31,
                        "endLineNumber": 983,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "bp[i][j].subtract(bp[col][j].multiply(lu[i][col]))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 983,
                        "startColumnNumber": 20,
                        "endLineNumber": 983,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]))",
                    "nodeType": "Assignment",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 983,
                        "startColumnNumber": 20,
                        "endLineNumber": 983,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 982,
                        "startColumnNumber": 48,
                        "endLineNumber": 984,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 134,
                        "startLineNumber": 982,
                        "startColumnNumber": 16,
                        "endLineNumber": 984,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int j=0; j < nColB; j++) {\n  bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 38,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 166,
                        "startLineNumber": 981,
                        "startColumnNumber": 49,
                        "endLineNumber": 985,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  for (int j=0; j < nColB; j++) {\n    bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 39,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 203,
                        "startLineNumber": 981,
                        "startColumnNumber": 12,
                        "endLineNumber": 985,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=col + 1; i < nCol; i++) {\n  for (int j=0; j < nColB; j++) {\n    bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 52,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 227,
                        "startLineNumber": 980,
                        "startColumnNumber": 45,
                        "endLineNumber": 986,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int i=col + 1; i < nCol; i++) {\n    for (int j=0; j < nColB; j++) {\n      bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 53,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 264,
                        "startLineNumber": 980,
                        "startColumnNumber": 8,
                        "endLineNumber": 986,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCol; col++) {\n  for (int i=col + 1; i < nCol; i++) {\n    for (int j=0; j < nColB; j++) {\n      bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 64,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 62,
                    "startLineNumber": 983,
                    "startColumnNumber": 20,
                    "endLineNumber": 983,
                    "endColumnNumber": 82
                },
                "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 26,
                "astHeight": 7
            },
            "tokenLength": 3,
            "type": "java.math.BigDecimal"
        },
        {
            "nodeContext": "lu[i][col]",
            "nodeType": "ArrayAccess",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 995,
                "startColumnNumber": 69,
                "endLineNumber": 995,
                "endColumnNumber": 79
            },
            "astNodeNumber": 5,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 995,
                        "startColumnNumber": 49,
                        "endLineNumber": 995,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "bp[col][j].multiply(lu[i][col])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 995,
                        "startColumnNumber": 31,
                        "endLineNumber": 995,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "bp[i][j].subtract(bp[col][j].multiply(lu[i][col]))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 995,
                        "startColumnNumber": 20,
                        "endLineNumber": 995,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]))",
                    "nodeType": "Assignment",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 995,
                        "startColumnNumber": 20,
                        "endLineNumber": 995,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 994,
                        "startColumnNumber": 48,
                        "endLineNumber": 996,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 134,
                        "startLineNumber": 994,
                        "startColumnNumber": 16,
                        "endLineNumber": 996,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int j=0; j < nColB; j++) {\n  bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 38,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 166,
                        "startLineNumber": 993,
                        "startColumnNumber": 42,
                        "endLineNumber": 997,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  for (int j=0; j < nColB; j++) {\n    bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 39,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 196,
                        "startLineNumber": 993,
                        "startColumnNumber": 12,
                        "endLineNumber": 997,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=0; i < col; i++) {\n  for (int j=0; j < nColB; j++) {\n    bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 363,
                        "startLineNumber": 989,
                        "startColumnNumber": 50,
                        "endLineNumber": 998,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int j=0; j < nColB; j++) {\n    bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n  }\n  for (int i=0; i < col; i++) {\n    for (int j=0; j < nColB; j++) {\n      bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 84,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 405,
                        "startLineNumber": 989,
                        "startColumnNumber": 8,
                        "endLineNumber": 998,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=nCol - 1; col >= 0; col--) {\n  for (int j=0; j < nColB; j++) {\n    bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n  }\n  for (int i=0; i < col; i++) {\n    for (int j=0; j < nColB; j++) {\n      bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 97,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1694,
                        "startLineNumber": 956,
                        "startColumnNumber": 97,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2273,
                        "startLineNumber": 945,
                        "startColumnNumber": 4,
                        "endLineNumber": 1002,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns a matrix of (column) solution vectors for linear systems with coefficient matrix = this and constant vectors = columns of <code>b</code>. \n * @param b  matrix of constant vectors forming RHS of linear systems toto solve\n * @return matrix of solution vectors\n * @throws IllegalArgumentException if this.rowDimension != row dimension\n * @throws InvalidMatrixException if this matrix is not square or is singular\n */\npublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException {\n  if (b.getRowDimension() != this.getRowDimension()) {\n    throw new IllegalArgumentException(\"Incorrect row dimension\");\n  }\n  if (!this.isSquare()) {\n    throw new InvalidMatrixException(\"coefficient matrix is not square\");\n  }\n  if (this.isSingular()) {\n    throw new InvalidMatrixException(\"Matrix is singular.\");\n  }\n  int nCol=this.getColumnDimension();\n  int nColB=b.getColumnDimension();\n  int nRowB=b.getRowDimension();\n  BigDecimal[][] bp=new BigDecimal[nRowB][nColB];\n  for (int row=0; row < nRowB; row++) {\n    for (int col=0; col < nColB; col++) {\n      bp[row][col]=b.getEntry(permutation[row],col);\n    }\n  }\n  for (int col=0; col < nCol; col++) {\n    for (int i=col + 1; i < nCol; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  for (int col=nCol - 1; col >= 0; col--) {\n    for (int j=0; j < nColB; j++) {\n      bp[col][j]=bp[col][j].divide(lu[col][col],scale,roundingMode);\n    }\n    for (int i=0; i < col; i++) {\n      for (int j=0; j < nColB; j++) {\n        bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n      }\n    }\n  }\n  BigMatrixImpl outMat=new BigMatrixImpl(bp);\n  return outMat;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 297,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 62,
                    "startLineNumber": 995,
                    "startColumnNumber": 20,
                    "endLineNumber": 995,
                    "endColumnNumber": 82
                },
                "nodeContext": "bp[i][j]=bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 26,
                "astHeight": 7
            },
            "tokenLength": 3,
            "type": "java.math.BigDecimal"
        }
    ],
    "positionList": [
        {
            "charLength": 10,
            "startLineNumber": 983,
            "startColumnNumber": 69,
            "endLineNumber": 983,
            "endColumnNumber": 79
        },
        {
            "charLength": 10,
            "startLineNumber": 995,
            "startColumnNumber": 69,
            "endLineNumber": 995,
            "endColumnNumber": 79
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 10
        }
    ]
}