{
    "id": 1233,
    "expression": "reportingTaskEntity.getComponent().getId() != null",
    "projectName": "nifi",
    "commitID": "2a92747046b39d7b3f7604258c1d3bb81a9447bd",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "reportingTaskEntity.getComponent().getId() != null",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 50,
                "startLineNumber": 259,
                "startColumnNumber": 12,
                "endLineNumber": 259,
                "endColumnNumber": 62
            },
            "astNodeNumber": 7,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 157,
                        "startLineNumber": 259,
                        "startColumnNumber": 8,
                        "endLineNumber": 261,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity.getComponent().getId() != null) {\n  throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 157,
                    "startLineNumber": 259,
                    "startColumnNumber": 8,
                    "endLineNumber": 261,
                    "endColumnNumber": 9
                },
                "nodeContext": "if (reportingTaskEntity.getComponent().getId() != null) {\n  throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n}\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 5,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 50,
            "startLineNumber": 259,
            "startColumnNumber": 12,
            "endLineNumber": 259,
            "endColumnNumber": 62
        }
    ],
    "layoutRelationDataList": []
}