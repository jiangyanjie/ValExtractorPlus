{
    "id": 474,
    "expression": "NumericRangeQuery",
    "projectName": "jackrabbit-oak",
    "commitID": "709a2719ed5108b9972cdd0ce55d2e53ad705884",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
    "occurrences": 18,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1113,
                "startColumnNumber": 27,
                "endLineNumber": 1113,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1113,
                        "startColumnNumber": 27,
                        "endLineNumber": 1113,
                        "endColumnNumber": 100
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 1113,
                        "startColumnNumber": 20,
                        "endLineNumber": 1113,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 163,
                        "startLineNumber": 1111,
                        "startColumnNumber": 45,
                        "endLineNumber": 1114,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 1113,
                    "startColumnNumber": 20,
                    "endLineNumber": 1113,
                    "endColumnNumber": 101
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1115,
                "startColumnNumber": 27,
                "endLineNumber": 1115,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 1115,
                        "startColumnNumber": 27,
                        "endLineNumber": 1116,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 1115,
                        "startColumnNumber": 20,
                        "endLineNumber": 1116,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 1114,
                        "startColumnNumber": 64,
                        "endLineNumber": 1117,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1342,
                        "startLineNumber": 1114,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 161,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                "nodePosition": {
                    "charLength": 125,
                    "startLineNumber": 1115,
                    "startColumnNumber": 27,
                    "endLineNumber": 1116,
                    "endColumnNumber": 64
                },
                "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1119,
                "startColumnNumber": 27,
                "endLineNumber": 1119,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 1119,
                        "startColumnNumber": 27,
                        "endLineNumber": 1119,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 1119,
                        "startColumnNumber": 20,
                        "endLineNumber": 1119,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 1117,
                        "startColumnNumber": 64,
                        "endLineNumber": 1120,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1122,
                        "startLineNumber": 1117,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 133,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1342,
                        "startLineNumber": 1114,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 161,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 93,
                    "startLineNumber": 1119,
                    "startColumnNumber": 20,
                    "endLineNumber": 1119,
                    "endColumnNumber": 113
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1122,
                "startColumnNumber": 27,
                "endLineNumber": 1122,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 1122,
                        "startColumnNumber": 27,
                        "endLineNumber": 1122,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1122,
                        "startColumnNumber": 20,
                        "endLineNumber": 1122,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 1120,
                        "startColumnNumber": 73,
                        "endLineNumber": 1123,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 898,
                        "startLineNumber": 1120,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 107,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1122,
                        "startLineNumber": 1117,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 133,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1342,
                        "startLineNumber": 1114,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 161,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 91,
                    "startLineNumber": 1122,
                    "startColumnNumber": 20,
                    "endLineNumber": 1122,
                    "endColumnNumber": 111
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1127,
                "startColumnNumber": 31,
                "endLineNumber": 1127,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 1127,
                        "startColumnNumber": 31,
                        "endLineNumber": 1127,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 1127,
                        "startColumnNumber": 24,
                        "endLineNumber": 1127,
                        "endColumnNumber": 137
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 1127,
                        "startColumnNumber": 24,
                        "endLineNumber": 1127,
                        "endColumnNumber": 138
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 253,
                        "startLineNumber": 1125,
                        "startColumnNumber": 56,
                        "endLineNumber": 1128,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 289,
                        "startLineNumber": 1125,
                        "startColumnNumber": 20,
                        "endLineNumber": 1128,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (PropertyValue value : pr.list) {\n  Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 42,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 1123,
                        "startColumnNumber": 44,
                        "endLineNumber": 1130,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 53,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 677,
                        "startLineNumber": 1123,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 77,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 898,
                        "startLineNumber": 1120,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 107,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1122,
                        "startLineNumber": 1117,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 133,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1342,
                        "startLineNumber": 1114,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 161,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 1127,
                    "startColumnNumber": 24,
                    "endLineNumber": 1127,
                    "endColumnNumber": 138
                },
                "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 19,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1132,
                "startColumnNumber": 27,
                "endLineNumber": 1132,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 1132,
                        "startColumnNumber": 27,
                        "endLineNumber": 1132,
                        "endColumnNumber": 106
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 1132,
                        "startColumnNumber": 20,
                        "endLineNumber": 1132,
                        "endColumnNumber": 107
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 201,
                        "startLineNumber": 1130,
                        "startColumnNumber": 54,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 1130,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 677,
                        "startLineNumber": 1123,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 77,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 898,
                        "startLineNumber": 1120,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 107,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1122,
                        "startLineNumber": 1117,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 133,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1342,
                        "startLineNumber": 1114,
                        "startColumnNumber": 23,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 161,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1626,
                        "startLineNumber": 1110,
                        "startColumnNumber": 16,
                        "endLineNumber": 1133,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 196,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1899,
                        "startLineNumber": 1107,
                        "startColumnNumber": 36,
                        "endLineNumber": 1136,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 244,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 87,
                    "startLineNumber": 1132,
                    "startColumnNumber": 20,
                    "endLineNumber": 1132,
                    "endColumnNumber": 107
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1143,
                "startColumnNumber": 27,
                "endLineNumber": 1143,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 1143,
                        "startColumnNumber": 27,
                        "endLineNumber": 1143,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 1143,
                        "startColumnNumber": 20,
                        "endLineNumber": 1143,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 1141,
                        "startColumnNumber": 45,
                        "endLineNumber": 1144,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 1143,
                    "startColumnNumber": 20,
                    "endLineNumber": 1143,
                    "endColumnNumber": 103
                },
                "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1145,
                "startColumnNumber": 27,
                "endLineNumber": 1145,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 1145,
                        "startColumnNumber": 27,
                        "endLineNumber": 1146,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 135,
                        "startLineNumber": 1145,
                        "startColumnNumber": 20,
                        "endLineNumber": 1146,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 1144,
                        "startColumnNumber": 64,
                        "endLineNumber": 1147,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1312,
                        "startLineNumber": 1144,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 160,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                "nodePosition": {
                    "charLength": 127,
                    "startLineNumber": 1145,
                    "startColumnNumber": 27,
                    "endLineNumber": 1146,
                    "endColumnNumber": 64
                },
                "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1149,
                "startColumnNumber": 27,
                "endLineNumber": 1149,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 1149,
                        "startColumnNumber": 27,
                        "endLineNumber": 1149,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 1149,
                        "startColumnNumber": 20,
                        "endLineNumber": 1149,
                        "endColumnNumber": 115
                    },
                    "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 1147,
                        "startColumnNumber": 64,
                        "endLineNumber": 1150,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1090,
                        "startLineNumber": 1147,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 132,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1312,
                        "startLineNumber": 1144,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 160,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 95,
                    "startLineNumber": 1149,
                    "startColumnNumber": 20,
                    "endLineNumber": 1149,
                    "endColumnNumber": 115
                },
                "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1152,
                "startColumnNumber": 27,
                "endLineNumber": 1152,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 1152,
                        "startColumnNumber": 27,
                        "endLineNumber": 1152,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 1152,
                        "startColumnNumber": 20,
                        "endLineNumber": 1152,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 167,
                        "startLineNumber": 1150,
                        "startColumnNumber": 73,
                        "endLineNumber": 1153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 864,
                        "startLineNumber": 1150,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 106,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1090,
                        "startLineNumber": 1147,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 132,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1312,
                        "startLineNumber": 1144,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 160,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 93,
                    "startLineNumber": 1152,
                    "startColumnNumber": 20,
                    "endLineNumber": 1152,
                    "endColumnNumber": 113
                },
                "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1157,
                "startColumnNumber": 31,
                "endLineNumber": 1157,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 1157,
                        "startColumnNumber": 31,
                        "endLineNumber": 1157,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 119,
                        "startLineNumber": 1157,
                        "startColumnNumber": 24,
                        "endLineNumber": 1157,
                        "endColumnNumber": 143
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 120,
                        "startLineNumber": 1157,
                        "startColumnNumber": 24,
                        "endLineNumber": 1157,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 240,
                        "startLineNumber": 1155,
                        "startColumnNumber": 56,
                        "endLineNumber": 1158,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Double doubleVal=value.getValue(Type.DOUBLE);\n  in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 276,
                        "startLineNumber": 1155,
                        "startColumnNumber": 20,
                        "endLineNumber": 1158,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (PropertyValue value : pr.list) {\n  Double doubleVal=value.getValue(Type.DOUBLE);\n  in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 39,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 405,
                        "startLineNumber": 1153,
                        "startColumnNumber": 44,
                        "endLineNumber": 1160,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 50,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 641,
                        "startLineNumber": 1153,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 864,
                        "startLineNumber": 1150,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 106,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1090,
                        "startLineNumber": 1147,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 132,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1312,
                        "startLineNumber": 1144,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 160,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 120,
                    "startLineNumber": 1157,
                    "startColumnNumber": 24,
                    "endLineNumber": 1157,
                    "endColumnNumber": 144
                },
                "nodeContext": "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 19,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1162,
                "startColumnNumber": 27,
                "endLineNumber": 1162,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 1162,
                        "startColumnNumber": 27,
                        "endLineNumber": 1162,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 1162,
                        "startColumnNumber": 20,
                        "endLineNumber": 1162,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 178,
                        "startLineNumber": 1160,
                        "startColumnNumber": 54,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 209,
                        "startLineNumber": 1160,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 641,
                        "startLineNumber": 1153,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 864,
                        "startLineNumber": 1150,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 106,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1090,
                        "startLineNumber": 1147,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 132,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1312,
                        "startLineNumber": 1144,
                        "startColumnNumber": 23,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 160,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 1140,
                        "startColumnNumber": 16,
                        "endLineNumber": 1163,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 195,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1828,
                        "startLineNumber": 1137,
                        "startColumnNumber": 38,
                        "endLineNumber": 1165,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 237,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 105,
                    "startLineNumber": 1162,
                    "startColumnNumber": 20,
                    "endLineNumber": 1162,
                    "endColumnNumber": 125
                },
                "nodeContext": "return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 15,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1172,
                "startColumnNumber": 27,
                "endLineNumber": 1172,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 1172,
                        "startColumnNumber": 27,
                        "endLineNumber": 1172,
                        "endColumnNumber": 100
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 1172,
                        "startColumnNumber": 20,
                        "endLineNumber": 1172,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 163,
                        "startLineNumber": 1170,
                        "startColumnNumber": 45,
                        "endLineNumber": 1173,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 1172,
                    "startColumnNumber": 20,
                    "endLineNumber": 1172,
                    "endColumnNumber": 101
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1174,
                "startColumnNumber": 27,
                "endLineNumber": 1174,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 1174,
                        "startColumnNumber": 27,
                        "endLineNumber": 1175,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 1174,
                        "startColumnNumber": 20,
                        "endLineNumber": 1175,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 1173,
                        "startColumnNumber": 64,
                        "endLineNumber": 1176,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1283,
                        "startLineNumber": 1173,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 158,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                "nodePosition": {
                    "charLength": 125,
                    "startLineNumber": 1174,
                    "startColumnNumber": 27,
                    "endLineNumber": 1175,
                    "endColumnNumber": 64
                },
                "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 14,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1178,
                "startColumnNumber": 27,
                "endLineNumber": 1178,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 1178,
                        "startColumnNumber": 27,
                        "endLineNumber": 1178,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 1178,
                        "startColumnNumber": 20,
                        "endLineNumber": 1178,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 1176,
                        "startColumnNumber": 64,
                        "endLineNumber": 1179,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1063,
                        "startLineNumber": 1176,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 130,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1283,
                        "startLineNumber": 1173,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 158,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 93,
                    "startLineNumber": 1178,
                    "startColumnNumber": 20,
                    "endLineNumber": 1178,
                    "endColumnNumber": 113
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1181,
                "startColumnNumber": 27,
                "endLineNumber": 1181,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 1181,
                        "startColumnNumber": 27,
                        "endLineNumber": 1181,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1181,
                        "startColumnNumber": 20,
                        "endLineNumber": 1181,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 1179,
                        "startColumnNumber": 73,
                        "endLineNumber": 1182,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 839,
                        "startLineNumber": 1179,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1063,
                        "startLineNumber": 1176,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 130,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1283,
                        "startLineNumber": 1173,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 158,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 91,
                    "startLineNumber": 1181,
                    "startColumnNumber": 20,
                    "endLineNumber": 1181,
                    "endColumnNumber": 111
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 13,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1186,
                "startColumnNumber": 31,
                "endLineNumber": 1186,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 1186,
                        "startColumnNumber": 31,
                        "endLineNumber": 1186,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 1186,
                        "startColumnNumber": 24,
                        "endLineNumber": 1186,
                        "endColumnNumber": 137
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 1186,
                        "startColumnNumber": 24,
                        "endLineNumber": 1186,
                        "endColumnNumber": 138
                    },
                    "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 223,
                        "startLineNumber": 1184,
                        "startColumnNumber": 56,
                        "endLineNumber": 1187,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Long longVal=value.getValue(LONG);\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 259,
                        "startLineNumber": 1184,
                        "startColumnNumber": 20,
                        "endLineNumber": 1187,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (PropertyValue value : pr.list) {\n  Long longVal=value.getValue(LONG);\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 37,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 388,
                        "startLineNumber": 1182,
                        "startColumnNumber": 44,
                        "endLineNumber": 1189,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 618,
                        "startLineNumber": 1182,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 839,
                        "startLineNumber": 1179,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1063,
                        "startLineNumber": 1176,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 130,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1283,
                        "startLineNumber": 1173,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 158,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 1186,
                    "startColumnNumber": 24,
                    "endLineNumber": 1186,
                    "endColumnNumber": 138
                },
                "nodeContext": "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 19,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": null
        },
        {
            "nodeContext": "NumericRangeQuery",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 1191,
                "startColumnNumber": 27,
                "endLineNumber": 1191,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 1191,
                        "startColumnNumber": 27,
                        "endLineNumber": 1191,
                        "endColumnNumber": 118
                    },
                    "nodeContext": "NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 1191,
                        "startColumnNumber": 20,
                        "endLineNumber": 1191,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 1189,
                        "startColumnNumber": 54,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 203,
                        "startLineNumber": 1189,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 618,
                        "startLineNumber": 1182,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 839,
                        "startLineNumber": 1179,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1063,
                        "startLineNumber": 1176,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 130,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1283,
                        "startLineNumber": 1173,
                        "startColumnNumber": 23,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 158,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1567,
                        "startLineNumber": 1169,
                        "startColumnNumber": 16,
                        "endLineNumber": 1192,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 193,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 1779,
                        "startLineNumber": 1166,
                        "startColumnNumber": 36,
                        "endLineNumber": 1194,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 231,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7531,
                        "startLineNumber": 1106,
                        "startColumnNumber": 8,
                        "endLineNumber": 1227,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 970,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8125,
                        "startLineNumber": 1093,
                        "startColumnNumber": 62,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1028,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8262,
                        "startLineNumber": 1091,
                        "startColumnNumber": 4,
                        "endLineNumber": 1229,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1044,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 99,
                    "startLineNumber": 1191,
                    "startColumnNumber": 20,
                    "endLineNumber": 1191,
                    "endColumnNumber": 119
                },
                "nodeContext": "return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 15,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": null
        }
    ],
    "positionList": [
        {
            "charLength": 17,
            "startLineNumber": 1113,
            "startColumnNumber": 27,
            "endLineNumber": 1113,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1115,
            "startColumnNumber": 27,
            "endLineNumber": 1115,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1119,
            "startColumnNumber": 27,
            "endLineNumber": 1119,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1122,
            "startColumnNumber": 27,
            "endLineNumber": 1122,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1127,
            "startColumnNumber": 31,
            "endLineNumber": 1127,
            "endColumnNumber": 48
        },
        {
            "charLength": 17,
            "startLineNumber": 1132,
            "startColumnNumber": 27,
            "endLineNumber": 1132,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1143,
            "startColumnNumber": 27,
            "endLineNumber": 1143,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1145,
            "startColumnNumber": 27,
            "endLineNumber": 1145,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1149,
            "startColumnNumber": 27,
            "endLineNumber": 1149,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1152,
            "startColumnNumber": 27,
            "endLineNumber": 1152,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1157,
            "startColumnNumber": 31,
            "endLineNumber": 1157,
            "endColumnNumber": 48
        },
        {
            "charLength": 17,
            "startLineNumber": 1162,
            "startColumnNumber": 27,
            "endLineNumber": 1162,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1172,
            "startColumnNumber": 27,
            "endLineNumber": 1172,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1174,
            "startColumnNumber": 27,
            "endLineNumber": 1174,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1178,
            "startColumnNumber": 27,
            "endLineNumber": 1178,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1181,
            "startColumnNumber": 27,
            "endLineNumber": 1181,
            "endColumnNumber": 44
        },
        {
            "charLength": 17,
            "startLineNumber": 1186,
            "startColumnNumber": 31,
            "endLineNumber": 1186,
            "endColumnNumber": 48
        },
        {
            "charLength": 17,
            "startLineNumber": 1191,
            "startColumnNumber": 27,
            "endLineNumber": 1191,
            "endColumnNumber": 44
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 12
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 4
        }
    ]
}