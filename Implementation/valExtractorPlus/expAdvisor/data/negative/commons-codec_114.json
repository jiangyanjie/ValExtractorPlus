{
    "id": 114,
    "expression": "l_ascii",
    "projectName": "commons-codec",
    "commitID": "d720e8797233b467f17dc7ebdddfe482d08a374a",
    "filePath": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "l_ascii",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 191,
                "startColumnNumber": 30,
                "endLineNumber": 191,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 191,
                        "startColumnNumber": 30,
                        "endLineNumber": 191,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "l_ascii.length",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 191,
                        "startColumnNumber": 30,
                        "endLineNumber": 191,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "l_ascii.length - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 191,
                        "startColumnNumber": 25,
                        "endLineNumber": 191,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "jj=l_ascii.length - 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 191,
                        "startColumnNumber": 13,
                        "endLineNumber": 191,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "int ii=0, jj=l_ascii.length - 1",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 354,
                        "startLineNumber": 191,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if ((raw[ii] & BITS[bits]) == 0) {\n      l_ascii[jj - bits]='0';\n    }\n else {\n      l_ascii[jj - bits]='1';\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 67,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 772,
                        "startLineNumber": 181,
                        "startColumnNumber": 56,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 93,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1156,
                        "startLineNumber": 173,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n * @param raw the raw binary data to convert\n * @return an array of 0 and 1 characters for each bit of the argument\n * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n */\npublic static char[] toAsciiChars(final byte[] raw){\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 107,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 191,
                    "startColumnNumber": 13,
                    "endLineNumber": 191,
                    "endColumnNumber": 48
                },
                "nodeContext": "int ii=0, jj=l_ascii.length - 1",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "char[]"
        },
        {
            "nodeContext": "l_ascii",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 194,
                "startColumnNumber": 20,
                "endLineNumber": 194,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 194,
                        "startColumnNumber": 20,
                        "endLineNumber": 194,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "l_ascii[jj - bits]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 194,
                        "startColumnNumber": 20,
                        "endLineNumber": 194,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "l_ascii[jj - bits]='0'",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 194,
                        "startColumnNumber": 20,
                        "endLineNumber": 194,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "l_ascii[jj - bits]='0';\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 193,
                        "startColumnNumber": 49,
                        "endLineNumber": 195,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  l_ascii[jj - bits]='0';\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 193,
                        "startColumnNumber": 16,
                        "endLineNumber": 197,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if ((raw[ii] & BITS[bits]) == 0) {\n  l_ascii[jj - bits]='0';\n}\n else {\n  l_ascii[jj - bits]='1';\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 207,
                        "startLineNumber": 192,
                        "startColumnNumber": 59,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if ((raw[ii] & BITS[bits]) == 0) {\n    l_ascii[jj - bits]='0';\n  }\n else {\n    l_ascii[jj - bits]='1';\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 192,
                        "startColumnNumber": 12,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int bits=0; bits < BITS.length; ++bits) {\n  if ((raw[ii] & BITS[bits]) == 0) {\n    l_ascii[jj - bits]='0';\n  }\n else {\n    l_ascii[jj - bits]='1';\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 280,
                        "startLineNumber": 191,
                        "startColumnNumber": 82,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if ((raw[ii] & BITS[bits]) == 0) {\n      l_ascii[jj - bits]='0';\n    }\n else {\n      l_ascii[jj - bits]='1';\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 44,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 354,
                        "startLineNumber": 191,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if ((raw[ii] & BITS[bits]) == 0) {\n      l_ascii[jj - bits]='0';\n    }\n else {\n      l_ascii[jj - bits]='1';\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 67,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 772,
                        "startLineNumber": 181,
                        "startColumnNumber": 56,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 93,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1156,
                        "startLineNumber": 173,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n * @param raw the raw binary data to convert\n * @return an array of 0 and 1 characters for each bit of the argument\n * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n */\npublic static char[] toAsciiChars(final byte[] raw){\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 107,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 194,
                    "startColumnNumber": 20,
                    "endLineNumber": 194,
                    "endColumnNumber": 45
                },
                "nodeContext": "l_ascii[jj - bits]='0';\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "char[]"
        },
        {
            "nodeContext": "l_ascii",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 196,
                "startColumnNumber": 20,
                "endLineNumber": 196,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 196,
                        "startColumnNumber": 20,
                        "endLineNumber": 196,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "l_ascii[jj - bits]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 196,
                        "startColumnNumber": 20,
                        "endLineNumber": 196,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "l_ascii[jj - bits]='1'",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 196,
                        "startColumnNumber": 20,
                        "endLineNumber": 196,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "l_ascii[jj - bits]='1';\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 195,
                        "startColumnNumber": 23,
                        "endLineNumber": 197,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  l_ascii[jj - bits]='1';\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 193,
                        "startColumnNumber": 16,
                        "endLineNumber": 197,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if ((raw[ii] & BITS[bits]) == 0) {\n  l_ascii[jj - bits]='0';\n}\n else {\n  l_ascii[jj - bits]='1';\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 207,
                        "startLineNumber": 192,
                        "startColumnNumber": 59,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if ((raw[ii] & BITS[bits]) == 0) {\n    l_ascii[jj - bits]='0';\n  }\n else {\n    l_ascii[jj - bits]='1';\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 30,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 192,
                        "startColumnNumber": 12,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int bits=0; bits < BITS.length; ++bits) {\n  if ((raw[ii] & BITS[bits]) == 0) {\n    l_ascii[jj - bits]='0';\n  }\n else {\n    l_ascii[jj - bits]='1';\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 280,
                        "startLineNumber": 191,
                        "startColumnNumber": 82,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if ((raw[ii] & BITS[bits]) == 0) {\n      l_ascii[jj - bits]='0';\n    }\n else {\n      l_ascii[jj - bits]='1';\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 44,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 354,
                        "startLineNumber": 191,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if ((raw[ii] & BITS[bits]) == 0) {\n      l_ascii[jj - bits]='0';\n    }\n else {\n      l_ascii[jj - bits]='1';\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 67,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 772,
                        "startLineNumber": 181,
                        "startColumnNumber": 56,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 93,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1156,
                        "startLineNumber": 173,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n * @param raw the raw binary data to convert\n * @return an array of 0 and 1 characters for each bit of the argument\n * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n */\npublic static char[] toAsciiChars(final byte[] raw){\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 107,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 196,
                    "startColumnNumber": 20,
                    "endLineNumber": 196,
                    "endColumnNumber": 45
                },
                "nodeContext": "l_ascii[jj - bits]='1';\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "char[]"
        },
        {
            "nodeContext": "l_ascii",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 200,
                "startColumnNumber": 15,
                "endLineNumber": 200,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 200,
                        "startColumnNumber": 8,
                        "endLineNumber": 200,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "return l_ascii;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 772,
                        "startLineNumber": 181,
                        "startColumnNumber": 56,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 93,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1156,
                        "startLineNumber": 173,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n * @param raw the raw binary data to convert\n * @return an array of 0 and 1 characters for each bit of the argument\n * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n */\npublic static char[] toAsciiChars(final byte[] raw){\n  if (isEmpty(raw)) {\n    return EMPTY_CHAR_ARRAY;\n  }\n  final char[] l_ascii=new char[raw.length << 3];\n  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if ((raw[ii] & BITS[bits]) == 0) {\n        l_ascii[jj - bits]='0';\n      }\n else {\n        l_ascii[jj - bits]='1';\n      }\n    }\n  }\n  return l_ascii;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 107,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 200,
                    "startColumnNumber": 8,
                    "endLineNumber": 200,
                    "endColumnNumber": 23
                },
                "nodeContext": "return l_ascii;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 2,
            "type": "char[]"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 191,
            "startColumnNumber": 30,
            "endLineNumber": 191,
            "endColumnNumber": 37
        },
        {
            "charLength": 7,
            "startLineNumber": 194,
            "startColumnNumber": 20,
            "endLineNumber": 194,
            "endColumnNumber": 27
        },
        {
            "charLength": 7,
            "startLineNumber": 196,
            "startColumnNumber": 20,
            "endLineNumber": 196,
            "endColumnNumber": 27
        },
        {
            "charLength": 7,
            "startLineNumber": 200,
            "startColumnNumber": 15,
            "endLineNumber": 200,
            "endColumnNumber": 22
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 1
        }
    ]
}