{
    "id": 1793,
    "expression": "JCR_PRIMARYTYPE",
    "projectName": "jackrabbit-oak",
    "commitID": "aa5687fbff0d7acbad4c3e30ea586a8ab02bf72e",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeTemplateImpl.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "JCR_PRIMARYTYPE",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 142,
                "startColumnNumber": 25,
                "endLineNumber": 142,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 142,
                        "startColumnNumber": 8,
                        "endLineNumber": 142,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 142,
                        "startColumnNumber": 8,
                        "endLineNumber": 142,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2357,
                        "startLineNumber": 128,
                        "startColumnNumber": 78,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 213,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2948,
                        "startLineNumber": 117,
                        "startColumnNumber": 4,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes this node type as an  {@code nt:nodeType} child of the givenparent node. An exception is thrown if the child node already exists, unless the  {@code allowUpdate} flag is set, in which case the existingnode is overwritten.\n * @param parent parent node under which to write this node type\n * @param allowUpdate whether to overwrite an existing type\n * @return The node type tree.\n * @throws RepositoryException if this type could not be written\n */\nTree writeTo(Tree parent,boolean allowUpdate) throws RepositoryException {\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 227,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 142,
                    "startColumnNumber": 8,
                    "endLineNumber": 142,
                    "endColumnNumber": 66
                },
                "nodeContext": "type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": null
        },
        {
            "nodeContext": "JCR_PRIMARYTYPE",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 172,
                "startColumnNumber": 24,
                "endLineNumber": 172,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 171,
                        "startColumnNumber": 16,
                        "endLineNumber": 172,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 171,
                        "startColumnNumber": 16,
                        "endLineNumber": 172,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 247,
                        "startLineNumber": 169,
                        "startColumnNumber": 83,
                        "endLineNumber": 174,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n  tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n  pdt.writeTo(tree);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 318,
                        "startLineNumber": 169,
                        "startColumnNumber": 12,
                        "endLineNumber": 174,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n  Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n  tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n  pdt.writeTo(tree);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 35,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 367,
                        "startLineNumber": 167,
                        "startColumnNumber": 49,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int pdn=1;\n  for (  PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n    Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n    tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n    pdt.writeTo(tree);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 408,
                        "startLineNumber": 167,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyDefinitionTemplates != null) {\n  int pdn=1;\n  for (  PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n    Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n    tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n    pdt.writeTo(tree);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2357,
                        "startLineNumber": 128,
                        "startColumnNumber": 78,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 213,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2948,
                        "startLineNumber": 117,
                        "startColumnNumber": 4,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes this node type as an  {@code nt:nodeType} child of the givenparent node. An exception is thrown if the child node already exists, unless the  {@code allowUpdate} flag is set, in which case the existingnode is overwritten.\n * @param parent parent node under which to write this node type\n * @param allowUpdate whether to overwrite an existing type\n * @return The node type tree.\n * @throws RepositoryException if this type could not be written\n */\nTree writeTo(Tree parent,boolean allowUpdate) throws RepositoryException {\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 227,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 92,
                    "startLineNumber": 171,
                    "startColumnNumber": 16,
                    "endLineNumber": 172,
                    "endColumnNumber": 74
                },
                "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": null
        },
        {
            "nodeContext": "JCR_PRIMARYTYPE",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 182,
                "startColumnNumber": 24,
                "endLineNumber": 182,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 181,
                        "startColumnNumber": 16,
                        "endLineNumber": 182,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 181,
                        "startColumnNumber": 16,
                        "endLineNumber": 182,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 249,
                        "startLineNumber": 179,
                        "startColumnNumber": 75,
                        "endLineNumber": 184,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n  tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n  ndt.writeTo(tree);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 312,
                        "startLineNumber": 179,
                        "startColumnNumber": 12,
                        "endLineNumber": 184,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n  Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n  tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n  ndt.writeTo(tree);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 35,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 361,
                        "startLineNumber": 177,
                        "startColumnNumber": 45,
                        "endLineNumber": 185,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int ndn=1;\n  for (  NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n    Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n    tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n    ndt.writeTo(tree);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 398,
                        "startLineNumber": 177,
                        "startColumnNumber": 8,
                        "endLineNumber": 185,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (nodeDefinitionTemplates != null) {\n  int ndn=1;\n  for (  NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n    Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n    tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n    ndt.writeTo(tree);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2357,
                        "startLineNumber": 128,
                        "startColumnNumber": 78,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 213,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2948,
                        "startLineNumber": 117,
                        "startColumnNumber": 4,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes this node type as an  {@code nt:nodeType} child of the givenparent node. An exception is thrown if the child node already exists, unless the  {@code allowUpdate} flag is set, in which case the existingnode is overwritten.\n * @param parent parent node under which to write this node type\n * @param allowUpdate whether to overwrite an existing type\n * @return The node type tree.\n * @throws RepositoryException if this type could not be written\n */\nTree writeTo(Tree parent,boolean allowUpdate) throws RepositoryException {\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 227,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 93,
                    "startLineNumber": 181,
                    "startColumnNumber": 16,
                    "endLineNumber": 182,
                    "endColumnNumber": 75
                },
                "nodeContext": "tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": null
        }
    ],
    "positionList": [
        {
            "charLength": 15,
            "startLineNumber": 142,
            "startColumnNumber": 25,
            "endLineNumber": 142,
            "endColumnNumber": 40
        },
        {
            "charLength": 15,
            "startLineNumber": 172,
            "startColumnNumber": 24,
            "endLineNumber": 172,
            "endColumnNumber": 39
        },
        {
            "charLength": 15,
            "startLineNumber": 182,
            "startColumnNumber": 24,
            "endLineNumber": 182,
            "endColumnNumber": 39
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 6
        }
    ]
}