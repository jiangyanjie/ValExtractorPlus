{
    "id": 545,
    "expression": "parent.getProperty(ours.getName())",
    "projectName": "jackrabbit-oak",
    "commitID": "2f1940539bba24afb9233f1f912a4cf5d64a79ea",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/MergingNodeStateDiff.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "parent.getProperty(ours.getName())",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 34,
                "startLineNumber": 102,
                "startColumnNumber": 39,
                "endLineNumber": 102,
                "endColumnNumber": 73
            },
            "astNodeNumber": 6,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 102,
                        "startColumnNumber": 30,
                        "endLineNumber": 102,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "theirs=parent.getProperty(ours.getName())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 102,
                        "startColumnNumber": 16,
                        "endLineNumber": 102,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "PropertyState theirs=parent.getProperty(ours.getName());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 242,
                        "startLineNumber": 101,
                        "startColumnNumber": 68,
                        "endLineNumber": 105,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  PropertyState theirs=parent.getProperty(ours.getName());\n  Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n  applyResolution(resolution,conflictType,ours);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 298,
                        "startLineNumber": 101,
                        "startColumnNumber": 12,
                        "endLineNumber": 105,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (PropertyState ours : conflictInfo.getProperties()) {\n  PropertyState theirs=parent.getProperty(ours.getName());\n  Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n  applyResolution(resolution,conflictType,ours);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 322,
                        "startLineNumber": 100,
                        "startColumnNumber": 45,
                        "endLineNumber": 106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  PropertyState ours : conflictInfo.getProperties()) {\n    PropertyState theirs=parent.getProperty(ours.getName());\n    Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n    applyResolution(resolution,conflictType,ours);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 37,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1519,
                        "startLineNumber": 100,
                        "startColumnNumber": 8,
                        "endLineNumber": 128,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyConflictHandler != null) {\n  for (  PropertyState ours : conflictInfo.getProperties()) {\n    PropertyState theirs=parent.getProperty(ours.getName());\n    Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n    applyResolution(resolution,conflictType,ours);\n  }\n}\n else {\n  NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n  if (nodeConflictHandler != null) {\n    for (    ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n      String name=oursCNE.getName();\n      NodeState ours=oursCNE.getNodeState();\n      NodeState theirs=parent.getChildNode(name);\n      Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n      applyResolution(resolution,conflictType,name,ours);\n      if (LOG.isDebugEnabled()) {\n        String diff=JsopDiff.diffToJsop(ours,theirs);\n        LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n      }\n    }\n  }\n else {\n    LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1817,
                        "startLineNumber": 98,
                        "startColumnNumber": 84,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 172,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1897,
                        "startLineNumber": 98,
                        "startColumnNumber": 4,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void resolveConflict(ConflictType conflictType,NodeState conflictInfo){\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 184,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 102,
                    "startColumnNumber": 16,
                    "endLineNumber": 102,
                    "endColumnNumber": 74
                },
                "nodeContext": "PropertyState theirs=parent.getProperty(ours.getName());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 4,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        }
    ],
    "positionList": [
        {
            "charLength": 34,
            "startLineNumber": 102,
            "startColumnNumber": 39,
            "endLineNumber": 102,
            "endColumnNumber": 73
        }
    ],
    "layoutRelationDataList": []
}