{
    "id": 1351,
    "expression": "executor",
    "projectName": "jackrabbit-oak",
    "commitID": "ee1f53c6b27a4876f5d788bc4562702ea82370df",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "executor",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 191,
                "startColumnNumber": 8,
                "endLineNumber": 191,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 191,
                        "startColumnNumber": 8,
                        "endLineNumber": 191,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "executor.start(whiteboard)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 191,
                        "startColumnNumber": 8,
                        "endLineNumber": 191,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "executor.start(whiteboard);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 191,
                    "startColumnNumber": 8,
                    "endLineNumber": 191,
                    "endColumnNumber": 35
                },
                "nodeContext": "executor.start(whiteboard);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.whiteboard.WhiteboardExecutor"
        },
        {
            "nodeContext": "executor",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 201,
                "startColumnNumber": 11,
                "endLineNumber": 201,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 148,
                        "startLineNumber": 196,
                        "startColumnNumber": 32,
                        "endLineNumber": 201,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "new RevisionGC(new Runnable(){\n  @Override public void run(){\n    store.gc();\n  }\n}\n,executor)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 161,
                        "startLineNumber": 196,
                        "startColumnNumber": 19,
                        "endLineNumber": 201,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "revisionGC=new RevisionGC(new Runnable(){\n  @Override public void run(){\n    store.gc();\n  }\n}\n,executor)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 21,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 201,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "RevisionGC revisionGC=new RevisionGC(new Runnable(){\n  @Override public void run(){\n    store.gc();\n  }\n}\n,executor);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 24,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 148,
                    "startLineNumber": 196,
                    "startColumnNumber": 32,
                    "endLineNumber": 201,
                    "endColumnNumber": 20
                },
                "nodeContext": "new RevisionGC(new Runnable(){\n  @Override public void run(){\n    store.gc();\n  }\n}\n,executor)",
                "nodeType": "ClassInstanceCreation",
                "astNodeNumber": 19,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.whiteboard.WhiteboardExecutor"
        },
        {
            "nodeContext": "executor",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 217,
                "startColumnNumber": 93,
                "endLineNumber": 217,
                "endColumnNumber": 101
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 217,
                        "startColumnNumber": 78,
                        "endLineNumber": 217,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "new BlobGC(gc,executor)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 154,
                        "startLineNumber": 217,
                        "startColumnNumber": 33,
                        "endLineNumber": 218,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 217,
                        "startColumnNumber": 12,
                        "endLineNumber": 218,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\")",
                    "nodeType": "Assignment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 217,
                        "startColumnNumber": 12,
                        "endLineNumber": 218,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 716,
                        "startLineNumber": 205,
                        "startColumnNumber": 73,
                        "endLineNumber": 219,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  BlobGarbageCollector gc=new BlobGarbageCollector(){\n    @Override public void collectGarbage() throws Exception {\n      MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n      gc.collectGarbage();\n    }\n  }\n;\n  blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 62,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 781,
                        "startLineNumber": 205,
                        "startColumnNumber": 8,
                        "endLineNumber": 219,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n  BlobGarbageCollector gc=new BlobGarbageCollector(){\n    @Override public void collectGarbage() throws Exception {\n      MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n      gc.collectGarbage();\n    }\n  }\n;\n  blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 69,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 217,
                    "startColumnNumber": 78,
                    "endLineNumber": 217,
                    "endColumnNumber": 102
                },
                "nodeContext": "new BlobGC(gc,executor)",
                "nodeType": "ClassInstanceCreation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.whiteboard.WhiteboardExecutor"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 191,
            "startColumnNumber": 8,
            "endLineNumber": 191,
            "endColumnNumber": 16
        },
        {
            "charLength": 8,
            "startLineNumber": 201,
            "startColumnNumber": 11,
            "endLineNumber": 201,
            "endColumnNumber": 19
        },
        {
            "charLength": 8,
            "startLineNumber": 217,
            "startColumnNumber": 93,
            "endLineNumber": 217,
            "endColumnNumber": 101
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 6
        }
    ]
}