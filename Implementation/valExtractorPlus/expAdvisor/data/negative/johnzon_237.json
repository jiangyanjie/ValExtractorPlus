{
    "id": 237,
    "expression": "this.constructor",
    "projectName": "johnzon",
    "commitID": "1ea4fd8c3d894cbe8398e5808414cfd2d2eaa992",
    "filePath": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 75,
                "startColumnNumber": 43,
                "endLineNumber": 75,
                "endColumnNumber": 59
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 75,
                        "startColumnNumber": 43,
                        "endLineNumber": 75,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "this.constructor != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 75,
                        "startColumnNumber": 43,
                        "endLineNumber": 75,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "this.constructor != null && this.constructor.getGenericParameterTypes().length > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 75,
                        "startColumnNumber": 12,
                        "endLineNumber": 75,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0",
                    "nodeType": "Assignment",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 75,
                        "startColumnNumber": 12,
                        "endLineNumber": 75,
                        "endColumnNumber": 126
                    },
                    "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 75,
                    "startColumnNumber": 12,
                    "endLineNumber": 75,
                    "endColumnNumber": 126
                },
                "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 20,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 75,
                "startColumnNumber": 71,
                "endLineNumber": 75,
                "endColumnNumber": 87
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 75,
                        "startColumnNumber": 71,
                        "endLineNumber": 75,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 75,
                        "startColumnNumber": 71,
                        "endLineNumber": 75,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes().length",
                    "nodeType": "FieldAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 75,
                        "startColumnNumber": 71,
                        "endLineNumber": 75,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes().length > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 75,
                        "startColumnNumber": 43,
                        "endLineNumber": 75,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "this.constructor != null && this.constructor.getGenericParameterTypes().length > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 75,
                        "startColumnNumber": 12,
                        "endLineNumber": 75,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0",
                    "nodeType": "Assignment",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 75,
                        "startColumnNumber": 12,
                        "endLineNumber": 75,
                        "endColumnNumber": 126
                    },
                    "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 75,
                    "startColumnNumber": 12,
                    "endLineNumber": 75,
                    "endColumnNumber": 126
                },
                "nodeContext": "this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 20,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 77,
                "startColumnNumber": 49,
                "endLineNumber": 77,
                "endColumnNumber": 65
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 77,
                        "startColumnNumber": 49,
                        "endLineNumber": 77,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 77,
                        "startColumnNumber": 16,
                        "endLineNumber": 77,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "this.constructorParameterTypes=this.constructor.getGenericParameterTypes()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 77,
                        "startColumnNumber": 16,
                        "endLineNumber": 77,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1242,
                        "startLineNumber": 76,
                        "startColumnNumber": 46,
                        "endLineNumber": 95,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 148,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1463,
                        "startLineNumber": 76,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (this.constructorHasArguments) {\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n else {\n  this.constructorParameterTypes=null;\n  this.constructorParameters=null;\n  this.constructorParameterConverters=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 171,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 77,
                    "startLineNumber": 77,
                    "startColumnNumber": 16,
                    "endLineNumber": 77,
                    "endColumnNumber": 93
                },
                "nodeContext": "this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 79,
                "startColumnNumber": 56,
                "endLineNumber": 79,
                "endColumnNumber": 72
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 79,
                        "startColumnNumber": 56,
                        "endLineNumber": 79,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 79,
                        "startColumnNumber": 56,
                        "endLineNumber": 79,
                        "endColumnNumber": 106
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes().length",
                    "nodeType": "FieldAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 79,
                        "startColumnNumber": 45,
                        "endLineNumber": 79,
                        "endColumnNumber": 107
                    },
                    "nodeContext": "new String[this.constructor.getGenericParameterTypes().length]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 79,
                        "startColumnNumber": 16,
                        "endLineNumber": 79,
                        "endColumnNumber": 107
                    },
                    "nodeContext": "this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 79,
                        "startColumnNumber": 16,
                        "endLineNumber": 79,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1242,
                        "startLineNumber": 76,
                        "startColumnNumber": 46,
                        "endLineNumber": 95,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 148,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1463,
                        "startLineNumber": 76,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (this.constructorHasArguments) {\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n else {\n  this.constructorParameterTypes=null;\n  this.constructorParameters=null;\n  this.constructorParameterConverters=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 171,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 92,
                    "startLineNumber": 79,
                    "startColumnNumber": 16,
                    "endLineNumber": 79,
                    "endColumnNumber": 108
                },
                "nodeContext": "this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 17,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 80,
                "startColumnNumber": 68,
                "endLineNumber": 80,
                "endColumnNumber": 84
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 80,
                        "startColumnNumber": 68,
                        "endLineNumber": 80,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "this.constructor.getAnnotation(ConstructorProperties.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 80,
                        "startColumnNumber": 44,
                        "endLineNumber": 80,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 80,
                        "startColumnNumber": 16,
                        "endLineNumber": 80,
                        "endColumnNumber": 128
                    },
                    "nodeContext": "final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1242,
                        "startLineNumber": 76,
                        "startColumnNumber": 46,
                        "endLineNumber": 95,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 148,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1463,
                        "startLineNumber": 76,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (this.constructorHasArguments) {\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n else {\n  this.constructorParameterTypes=null;\n  this.constructorParameters=null;\n  this.constructorParameterConverters=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 171,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 112,
                    "startLineNumber": 80,
                    "startColumnNumber": 16,
                    "endLineNumber": 80,
                    "endColumnNumber": 128
                },
                "nodeContext": "final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 83,
                "startColumnNumber": 71,
                "endLineNumber": 83,
                "endColumnNumber": 87
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 83,
                        "startColumnNumber": 71,
                        "endLineNumber": 83,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 83,
                        "startColumnNumber": 71,
                        "endLineNumber": 83,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "this.constructor.getGenericParameterTypes().length",
                    "nodeType": "FieldAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 83,
                        "startColumnNumber": 54,
                        "endLineNumber": 83,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "new Converter<?>[this.constructor.getGenericParameterTypes().length]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 106,
                        "startLineNumber": 83,
                        "startColumnNumber": 16,
                        "endLineNumber": 83,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 83,
                        "startColumnNumber": 16,
                        "endLineNumber": 83,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1242,
                        "startLineNumber": 76,
                        "startColumnNumber": 46,
                        "endLineNumber": 95,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 148,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1463,
                        "startLineNumber": 76,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (this.constructorHasArguments) {\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n else {\n  this.constructorParameterTypes=null;\n  this.constructorParameters=null;\n  this.constructorParameterConverters=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 171,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 107,
                    "startLineNumber": 83,
                    "startColumnNumber": 16,
                    "endLineNumber": 83,
                    "endColumnNumber": 123
                },
                "nodeContext": "this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 19,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        },
        {
            "nodeContext": "this.constructor",
            "nodeType": "FieldAccess",
            "nodePosition": {
                "charLength": 16,
                "startLineNumber": 85,
                "startColumnNumber": 46,
                "endLineNumber": 85,
                "endColumnNumber": 62
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 85,
                        "startColumnNumber": 46,
                        "endLineNumber": 85,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "this.constructor.getParameterAnnotations()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 85,
                        "startColumnNumber": 46,
                        "endLineNumber": 85,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "this.constructor.getParameterAnnotations()[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 518,
                        "startLineNumber": 85,
                        "startColumnNumber": 20,
                        "endLineNumber": 93,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n  if (a.annotationType() == JohnzonConverter.class) {\n    try {\n      this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n    }\n catch (    final Exception e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 558,
                        "startLineNumber": 84,
                        "startColumnNumber": 76,
                        "endLineNumber": 94,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n    if (a.annotationType() == JohnzonConverter.class) {\n      try {\n        this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n      }\n catch (      final Exception e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 55,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 618,
                        "startLineNumber": 84,
                        "startColumnNumber": 16,
                        "endLineNumber": 94,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < this.constructorParameters.length; i++) {\n  for (  final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n    if (a.annotationType() == JohnzonConverter.class) {\n      try {\n        this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n      }\n catch (      final Exception e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 70,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1242,
                        "startLineNumber": 76,
                        "startColumnNumber": 46,
                        "endLineNumber": 95,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 148,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1463,
                        "startLineNumber": 76,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (this.constructorHasArguments) {\n  this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n  this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n  final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n  System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n  this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n  for (int i=0; i < this.constructorParameters.length; i++) {\n    for (    final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n      if (a.annotationType() == JohnzonConverter.class) {\n        try {\n          this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n        }\n catch (        final Exception e) {\n          throw new IllegalArgumentException(e);\n        }\n      }\n    }\n  }\n}\n else {\n  this.constructorParameterTypes=null;\n  this.constructorParameters=null;\n  this.constructorParameterConverters=null;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 171,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1808,
                        "startLineNumber": 69,
                        "startColumnNumber": 100,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 219,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2054,
                        "startLineNumber": 67,
                        "startColumnNumber": 8,
                        "endLineNumber": 100,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected ClassMapping(final Class<?> clazz,final Map<String,Getter> getters,final Map<String,Setter> setters,final boolean acceptHiddenConstructor,final boolean useConstructor){\n  this.clazz=clazz;\n  this.getters=getters;\n  this.setters=setters;\n  this.constructor=findConstructor(acceptHiddenConstructor,useConstructor);\n  this.constructorHasArguments=this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n  if (this.constructorHasArguments) {\n    this.constructorParameterTypes=this.constructor.getGenericParameterTypes();\n    this.constructorParameters=new String[this.constructor.getGenericParameterTypes().length];\n    final ConstructorProperties constructorProperties=this.constructor.getAnnotation(ConstructorProperties.class);\n    System.arraycopy(constructorProperties.value(),0,this.constructorParameters,0,this.constructorParameters.length);\n    this.constructorParameterConverters=new Converter<?>[this.constructor.getGenericParameterTypes().length];\n    for (int i=0; i < this.constructorParameters.length; i++) {\n      for (      final Annotation a : this.constructor.getParameterAnnotations()[i]) {\n        if (a.annotationType() == JohnzonConverter.class) {\n          try {\n            this.constructorParameterConverters[i]=JohnzonConverter.class.cast(a).value().newInstance();\n          }\n catch (          final Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n      }\n    }\n  }\n else {\n    this.constructorParameterTypes=null;\n    this.constructorParameters=null;\n    this.constructorParameterConverters=null;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 257,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 85,
                    "startColumnNumber": 46,
                    "endLineNumber": 85,
                    "endColumnNumber": 91
                },
                "nodeContext": "this.constructor.getParameterAnnotations()[i]",
                "nodeType": "ArrayAccess",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.reflect.Constructor<>"
        }
    ],
    "positionList": [
        {
            "charLength": 16,
            "startLineNumber": 75,
            "startColumnNumber": 43,
            "endLineNumber": 75,
            "endColumnNumber": 59
        },
        {
            "charLength": 16,
            "startLineNumber": 75,
            "startColumnNumber": 71,
            "endLineNumber": 75,
            "endColumnNumber": 87
        },
        {
            "charLength": 16,
            "startLineNumber": 77,
            "startColumnNumber": 49,
            "endLineNumber": 77,
            "endColumnNumber": 65
        },
        {
            "charLength": 16,
            "startLineNumber": 79,
            "startColumnNumber": 56,
            "endLineNumber": 79,
            "endColumnNumber": 72
        },
        {
            "charLength": 16,
            "startLineNumber": 80,
            "startColumnNumber": 68,
            "endLineNumber": 80,
            "endColumnNumber": 84
        },
        {
            "charLength": 16,
            "startLineNumber": 83,
            "startColumnNumber": 71,
            "endLineNumber": 83,
            "endColumnNumber": 87
        },
        {
            "charLength": 16,
            "startLineNumber": 85,
            "startColumnNumber": 46,
            "endLineNumber": 85,
            "endColumnNumber": 62
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 5
        }
    ]
}