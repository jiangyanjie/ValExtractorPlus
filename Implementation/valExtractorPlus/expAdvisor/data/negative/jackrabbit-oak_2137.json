{
    "id": 2137,
    "expression": "ace",
    "projectName": "jackrabbit-oak",
    "commitID": "f061961dc602716553ff9d61959e7801a37a8580",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/AccessControlManagerImpl.java",
    "occurrences": 5,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "ace",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 230,
                "startColumnNumber": 59,
                "endLineNumber": 230,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 230,
                        "startColumnNumber": 59,
                        "endLineNumber": 230,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "ace.isAllow()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 230,
                        "startColumnNumber": 34,
                        "endLineNumber": 230,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "generateAceName(aclNode,ace.isAllow())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 230,
                        "startColumnNumber": 23,
                        "endLineNumber": 230,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "nodeName=generateAceName(aclNode,ace.isAllow())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 230,
                        "startColumnNumber": 16,
                        "endLineNumber": 230,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "String nodeName=generateAceName(aclNode,ace.isAllow());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 532,
                        "startLineNumber": 229,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 587,
                        "startLineNumber": 229,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (JackrabbitAccessControlEntry ace : acl.getACEs()) {\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 213,
                        "startColumnNumber": 15,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (policy instanceof PrincipalACL) {\n  throw new RepositoryException(\"not yet implemented\");\n}\n else {\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1327,
                        "startLineNumber": 207,
                        "startColumnNumber": 97,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1434,
                        "startLineNumber": 206,
                        "startColumnNumber": 4,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void setPolicy(String absPath,AccessControlPolicy policy) throws RepositoryException {\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 168,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 230,
                    "startColumnNumber": 16,
                    "endLineNumber": 230,
                    "endColumnNumber": 74
                },
                "nodeContext": "String nodeName=generateAceName(aclNode,ace.isAllow());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.security.authorization.JackrabbitAccessControlEntry"
        },
        {
            "nodeContext": "ace",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 231,
                "startColumnNumber": 33,
                "endLineNumber": 231,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 231,
                        "startColumnNumber": 33,
                        "endLineNumber": 231,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "ace.isAllow()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 231,
                        "startColumnNumber": 32,
                        "endLineNumber": 231,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "(ace.isAllow())",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 231,
                        "startColumnNumber": 32,
                        "endLineNumber": 231,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 231,
                        "startColumnNumber": 23,
                        "endLineNumber": 231,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 231,
                        "startColumnNumber": 16,
                        "endLineNumber": 231,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 532,
                        "startLineNumber": 229,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 587,
                        "startLineNumber": 229,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (JackrabbitAccessControlEntry ace : acl.getACEs()) {\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 213,
                        "startColumnNumber": 15,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (policy instanceof PrincipalACL) {\n  throw new RepositoryException(\"not yet implemented\");\n}\n else {\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1327,
                        "startLineNumber": 207,
                        "startColumnNumber": 97,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1434,
                        "startLineNumber": 206,
                        "startColumnNumber": 4,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void setPolicy(String absPath,AccessControlPolicy policy) throws RepositoryException {\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 168,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 231,
                    "startColumnNumber": 16,
                    "endLineNumber": 231,
                    "endColumnNumber": 85
                },
                "nodeContext": "String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.security.authorization.JackrabbitAccessControlEntry"
        },
        {
            "nodeContext": "ace",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 234,
                "startColumnNumber": 54,
                "endLineNumber": 234,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 234,
                        "startColumnNumber": 54,
                        "endLineNumber": 234,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "ace.getPrincipal()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 234,
                        "startColumnNumber": 54,
                        "endLineNumber": 234,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "ace.getPrincipal().getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 234,
                        "startColumnNumber": 16,
                        "endLineNumber": 234,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 234,
                        "startColumnNumber": 16,
                        "endLineNumber": 234,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 532,
                        "startLineNumber": 229,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 587,
                        "startLineNumber": 229,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (JackrabbitAccessControlEntry ace : acl.getACEs()) {\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 213,
                        "startColumnNumber": 15,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (policy instanceof PrincipalACL) {\n  throw new RepositoryException(\"not yet implemented\");\n}\n else {\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1327,
                        "startLineNumber": 207,
                        "startColumnNumber": 97,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1434,
                        "startLineNumber": 206,
                        "startColumnNumber": 4,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void setPolicy(String absPath,AccessControlPolicy policy) throws RepositoryException {\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 168,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 68,
                    "startLineNumber": 234,
                    "startColumnNumber": 16,
                    "endLineNumber": 234,
                    "endColumnNumber": 84
                },
                "nodeContext": "aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.security.authorization.JackrabbitAccessControlEntry"
        },
        {
            "nodeContext": "ace",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 235,
                "startColumnNumber": 88,
                "endLineNumber": 235,
                "endColumnNumber": 91
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 235,
                        "startColumnNumber": 88,
                        "endLineNumber": 235,
                        "endColumnNumber": 107
                    },
                    "nodeContext": "ace.getPrivileges()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 235,
                        "startColumnNumber": 49,
                        "endLineNumber": 235,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "AccessControlUtils.namesFromPrivileges(ace.getPrivileges())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 235,
                        "startColumnNumber": 16,
                        "endLineNumber": 235,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 235,
                        "startColumnNumber": 16,
                        "endLineNumber": 235,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 532,
                        "startLineNumber": 229,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 587,
                        "startLineNumber": 229,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (JackrabbitAccessControlEntry ace : acl.getACEs()) {\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 213,
                        "startColumnNumber": 15,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (policy instanceof PrincipalACL) {\n  throw new RepositoryException(\"not yet implemented\");\n}\n else {\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1327,
                        "startLineNumber": 207,
                        "startColumnNumber": 97,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1434,
                        "startLineNumber": 206,
                        "startColumnNumber": 4,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void setPolicy(String absPath,AccessControlPolicy policy) throws RepositoryException {\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 168,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 94,
                    "startLineNumber": 235,
                    "startColumnNumber": 16,
                    "endLineNumber": 235,
                    "endColumnNumber": 110
                },
                "nodeContext": "aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.security.authorization.JackrabbitAccessControlEntry"
        },
        {
            "nodeContext": "ace",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 236,
                "startColumnNumber": 82,
                "endLineNumber": 236,
                "endColumnNumber": 85
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 236,
                        "startColumnNumber": 16,
                        "endLineNumber": 236,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 236,
                        "startColumnNumber": 16,
                        "endLineNumber": 236,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 532,
                        "startLineNumber": 229,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 587,
                        "startLineNumber": 229,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (JackrabbitAccessControlEntry ace : acl.getACEs()) {\n  String nodeName=generateAceName(aclNode,ace.isAllow());\n  String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n  NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n  aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n  aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n  restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 213,
                        "startColumnNumber": 15,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 135,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 238,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (policy instanceof PrincipalACL) {\n  throw new RepositoryException(\"not yet implemented\");\n}\n else {\n  Tree tree=getTree(absPath);\n  checkPermission(tree);\n  checkIsAccessControlContent(tree);\n  NodeUtil aclNode=getAclNode(absPath,tree);\n  if (aclNode != null) {\n    for (    Tree aceTree : aclNode.getTree().getChildren()) {\n      aceTree.remove();\n    }\n  }\n else {\n    aclNode=createAclTree(absPath,tree);\n  }\n  ACL acl=(ACL)policy;\n  for (  JackrabbitAccessControlEntry ace : acl.getACEs()) {\n    String nodeName=generateAceName(aclNode,ace.isAllow());\n    String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n    NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n    aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n    aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n    restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 146,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1327,
                        "startLineNumber": 207,
                        "startColumnNumber": 97,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 152,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1434,
                        "startLineNumber": 206,
                        "startColumnNumber": 4,
                        "endLineNumber": 239,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void setPolicy(String absPath,AccessControlPolicy policy) throws RepositoryException {\n  checkValidPolicy(absPath,policy);\n  if (policy instanceof PrincipalACL) {\n    throw new RepositoryException(\"not yet implemented\");\n  }\n else {\n    Tree tree=getTree(absPath);\n    checkPermission(tree);\n    checkIsAccessControlContent(tree);\n    NodeUtil aclNode=getAclNode(absPath,tree);\n    if (aclNode != null) {\n      for (      Tree aceTree : aclNode.getTree().getChildren()) {\n        aceTree.remove();\n      }\n    }\n else {\n      aclNode=createAclTree(absPath,tree);\n    }\n    ACL acl=(ACL)policy;\n    for (    JackrabbitAccessControlEntry ace : acl.getACEs()) {\n      String nodeName=generateAceName(aclNode,ace.isAllow());\n      String ntName=(ace.isAllow()) ? NT_REP_GRANT_ACE : NT_REP_DENY_ACE;\n      NodeUtil aceNode=aclNode.addChild(nodeName,ntName);\n      aceNode.setString(REP_PRINCIPAL_NAME,ace.getPrincipal().getName());\n      aceNode.setNames(REP_PRIVILEGES,AccessControlUtils.namesFromPrivileges(ace.getPrivileges()));\n      restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 168,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 236,
                    "startColumnNumber": 16,
                    "endLineNumber": 236,
                    "endColumnNumber": 87
                },
                "nodeContext": "restrictionProvider.writeRestrictions(absPath,aceNode.getTree(),ace);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.security.authorization.JackrabbitAccessControlEntry"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 230,
            "startColumnNumber": 59,
            "endLineNumber": 230,
            "endColumnNumber": 62
        },
        {
            "charLength": 3,
            "startLineNumber": 231,
            "startColumnNumber": 33,
            "endLineNumber": 231,
            "endColumnNumber": 36
        },
        {
            "charLength": 3,
            "startLineNumber": 234,
            "startColumnNumber": 54,
            "endLineNumber": 234,
            "endColumnNumber": 57
        },
        {
            "charLength": 3,
            "startLineNumber": 235,
            "startColumnNumber": 88,
            "endLineNumber": 235,
            "endColumnNumber": 91
        },
        {
            "charLength": 3,
            "startLineNumber": 236,
            "startColumnNumber": 82,
            "endLineNumber": 236,
            "endColumnNumber": 85
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        }
    ]
}