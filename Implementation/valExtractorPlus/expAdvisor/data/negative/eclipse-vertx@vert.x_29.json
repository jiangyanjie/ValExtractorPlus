{
    "id": 29,
    "expression": "cause.getMessage().endsWith(expectedSuffix)",
    "projectName": "eclipse-vertx@vert.x",
    "commitID": "8965822c11828b4e69baee911f315901c2e073ec",
    "filePath": "src/test/java/io/vertx/test/core/HttpTLSTest.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "cause.getMessage().endsWith(expectedSuffix)",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 43,
                "startLineNumber": 582,
                "startColumnNumber": 19,
                "endLineNumber": 582,
                "endColumnNumber": 62
            },
            "astNodeNumber": 6,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 582,
                        "startColumnNumber": 8,
                        "endLineNumber": 582,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "assertTrue(cause.getMessage().endsWith(expectedSuffix))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 582,
                        "startColumnNumber": 8,
                        "endLineNumber": 582,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "assertTrue(cause.getMessage().endsWith(expectedSuffix));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 426,
                        "startLineNumber": 574,
                        "startColumnNumber": 13,
                        "endLineNumber": 583,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(cause.getMessage().endsWith(expectedSuffix));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 566,
                        "startColumnNumber": 6,
                        "endLineNumber": 583,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (expectedSuffix == null) {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(cause.getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n else {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(cause.getMessage().endsWith(expectedSuffix));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 85,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 870,
                        "startLineNumber": 564,
                        "startColumnNumber": 31,
                        "endLineNumber": 584,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Throwable cause=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(cause.getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(cause.getMessage().endsWith(expectedSuffix));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 94,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 895,
                        "startLineNumber": 564,
                        "startColumnNumber": 6,
                        "endLineNumber": 584,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "catch (VertxException e) {\n  Throwable cause=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(cause.getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(cause.getMessage().endsWith(expectedSuffix));\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 99,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 561,
                        "startColumnNumber": 4,
                        "endLineNumber": 584,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "try {\n  server.listen();\n  fail(\"Was expecting a failure\");\n}\n catch (VertxException e) {\n  Throwable cause=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(cause.getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(cause.getMessage().endsWith(expectedSuffix));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 109,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1150,
                        "startLineNumber": 555,
                        "startColumnNumber": 120,
                        "endLineNumber": 585,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable cause=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(cause.getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(cause.getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 137,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1268,
                        "startLineNumber": 555,
                        "startColumnNumber": 2,
                        "endLineNumber": 585,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "private void testStore(HttpServerOptions serverOptions,List<String> expectedPossiblePrefixes,String expectedSuffix){\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable cause=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(cause.getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + cause.getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=cause.getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(cause.getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 156,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 56,
                    "startLineNumber": 582,
                    "startColumnNumber": 8,
                    "endLineNumber": 582,
                    "endColumnNumber": 64
                },
                "nodeContext": "assertTrue(cause.getMessage().endsWith(expectedSuffix));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 4,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 43,
            "startLineNumber": 582,
            "startColumnNumber": 19,
            "endLineNumber": 582,
            "endColumnNumber": 62
        }
    ],
    "layoutRelationDataList": []
}