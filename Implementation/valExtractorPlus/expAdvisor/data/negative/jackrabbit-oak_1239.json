{
    "id": 1239,
    "expression": "property",
    "projectName": "jackrabbit-oak",
    "commitID": "51540109a2f36b2a5ea30a55a657673cc1d4bb1d",
    "filePath": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/index/SolrIndexEditor.java",
    "occurrences": 13,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 228,
                "startColumnNumber": 108,
                "endLineNumber": 228,
                "endColumnNumber": 116
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 228,
                        "startColumnNumber": 108,
                        "endLineNumber": 228,
                        "endColumnNumber": 126
                    },
                    "nodeContext": "property.getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 228,
                        "startColumnNumber": 65,
                        "endLineNumber": 228,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "configuration.getUsedProperties().contains(property.getName())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 228,
                        "startColumnNumber": 17,
                        "endLineNumber": 228,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 228,
                        "startColumnNumber": 16,
                        "endLineNumber": 228,
                        "endColumnNumber": 128
                    },
                    "nodeContext": "(configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName()))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 202,
                        "startLineNumber": 228,
                        "startColumnNumber": 16,
                        "endLineNumber": 229,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "(configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 112,
                    "startLineNumber": 228,
                    "startColumnNumber": 16,
                    "endLineNumber": 228,
                    "endColumnNumber": 128
                },
                "nodeContext": "(configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName()))",
                "nodeType": "ParenthesizedExpression",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 229,
                "startColumnNumber": 70,
                "endLineNumber": 229,
                "endColumnNumber": 78
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 229,
                        "startColumnNumber": 70,
                        "endLineNumber": 229,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "property.getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 229,
                        "startColumnNumber": 24,
                        "endLineNumber": 229,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "configuration.getIgnoredProperties().contains(property.getName())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 229,
                        "startColumnNumber": 23,
                        "endLineNumber": 229,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "!configuration.getIgnoredProperties().contains(property.getName())",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 202,
                        "startLineNumber": 228,
                        "startColumnNumber": 16,
                        "endLineNumber": 229,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "(configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 229,
                    "startColumnNumber": 23,
                    "endLineNumber": 229,
                    "endColumnNumber": 89
                },
                "nodeContext": "!configuration.getIgnoredProperties().contains(property.getName())",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 231,
                "startColumnNumber": 65,
                "endLineNumber": 231,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 231,
                        "startColumnNumber": 65,
                        "endLineNumber": 231,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "property.getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 231,
                        "startColumnNumber": 35,
                        "endLineNumber": 231,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "configuration.getFieldNameFor(property.getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 231,
                        "startColumnNumber": 23,
                        "endLineNumber": 231,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "fieldName=configuration.getFieldNameFor(property.getType())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 231,
                        "startColumnNumber": 16,
                        "endLineNumber": 231,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "String fieldName=configuration.getFieldNameFor(property.getType());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 231,
                    "startColumnNumber": 16,
                    "endLineNumber": 231,
                    "endColumnNumber": 85
                },
                "nodeContext": "String fieldName=configuration.getFieldNameFor(property.getType());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 234,
                "startColumnNumber": 39,
                "endLineNumber": 234,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 234,
                        "startColumnNumber": 39,
                        "endLineNumber": 234,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "property.getValue(property.getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 142,
                        "startLineNumber": 232,
                        "startColumnNumber": 39,
                        "endLineNumber": 235,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 234,
                    "startColumnNumber": 39,
                    "endLineNumber": 234,
                    "endColumnNumber": 76
                },
                "nodeContext": "property.getValue(property.getType())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 234,
                "startColumnNumber": 57,
                "endLineNumber": 234,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 234,
                        "startColumnNumber": 57,
                        "endLineNumber": 234,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "property.getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 234,
                        "startColumnNumber": 39,
                        "endLineNumber": 234,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "property.getValue(property.getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 142,
                        "startLineNumber": 232,
                        "startColumnNumber": 39,
                        "endLineNumber": 235,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 234,
                    "startColumnNumber": 39,
                    "endLineNumber": 234,
                    "endColumnNumber": 76
                },
                "nodeContext": "property.getValue(property.getType())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 236,
                "startColumnNumber": 45,
                "endLineNumber": 236,
                "endColumnNumber": 53
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 236,
                        "startColumnNumber": 45,
                        "endLineNumber": 236,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "property.getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 236,
                        "startColumnNumber": 45,
                        "endLineNumber": 236,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "property.getType().tag()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 236,
                        "startColumnNumber": 24,
                        "endLineNumber": 236,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "Type.BINARY.tag() == property.getType().tag()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 236,
                    "startColumnNumber": 24,
                    "endLineNumber": 236,
                    "endColumnNumber": 69
                },
                "nodeContext": "Type.BINARY.tag() == property.getType().tag()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 237,
                "startColumnNumber": 47,
                "endLineNumber": 237,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 237,
                        "startColumnNumber": 47,
                        "endLineNumber": 237,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "property.getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 237,
                        "startColumnNumber": 24,
                        "endLineNumber": 237,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 237,
                        "startColumnNumber": 24,
                        "endLineNumber": 237,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 236,
                        "startColumnNumber": 71,
                        "endLineNumber": 238,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 237,
                    "startColumnNumber": 24,
                    "endLineNumber": 237,
                    "endColumnNumber": 103
                },
                "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 237,
                "startColumnNumber": 85,
                "endLineNumber": 237,
                "endColumnNumber": 93
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 237,
                        "startColumnNumber": 67,
                        "endLineNumber": 237,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "extractTextValues(property,state)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 237,
                        "startColumnNumber": 24,
                        "endLineNumber": 237,
                        "endColumnNumber": 102
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 237,
                        "startColumnNumber": 24,
                        "endLineNumber": 237,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 236,
                        "startColumnNumber": 71,
                        "endLineNumber": 238,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 237,
                    "startColumnNumber": 24,
                    "endLineNumber": 237,
                    "endColumnNumber": 103
                },
                "nodeContext": "inputDocument.addField(property.getName(),extractTextValues(property,state));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 238,
                "startColumnNumber": 31,
                "endLineNumber": 238,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 238,
                        "startColumnNumber": 31,
                        "endLineNumber": 238,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "property.isArray()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 438,
                        "startLineNumber": 238,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 238,
                    "startColumnNumber": 31,
                    "endLineNumber": 238,
                    "endColumnNumber": 49
                },
                "nodeContext": "property.isArray()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 239,
                "startColumnNumber": 40,
                "endLineNumber": 239,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 239,
                        "startColumnNumber": 40,
                        "endLineNumber": 239,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "property.getValue(Type.STRINGS)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 239,
                        "startColumnNumber": 24,
                        "endLineNumber": 241,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (String s : property.getValue(Type.STRINGS)) {\n  inputDocument.addField(property.getName(),s);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 252,
                        "startLineNumber": 238,
                        "startColumnNumber": 51,
                        "endLineNumber": 242,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 438,
                        "startLineNumber": 238,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 239,
                    "startColumnNumber": 40,
                    "endLineNumber": 239,
                    "endColumnNumber": 71
                },
                "nodeContext": "property.getValue(Type.STRINGS)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 240,
                "startColumnNumber": 51,
                "endLineNumber": 240,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 240,
                        "startColumnNumber": 51,
                        "endLineNumber": 240,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "property.getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 240,
                        "startColumnNumber": 28,
                        "endLineNumber": 240,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),s)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 240,
                        "startColumnNumber": 28,
                        "endLineNumber": 240,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),s);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 239,
                        "startColumnNumber": 73,
                        "endLineNumber": 241,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  inputDocument.addField(property.getName(),s);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 151,
                        "startLineNumber": 239,
                        "startColumnNumber": 24,
                        "endLineNumber": 241,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (String s : property.getValue(Type.STRINGS)) {\n  inputDocument.addField(property.getName(),s);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 252,
                        "startLineNumber": 238,
                        "startColumnNumber": 51,
                        "endLineNumber": 242,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 438,
                        "startLineNumber": 238,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 240,
                    "startColumnNumber": 28,
                    "endLineNumber": 240,
                    "endColumnNumber": 74
                },
                "nodeContext": "inputDocument.addField(property.getName(),s);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 244,
                "startColumnNumber": 32,
                "endLineNumber": 244,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 244,
                        "startColumnNumber": 32,
                        "endLineNumber": 244,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "property.getName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 243,
                        "startColumnNumber": 24,
                        "endLineNumber": 244,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),property.getValue(Type.STRING))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 243,
                        "startColumnNumber": 24,
                        "endLineNumber": 244,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 242,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 438,
                        "startLineNumber": 238,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 244,
                    "startColumnNumber": 32,
                    "endLineNumber": 244,
                    "endColumnNumber": 50
                },
                "nodeContext": "property.getName()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        },
        {
            "nodeContext": "property",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 244,
                "startColumnNumber": 52,
                "endLineNumber": 244,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 244,
                        "startColumnNumber": 52,
                        "endLineNumber": 244,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "property.getValue(Type.STRING)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 243,
                        "startColumnNumber": 24,
                        "endLineNumber": 244,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),property.getValue(Type.STRING))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 243,
                        "startColumnNumber": 24,
                        "endLineNumber": 244,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 242,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 438,
                        "startLineNumber": 238,
                        "startColumnNumber": 27,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 622,
                        "startLineNumber": 236,
                        "startColumnNumber": 20,
                        "endLineNumber": 245,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (Type.BINARY.tag() == property.getType().tag()) {\n  inputDocument.addField(property.getName(),extractTextValues(property,state));\n}\n else if (property.isArray()) {\n  for (  String s : property.getValue(Type.STRINGS)) {\n    inputDocument.addField(property.getName(),s);\n  }\n}\n else {\n  inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 662,
                        "startLineNumber": 235,
                        "startColumnNumber": 23,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 244,
                    "startColumnNumber": 52,
                    "endLineNumber": 244,
                    "endColumnNumber": 82
                },
                "nodeContext": "property.getValue(Type.STRING)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.api.PropertyState"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 228,
            "startColumnNumber": 108,
            "endLineNumber": 228,
            "endColumnNumber": 116
        },
        {
            "charLength": 8,
            "startLineNumber": 229,
            "startColumnNumber": 70,
            "endLineNumber": 229,
            "endColumnNumber": 78
        },
        {
            "charLength": 8,
            "startLineNumber": 231,
            "startColumnNumber": 65,
            "endLineNumber": 231,
            "endColumnNumber": 73
        },
        {
            "charLength": 8,
            "startLineNumber": 234,
            "startColumnNumber": 39,
            "endLineNumber": 234,
            "endColumnNumber": 47
        },
        {
            "charLength": 8,
            "startLineNumber": 234,
            "startColumnNumber": 57,
            "endLineNumber": 234,
            "endColumnNumber": 65
        },
        {
            "charLength": 8,
            "startLineNumber": 236,
            "startColumnNumber": 45,
            "endLineNumber": 236,
            "endColumnNumber": 53
        },
        {
            "charLength": 8,
            "startLineNumber": 237,
            "startColumnNumber": 47,
            "endLineNumber": 237,
            "endColumnNumber": 55
        },
        {
            "charLength": 8,
            "startLineNumber": 237,
            "startColumnNumber": 85,
            "endLineNumber": 237,
            "endColumnNumber": 93
        },
        {
            "charLength": 8,
            "startLineNumber": 238,
            "startColumnNumber": 31,
            "endLineNumber": 238,
            "endColumnNumber": 39
        },
        {
            "charLength": 8,
            "startLineNumber": 239,
            "startColumnNumber": 40,
            "endLineNumber": 239,
            "endColumnNumber": 48
        },
        {
            "charLength": 8,
            "startLineNumber": 240,
            "startColumnNumber": 51,
            "endLineNumber": 240,
            "endColumnNumber": 59
        },
        {
            "charLength": 8,
            "startLineNumber": 244,
            "startColumnNumber": 32,
            "endLineNumber": 244,
            "endColumnNumber": 40
        },
        {
            "charLength": 8,
            "startLineNumber": 244,
            "startColumnNumber": 52,
            "endLineNumber": 244,
            "endColumnNumber": 60
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 0
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 1
        }
    ]
}