{
    "id": 166,
    "expression": "writer",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "4f60170081b4d51159c65f38eaef2abd45127d39",
    "filePath": "services/src/main/java/org/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "writer",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 160,
                "startColumnNumber": 16,
                "endLineNumber": 160,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 160,
                        "startColumnNumber": 16,
                        "endLineNumber": 160,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "writer.write(\"// INTERNAL ERROR //\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 160,
                        "startColumnNumber": 16,
                        "endLineNumber": 160,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "writer.write(\"// INTERNAL ERROR //\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 159,
                        "startColumnNumber": 98,
                        "endLineNumber": 161,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  writer.write(\"// INTERNAL ERROR //\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 159,
                        "startColumnNumber": 12,
                        "endLineNumber": 163,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n  writer.write(\"// INTERNAL ERROR //\");\n}\n catch (IOException ee) {\n  assert ExceptionUtil.printStackTrace(ee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 30,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 338,
                        "startLineNumber": 156,
                        "startColumnNumber": 30,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 358,
                        "startLineNumber": 156,
                        "startColumnNumber": 10,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 41,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3571,
                        "startLineNumber": 86,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> preferences=api.getPreferences();\n  boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n  boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n  boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n  Map<String,Object> configuration=new HashMap<>();\n  configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n  loader.setEntry(entry);\n  printer.setRealignmentLineNumber(realignmentLineNumbers);\n  printer.setUnicodeEscape(unicodeEscape);\n  printer.setShowLineNumbers(showLineNumbers);\n  String entryPath=entry.getPath();\n  assert entryPath.endsWith(\".class\");\n  String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n  DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n  StringBuilder stringBuffer=printer.getStringBuffer();\n  if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    stringBuffer.append(\"\\n\\n/* Location:              \");\n    stringBuffer.append(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      stringBuffer.append(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        stringBuffer.append(majorVersion - (49 - 5));\n      }\n else {\n        stringBuffer.append(majorVersion - (45 - 1));\n      }\n      stringBuffer.append(\" (\");\n      stringBuffer.append(majorVersion);\n      stringBuffer.append('.');\n      stringBuffer.append(printer.getMinorVersion());\n      stringBuffer.append(')');\n    }\n    stringBuffer.append(\"\\n * JD-Core Version:       \");\n    stringBuffer.append(jdCoreVersion);\n    stringBuffer.append(\"\\n */\");\n  }\n  try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n    ps.print(stringBuffer.toString());\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n catch (Throwable t) {\n  assert ExceptionUtil.printStackTrace(t);\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ee) {\n    assert ExceptionUtil.printStackTrace(ee);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 338,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3589,
                        "startLineNumber": 85,
                        "startColumnNumber": 128,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 339,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3728,
                        "startLineNumber": 84,
                        "startColumnNumber": 4,
                        "endLineNumber": 165,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> preferences=api.getPreferences();\n    boolean realignmentLineNumbers=getPreferenceValue(preferences,REALIGN_LINE_NUMBERS,true);\n    boolean unicodeEscape=getPreferenceValue(preferences,ESCAPE_UNICODE_CHARACTERS,false);\n    boolean showLineNumbers=getPreferenceValue(preferences,WRITE_LINE_NUMBERS,true);\n    Map<String,Object> configuration=new HashMap<>();\n    configuration.put(\"realignLineNumbers\",realignmentLineNumbers);\n    loader.setEntry(entry);\n    printer.setRealignmentLineNumber(realignmentLineNumbers);\n    printer.setUnicodeEscape(unicodeEscape);\n    printer.setShowLineNumbers(showLineNumbers);\n    String entryPath=entry.getPath();\n    assert entryPath.endsWith(\".class\");\n    String entryInternalName=entryPath.substring(0,entryPath.length() - 6);\n    DECOMPILER.decompile(configuration,loader,printer,entryInternalName);\n    StringBuilder stringBuffer=printer.getStringBuffer();\n    if (getPreferenceValue(preferences,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      stringBuffer.append(\"\\n\\n/* Location:              \");\n      stringBuffer.append(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        stringBuffer.append(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          stringBuffer.append(majorVersion - (49 - 5));\n        }\n else {\n          stringBuffer.append(majorVersion - (45 - 1));\n        }\n        stringBuffer.append(\" (\");\n        stringBuffer.append(majorVersion);\n        stringBuffer.append('.');\n        stringBuffer.append(printer.getMinorVersion());\n        stringBuffer.append(')');\n      }\n      stringBuffer.append(\"\\n * JD-Core Version:       \");\n      stringBuffer.append(jdCoreVersion);\n      stringBuffer.append(\"\\n */\");\n    }\n    try (PrintStream ps=new PrintStream(new NewlineOutputStream(Files.newOutputStream(path)),true,\"UTF-8\")){\n      ps.print(stringBuffer.toString());\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n catch (  Throwable t) {\n    assert ExceptionUtil.printStackTrace(t);\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ee) {\n      assert ExceptionUtil.printStackTrace(ee);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 371,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 160,
                    "startColumnNumber": 16,
                    "endLineNumber": 160,
                    "endColumnNumber": 53
                },
                "nodeContext": "writer.write(\"// INTERNAL ERROR //\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.BufferedWriter"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 160,
            "startColumnNumber": 16,
            "endLineNumber": 160,
            "endColumnNumber": 22
        }
    ],
    "layoutRelationDataList": []
}