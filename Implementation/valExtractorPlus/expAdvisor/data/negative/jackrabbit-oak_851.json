{
    "id": 851,
    "expression": "indexedProps",
    "projectName": "jackrabbit-oak",
    "commitID": "606cd24b0f053320a363274346e76bdd7d898208",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexPlanner.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "indexedProps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 153,
                "startColumnNumber": 20,
                "endLineNumber": 153,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 153,
                        "startColumnNumber": 20,
                        "endLineNumber": 153,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "indexedProps.add(pr.propertyName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 153,
                        "startColumnNumber": 20,
                        "endLineNumber": 153,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "indexedProps.add(pr.propertyName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 266,
                        "startLineNumber": 149,
                        "startColumnNumber": 61,
                        "endLineNumber": 155,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n    continue;\n  }\n  indexedProps.add(pr.propertyName);\n  result.propDefns.put(pr.propertyName,pd);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 311,
                        "startLineNumber": 149,
                        "startColumnNumber": 16,
                        "endLineNumber": 155,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (pd != null && pd.propertyIndexEnabled()) {\n  if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n    continue;\n  }\n  indexedProps.add(pr.propertyName);\n  result.propDefns.put(pr.propertyName,pd);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 37,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 424,
                        "startLineNumber": 147,
                        "startColumnNumber": 76,
                        "endLineNumber": 156,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n  if (pd != null && pd.propertyIndexEnabled()) {\n    if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n      continue;\n    }\n    indexedProps.add(pr.propertyName);\n    result.propDefns.put(pr.propertyName,pd);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 49,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 488,
                        "startLineNumber": 147,
                        "startColumnNumber": 12,
                        "endLineNumber": 156,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (PropertyRestriction pr : filter.getPropertyRestrictions()) {\n  PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n  if (pd != null && pd.propertyIndexEnabled()) {\n    if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n      continue;\n    }\n    indexedProps.add(pr.propertyName);\n    result.propDefns.put(pr.propertyName,pd);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 512,
                        "startLineNumber": 146,
                        "startColumnNumber": 47,
                        "endLineNumber": 157,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n    if (pd != null && pd.propertyIndexEnabled()) {\n      if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n        continue;\n      }\n      indexedProps.add(pr.propertyName);\n      result.propDefns.put(pr.propertyName,pd);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 551,
                        "startLineNumber": 146,
                        "startColumnNumber": 8,
                        "endLineNumber": 157,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (indexingRule.propertyIndexEnabled) {\n  for (  PropertyRestriction pr : filter.getPropertyRestrictions()) {\n    PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n    if (pd != null && pd.propertyIndexEnabled()) {\n      if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n        continue;\n      }\n      indexedProps.add(pr.propertyName);\n      result.propDefns.put(pr.propertyName,pd);\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 62,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3993,
                        "startLineNumber": 103,
                        "startColumnNumber": 47,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 329,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4036,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private IndexPlan.Builder getPlanBuilder(){\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 336,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 153,
                    "startColumnNumber": 20,
                    "endLineNumber": 153,
                    "endColumnNumber": 54
                },
                "nodeContext": "indexedProps.add(pr.propertyName);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.String>"
        },
        {
            "nodeContext": "indexedProps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 171,
                "startColumnNumber": 13,
                "endLineNumber": 171,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 171,
                        "startColumnNumber": 13,
                        "endLineNumber": 171,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "indexedProps.isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 171,
                        "startColumnNumber": 12,
                        "endLineNumber": 171,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "!indexedProps.isEmpty()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 171,
                        "startColumnNumber": 12,
                        "endLineNumber": 171,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "!indexedProps.isEmpty() || canSort || ft != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 171,
                        "startColumnNumber": 12,
                        "endLineNumber": 171,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 100,
                        "startLineNumber": 171,
                        "startColumnNumber": 12,
                        "endLineNumber": 171,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1150,
                        "startLineNumber": 171,
                        "startColumnNumber": 8,
                        "endLineNumber": 198,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n  int costPerEntryFactor=indexedProps.size();\n  costPerEntryFactor+=sortOrder.size();\n  IndexPlan.Builder plan=defaultPlan();\n  if (!sortOrder.isEmpty()) {\n    plan.setSortOrder(sortOrder);\n  }\n  if (costPerEntryFactor == 0) {\n    costPerEntryFactor=1;\n  }\n  if (ft == null) {\n    result.enableNonFullTextConstraints();\n  }\n  if (evalNodeTypeRestrictions) {\n    result.enableNodeTypeEvaluation();\n  }\n  return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 82,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3993,
                        "startLineNumber": 103,
                        "startColumnNumber": 47,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 329,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4036,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private IndexPlan.Builder getPlanBuilder(){\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 336,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 100,
                    "startLineNumber": 171,
                    "startColumnNumber": 12,
                    "endLineNumber": 171,
                    "endColumnNumber": 112
                },
                "nodeContext": "!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.String>"
        },
        {
            "nodeContext": "indexedProps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 175,
                "startColumnNumber": 37,
                "endLineNumber": 175,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 175,
                        "startColumnNumber": 37,
                        "endLineNumber": 175,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "indexedProps.size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 175,
                        "startColumnNumber": 16,
                        "endLineNumber": 175,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "costPerEntryFactor=indexedProps.size()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 175,
                        "startColumnNumber": 12,
                        "endLineNumber": 175,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "int costPerEntryFactor=indexedProps.size();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1044,
                        "startLineNumber": 171,
                        "startColumnNumber": 114,
                        "endLineNumber": 198,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int costPerEntryFactor=indexedProps.size();\n  costPerEntryFactor+=sortOrder.size();\n  IndexPlan.Builder plan=defaultPlan();\n  if (!sortOrder.isEmpty()) {\n    plan.setSortOrder(sortOrder);\n  }\n  if (costPerEntryFactor == 0) {\n    costPerEntryFactor=1;\n  }\n  if (ft == null) {\n    result.enableNonFullTextConstraints();\n  }\n  if (evalNodeTypeRestrictions) {\n    result.enableNodeTypeEvaluation();\n  }\n  return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 68,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1150,
                        "startLineNumber": 171,
                        "startColumnNumber": 8,
                        "endLineNumber": 198,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n  int costPerEntryFactor=indexedProps.size();\n  costPerEntryFactor+=sortOrder.size();\n  IndexPlan.Builder plan=defaultPlan();\n  if (!sortOrder.isEmpty()) {\n    plan.setSortOrder(sortOrder);\n  }\n  if (costPerEntryFactor == 0) {\n    costPerEntryFactor=1;\n  }\n  if (ft == null) {\n    result.enableNonFullTextConstraints();\n  }\n  if (evalNodeTypeRestrictions) {\n    result.enableNodeTypeEvaluation();\n  }\n  return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 82,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3993,
                        "startLineNumber": 103,
                        "startColumnNumber": 47,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 329,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4036,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private IndexPlan.Builder getPlanBuilder(){\n  log.trace(\"Evaluating plan with index definition {}\",definition);\n  FullTextExpression ft=filter.getFullTextConstraint();\n  if (!definition.getVersion().isAtLeast(IndexFormatVersion.V2)) {\n    log.trace(\"Index is old format. Not supported\");\n    return null;\n  }\n  if (ft != null && !definition.isFullTextEnabled()) {\n    return null;\n  }\n  IndexingRule indexingRule=getApplicableRule();\n  if (indexingRule == null) {\n    return null;\n  }\n  if (ft != null && !indexingRule.isFulltextEnabled()) {\n    return null;\n  }\n  if (!checkForQueryPaths()) {\n    log.trace(\"Opting out due mismatch between path restriction {} and query paths {}\",filter.getPath(),definition.getQueryPaths());\n    return null;\n  }\n  result=new PlanResult(indexPath,definition,indexingRule);\n  if (definition.hasFunctionDefined() && filter.getPropertyRestriction(definition.getFunctionName()) != null) {\n    return defaultPlan().setEstimatedEntryCount(1);\n  }\n  List<String> indexedProps=newArrayListWithCapacity(filter.getPropertyRestrictions().size());\n  if (indexingRule.propertyIndexEnabled) {\n    for (    PropertyRestriction pr : filter.getPropertyRestrictions()) {\n      PropertyDefinition pd=indexingRule.getConfig(pr.propertyName);\n      if (pd != null && pd.propertyIndexEnabled()) {\n        if (pr.isNullRestriction() && !pd.nullCheckEnabled) {\n          continue;\n        }\n        indexedProps.add(pr.propertyName);\n        result.propDefns.put(pr.propertyName,pd);\n      }\n    }\n  }\n  boolean evalNodeTypeRestrictions=canEvalNodeTypeRestrictions(indexingRule);\n  boolean evalPathRestrictions=canEvalPathRestrictions(indexingRule);\n  boolean canEvalAlFullText=canEvalAllFullText(indexingRule,ft);\n  if (ft != null && !canEvalAlFullText) {\n    return null;\n  }\n  List<OrderEntry> sortOrder=createSortOrder(indexingRule);\n  boolean canSort=canSortByProperty(sortOrder);\n  if (!indexedProps.isEmpty() || canSort || ft != null || evalPathRestrictions || evalNodeTypeRestrictions) {\n    int costPerEntryFactor=indexedProps.size();\n    costPerEntryFactor+=sortOrder.size();\n    IndexPlan.Builder plan=defaultPlan();\n    if (!sortOrder.isEmpty()) {\n      plan.setSortOrder(sortOrder);\n    }\n    if (costPerEntryFactor == 0) {\n      costPerEntryFactor=1;\n    }\n    if (ft == null) {\n      result.enableNonFullTextConstraints();\n    }\n    if (evalNodeTypeRestrictions) {\n      result.enableNodeTypeEvaluation();\n    }\n    return plan.setCostPerEntry(definition.getCostPerEntry() / costPerEntryFactor);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 336,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 175,
                    "startColumnNumber": 12,
                    "endLineNumber": 175,
                    "endColumnNumber": 57
                },
                "nodeContext": "int costPerEntryFactor=indexedProps.size();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<java.lang.String>"
        }
    ],
    "positionList": [
        {
            "charLength": 12,
            "startLineNumber": 153,
            "startColumnNumber": 20,
            "endLineNumber": 153,
            "endColumnNumber": 32
        },
        {
            "charLength": 12,
            "startLineNumber": 171,
            "startColumnNumber": 13,
            "endLineNumber": 171,
            "endColumnNumber": 25
        },
        {
            "charLength": 12,
            "startLineNumber": 175,
            "startColumnNumber": 37,
            "endLineNumber": 175,
            "endColumnNumber": 49
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        }
    ]
}