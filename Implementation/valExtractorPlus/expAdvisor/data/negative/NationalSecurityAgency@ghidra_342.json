{
    "id": 342,
    "expression": "symbolAddrKey",
    "projectName": "NationalSecurityAgency@ghidra",
    "commitID": "e5df6fdd7bbc13dadc918bafa0f4f5767e74e1a7",
    "filePath": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/symbol/SymbolDatabaseAdapterV1.java",
    "occurrences": 5,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "symbolAddrKey",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 121,
                "startColumnNumber": 58,
                "endLineNumber": 121,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 121,
                        "startColumnNumber": 2,
                        "endLineNumber": 121,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 121,
                        "startColumnNumber": 2,
                        "endLineNumber": 121,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 121,
                    "startColumnNumber": 2,
                    "endLineNumber": 121,
                    "endColumnNumber": 73
                },
                "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "symbolAddrKey",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 134,
                "startColumnNumber": 49,
                "endLineNumber": 134,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 134,
                        "startColumnNumber": 27,
                        "endLineNumber": 134,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "addrMap.decodeAddress(symbolAddrKey)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 134,
                        "startColumnNumber": 11,
                        "endLineNumber": 134,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "symbolAddress=addrMap.decodeAddress(symbolAddrKey)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 134,
                        "startColumnNumber": 3,
                        "endLineNumber": 134,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 234,
                        "startLineNumber": 133,
                        "startColumnNumber": 51,
                        "endLineNumber": 139,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n  String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n  if (symbolName.equals(defaultName)) {\n    source=SourceType.DEFAULT;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 31,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 133,
                        "startColumnNumber": 2,
                        "endLineNumber": 139,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n  Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n  String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n  if (symbolName.equals(defaultName)) {\n    source=SourceType.DEFAULT;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 39,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 134,
                    "startColumnNumber": 3,
                    "endLineNumber": 134,
                    "endColumnNumber": 64
                },
                "nodeContext": "Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "symbolAddrKey",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 154,
                "startColumnNumber": 63,
                "endLineNumber": 154,
                "endColumnNumber": 76
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 154,
                        "startColumnNumber": 4,
                        "endLineNumber": 154,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 154,
                        "startColumnNumber": 4,
                        "endLineNumber": 154,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 155,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "{\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 153,
                        "startColumnNumber": 3,
                        "endLineNumber": 155,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (data2 == 1) {\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 152,
                        "startColumnNumber": 37,
                        "endLineNumber": 156,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  if (data2 == 1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 377,
                        "startLineNumber": 152,
                        "startColumnNumber": 2,
                        "endLineNumber": 159,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (SymbolType.LABEL.equals(type)) {\n  if (data2 == 1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n}\n else if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n  rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 44,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 154,
                    "startColumnNumber": 4,
                    "endLineNumber": 154,
                    "endColumnNumber": 78
                },
                "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "symbolAddrKey",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 163,
                "startColumnNumber": 62,
                "endLineNumber": 163,
                "endColumnNumber": 75
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 163,
                        "startColumnNumber": 3,
                        "endLineNumber": 163,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 163,
                        "startColumnNumber": 3,
                        "endLineNumber": 163,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 162,
                        "startColumnNumber": 40,
                        "endLineNumber": 164,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 162,
                        "startColumnNumber": 2,
                        "endLineNumber": 164,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (SymbolType.FUNCTION.equals(type)) {\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 163,
                    "startColumnNumber": 3,
                    "endLineNumber": 163,
                    "endColumnNumber": 77
                },
                "nodeContext": "rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "symbolAddrKey",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 165,
                "startColumnNumber": 59,
                "endLineNumber": 165,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 165,
                        "startColumnNumber": 15,
                        "endLineNumber": 165,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "computeLocatorHash(symbolName,namespaceId,symbolAddrKey)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 165,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 165,
                        "startColumnNumber": 2,
                        "endLineNumber": 165,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2452,
                        "startLineNumber": 112,
                        "startColumnNumber": 51,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 275,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2699,
                        "startLineNumber": 107,
                        "startColumnNumber": 1,
                        "endLineNumber": 169,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Returns a record matching the current data base schema from the version 1 record.\n * @param recV1 the record matching the version 1 schema.\n * @return a current symbol record.\n */\nprivate DBRecord convertV1Record(DBRecord record){\n  if (record == null) {\n    return null;\n  }\n  DBRecord rec=SymbolDatabaseAdapter.SYMBOL_SCHEMA.createRecord(record.getKey());\n  String symbolName=record.getString(V1_SYMBOL_NAME_COL);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_NAME_COL,symbolName);\n  long symbolAddrKey=record.getLongValue(V1_SYMBOL_ADDR_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_ADDR_COL,symbolAddrKey);\n  long namespaceId=record.getLongValue(V1_SYMBOL_PARENT_COL);\n  rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PARENT_COL,namespaceId);\n  byte symbolTypeId=record.getByteValue(V1_SYMBOL_TYPE_COL);\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_TYPE_COL,symbolTypeId);\n  rec.setString(SymbolDatabaseAdapter.SYMBOL_STRING_DATA_COL,record.getString(V1_SYMBOL_COMMENT_COL));\n  SourceType source=SourceType.USER_DEFINED;\n  if (symbolTypeId == SymbolType.FUNCTION.getID()) {\n    Address symbolAddress=addrMap.decodeAddress(symbolAddrKey);\n    String defaultName=SymbolUtilities.getDefaultFunctionName(symbolAddress);\n    if (symbolName.equals(defaultName)) {\n      source=SourceType.DEFAULT;\n    }\n  }\n  rec.setByteValue(SymbolDatabaseAdapter.SYMBOL_FLAGS_COL,(byte)source.ordinal());\n  long dataTypeId=record.getLongValue(V1_SYMBOL_DATA1_COL);\n  if (dataTypeId != -1) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_DATATYPE_COL,dataTypeId);\n  }\n  SymbolType type=SymbolType.getSymbolType(symbolTypeId);\n  int data2=record.getIntValue(V1_SYMBOL_DATA2_COL);\n  if (SymbolType.LABEL.equals(type)) {\n    if (data2 == 1) {\n      rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n    }\n  }\n else   if (SymbolType.PARAMETER.equals(type) || SymbolType.LOCAL_VAR.equals(type)) {\n    rec.setIntValue(SymbolDatabaseAdapter.SYMBOL_VAROFFSET_COL,data2);\n  }\n  if (SymbolType.FUNCTION.equals(type)) {\n    rec.setLongValue(SymbolDatabaseAdapter.SYMBOL_PRIMARY_COL,symbolAddrKey);\n  }\n  Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n  rec.setField(SymbolDatabaseAdapter.SYMBOL_HASH_COL,hash);\n  return rec;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 285,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 165,
                    "startColumnNumber": 2,
                    "endLineNumber": 165,
                    "endColumnNumber": 74
                },
                "nodeContext": "Field hash=computeLocatorHash(symbolName,namespaceId,symbolAddrKey);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        }
    ],
    "positionList": [
        {
            "charLength": 13,
            "startLineNumber": 121,
            "startColumnNumber": 58,
            "endLineNumber": 121,
            "endColumnNumber": 71
        },
        {
            "charLength": 13,
            "startLineNumber": 134,
            "startColumnNumber": 49,
            "endLineNumber": 134,
            "endColumnNumber": 62
        },
        {
            "charLength": 13,
            "startLineNumber": 154,
            "startColumnNumber": 63,
            "endLineNumber": 154,
            "endColumnNumber": 76
        },
        {
            "charLength": 13,
            "startLineNumber": 163,
            "startColumnNumber": 62,
            "endLineNumber": 163,
            "endColumnNumber": 75
        },
        {
            "charLength": 13,
            "startLineNumber": 165,
            "startColumnNumber": 59,
            "endLineNumber": 165,
            "endColumnNumber": 72
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        }
    ]
}