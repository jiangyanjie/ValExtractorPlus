{
    "id": 34,
    "expression": "ii < l_raw.length",
    "projectName": "commons-codec",
    "commitID": "d720e8797233b467f17dc7ebdddfe482d08a374a",
    "filePath": "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "ii < l_raw.length",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 89,
                "startColumnNumber": 48,
                "endLineNumber": 89,
                "endColumnNumber": 65
            },
            "astNodeNumber": 5,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 276,
                        "startLineNumber": 89,
                        "startColumnNumber": 8,
                        "endLineNumber": 95,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if (ascii[jj - bits] == '1') {\n      l_raw[ii]|=BITS[bits];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 55,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 698,
                        "startLineNumber": 79,
                        "startColumnNumber": 55,
                        "endLineNumber": 97,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isEmpty(ascii)) {\n    return EMPTY_BYTE_ARRAY;\n  }\n  final byte[] l_raw=new byte[ascii.length >> 3];\n  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if (ascii[jj - bits] == '1') {\n        l_raw[ii]|=BITS[bits];\n      }\n    }\n  }\n  return l_raw;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 81,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1042,
                        "startLineNumber": 72,
                        "startColumnNumber": 4,
                        "endLineNumber": 97,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes a byte array where each byte represents an ASCII '0' or '1'.\n * @param ascii each byte represents an ASCII '0' or '1'\n * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n */\npublic static byte[] fromAscii(final byte[] ascii){\n  if (isEmpty(ascii)) {\n    return EMPTY_BYTE_ARRAY;\n  }\n  final byte[] l_raw=new byte[ascii.length >> 3];\n  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {\n    for (int bits=0; bits < BITS.length; ++bits) {\n      if (ascii[jj - bits] == '1') {\n        l_raw[ii]|=BITS[bits];\n      }\n    }\n  }\n  return l_raw;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 95,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 276,
                    "startLineNumber": 89,
                    "startColumnNumber": 8,
                    "endLineNumber": 95,
                    "endColumnNumber": 9
                },
                "nodeContext": "for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {\n  for (int bits=0; bits < BITS.length; ++bits) {\n    if (ascii[jj - bits] == '1') {\n      l_raw[ii]|=BITS[bits];\n    }\n  }\n}\n",
                "nodeType": "ForStatement",
                "astNodeNumber": 55,
                "astHeight": 10
            },
            "tokenLength": 5,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 17,
            "startLineNumber": 89,
            "startColumnNumber": 48,
            "endLineNumber": 89,
            "endColumnNumber": 65
        }
    ],
    "layoutRelationDataList": []
}