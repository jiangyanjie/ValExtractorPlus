{
    "id": 70,
    "expression": "client",
    "projectName": "redis@jedis",
    "commitID": "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
    "filePath": "src/main/java/redis/clients/jedis/Jedis.java",
    "occurrences": 2,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "client",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 1924,
                "startColumnNumber": 4,
                "endLineNumber": 1924,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 1924,
                        "startColumnNumber": 4,
                        "endLineNumber": 1924,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "client.zrangeByScore(key,min,max,offset,count)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1924,
                        "startColumnNumber": 4,
                        "endLineNumber": 1924,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "client.zrangeByScore(key,min,max,offset,count);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 243,
                        "startLineNumber": 1922,
                        "startColumnNumber": 41,
                        "endLineNumber": 1930,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> members=client.getMultiBulkReply();\n  if (members == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(members);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 40,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2746,
                        "startLineNumber": 1874,
                        "startColumnNumber": 2,
                        "endLineNumber": 1930,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Return the all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). <p> The elements having the same score are returned sorted lexicographically as ASCII strings (this follows from a property of Redis sorted sets and does not involve further computation). <p> Using the optional  {@link #zrangeByScore(String,double,double,int,int) LIMIT} it's possibleto get only a range of the matching elements in an SQL-alike way. Note that if offset is large the commands needs to traverse the list for offset elements and this adds up to the O(M) figure. <p> The  {@link #zcount(String,double,double) ZCOUNT} command is similar to{@link #zrangeByScore(String,double,double) ZRANGEBYSCORE} but instead of returning theactual elements in the specified interval, it just returns the number of matching elements. <p> <b>Exclusive intervals and infinity</b> <p> min and max can be -inf and +inf, so that you are not required to know what's the greatest or smallest element in order to take, for instance, elements \"up to a given value\". <p> Also while the interval is for default closed (inclusive) it's possible to specify open intervals prefixing the score with a \"(\" character, so for instance: <p> {@code ZRANGEBYSCORE zset (1.3 5}<p> Will return all the values with score > 1.3 and <= 5, while for instance: <p> {@code ZRANGEBYSCORE zset (5 (10}<p> Will return all the values with score > 5 and < 10 (5 and 10 excluded). <p> <b>Time complexity:</b> <p> O(log(N))+O(M) with N being the number of elements in the sorted set and M the number of elements returned by the command, so if M is constant (for instance you always ask for the first ten elements with LIMIT) you can consider it O(log(N))\n * @see #zrangeByScore(String,double,double)\n * @see #zrangeByScore(String,double,double,int,int)\n * @see #zrangeByScoreWithScores(String,double,double)\n * @see #zrangeByScoreWithScores(String,double,double,int,int)\n * @see #zcount(String,double,double)\n * @param key\n * @param min\n * @param max\n * @return Multi bulk reply specifically a list of elements in the specified score range.\n */\npublic Set<String> zrangeByScore(final String key,final double min,final double max,final int offset,final int count){\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> members=client.getMultiBulkReply();\n  if (members == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(members);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 70,
                    "astHeight": 8
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 1924,
                    "startColumnNumber": 4,
                    "endLineNumber": 1924,
                    "endColumnNumber": 55
                },
                "nodeContext": "client.zrangeByScore(key,min,max,offset,count);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "redis.clients.jedis.Client"
        },
        {
            "nodeContext": "client",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 1925,
                "startColumnNumber": 33,
                "endLineNumber": 1925,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 1925,
                        "startColumnNumber": 33,
                        "endLineNumber": 1925,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "client.getMultiBulkReply()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1925,
                        "startColumnNumber": 23,
                        "endLineNumber": 1925,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "members=client.getMultiBulkReply()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 1925,
                        "startColumnNumber": 4,
                        "endLineNumber": 1925,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "final List<String> members=client.getMultiBulkReply();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 243,
                        "startLineNumber": 1922,
                        "startColumnNumber": 41,
                        "endLineNumber": 1930,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> members=client.getMultiBulkReply();\n  if (members == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(members);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 40,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2746,
                        "startLineNumber": 1874,
                        "startColumnNumber": 2,
                        "endLineNumber": 1930,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Return the all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). <p> The elements having the same score are returned sorted lexicographically as ASCII strings (this follows from a property of Redis sorted sets and does not involve further computation). <p> Using the optional  {@link #zrangeByScore(String,double,double,int,int) LIMIT} it's possibleto get only a range of the matching elements in an SQL-alike way. Note that if offset is large the commands needs to traverse the list for offset elements and this adds up to the O(M) figure. <p> The  {@link #zcount(String,double,double) ZCOUNT} command is similar to{@link #zrangeByScore(String,double,double) ZRANGEBYSCORE} but instead of returning theactual elements in the specified interval, it just returns the number of matching elements. <p> <b>Exclusive intervals and infinity</b> <p> min and max can be -inf and +inf, so that you are not required to know what's the greatest or smallest element in order to take, for instance, elements \"up to a given value\". <p> Also while the interval is for default closed (inclusive) it's possible to specify open intervals prefixing the score with a \"(\" character, so for instance: <p> {@code ZRANGEBYSCORE zset (1.3 5}<p> Will return all the values with score > 1.3 and <= 5, while for instance: <p> {@code ZRANGEBYSCORE zset (5 (10}<p> Will return all the values with score > 5 and < 10 (5 and 10 excluded). <p> <b>Time complexity:</b> <p> O(log(N))+O(M) with N being the number of elements in the sorted set and M the number of elements returned by the command, so if M is constant (for instance you always ask for the first ten elements with LIMIT) you can consider it O(log(N))\n * @see #zrangeByScore(String,double,double)\n * @see #zrangeByScore(String,double,double,int,int)\n * @see #zrangeByScoreWithScores(String,double,double)\n * @see #zrangeByScoreWithScores(String,double,double,int,int)\n * @see #zcount(String,double,double)\n * @param key\n * @param min\n * @param max\n * @return Multi bulk reply specifically a list of elements in the specified score range.\n */\npublic Set<String> zrangeByScore(final String key,final double min,final double max,final int offset,final int count){\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> members=client.getMultiBulkReply();\n  if (members == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(members);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 70,
                    "astHeight": 8
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 56,
                    "startLineNumber": 1925,
                    "startColumnNumber": 4,
                    "endLineNumber": 1925,
                    "endColumnNumber": 60
                },
                "nodeContext": "final List<String> members=client.getMultiBulkReply();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "redis.clients.jedis.Client"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 1924,
            "startColumnNumber": 4,
            "endLineNumber": 1924,
            "endColumnNumber": 10
        },
        {
            "charLength": 6,
            "startLineNumber": 1925,
            "startColumnNumber": 33,
            "endLineNumber": 1925,
            "endColumnNumber": 39
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        }
    ]
}