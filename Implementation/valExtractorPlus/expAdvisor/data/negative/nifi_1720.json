{
    "id": 1720,
    "expression": "new byte[4096]",
    "projectName": "nifi",
    "commitID": "95a3115f9bf075b704bc393bddba235e4a946710",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/util/OpenPGPKeyBasedEncryptor.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "new byte[4096]",
            "nodeType": "ArrayCreation",
            "nodePosition": {
                "charLength": 14,
                "startLineNumber": 263,
                "startColumnNumber": 54,
                "endLineNumber": 263,
                "endColumnNumber": 68
            },
            "astNodeNumber": 5,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 263,
                        "startColumnNumber": 45,
                        "endLineNumber": 263,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "buffer=new byte[4096]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 263,
                        "startColumnNumber": 32,
                        "endLineNumber": 263,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "final byte[] buffer=new byte[4096];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 319,
                        "startLineNumber": 261,
                        "startColumnNumber": 144,
                        "endLineNumber": 269,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  final byte[] buffer=new byte[4096];\n  int len;\n  while ((len=in.read(buffer)) >= 0) {\n    literalOut.write(buffer,0,len);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 35,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 435,
                        "startLineNumber": 261,
                        "startColumnNumber": 28,
                        "endLineNumber": 269,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n  final byte[] buffer=new byte[4096];\n  int len;\n  while ((len=in.read(buffer)) >= 0) {\n    literalOut.write(buffer,0,len);\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 57,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 258,
                        "startColumnNumber": 92,
                        "endLineNumber": 270,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n  try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n    final byte[] buffer=new byte[4096];\n    int len;\n    while ((len=in.read(buffer)) >= 0) {\n      literalOut.write(buffer,0,len);\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 66,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 653,
                        "startLineNumber": 258,
                        "startColumnNumber": 24,
                        "endLineNumber": 270,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n  PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n  try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n    final byte[] buffer=new byte[4096];\n    int len;\n    while ((len=in.read(buffer)) >= 0) {\n      literalOut.write(buffer,0,len);\n    }\n  }\n }\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 81,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 840,
                        "startLineNumber": 255,
                        "startColumnNumber": 91,
                        "endLineNumber": 271,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n  try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n    PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n    try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n      final byte[] buffer=new byte[4096];\n      int len;\n      while ((len=in.read(buffer)) >= 0) {\n        literalOut.write(buffer,0,len);\n      }\n    }\n   }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 96,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 911,
                        "startLineNumber": 255,
                        "startColumnNumber": 20,
                        "endLineNumber": 271,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n  PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n  try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n    PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n    try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n      final byte[] buffer=new byte[4096];\n      int len;\n      while ((len=in.read(buffer)) >= 0) {\n        literalOut.write(buffer,0,len);\n      }\n    }\n   }\n }\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 111,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1153,
                        "startLineNumber": 252,
                        "startColumnNumber": 20,
                        "endLineNumber": 272,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n  encGenerator.addMethod(publicKey);\n  try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n    PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n    try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n      PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n      try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n        final byte[] buffer=new byte[4096];\n        int len;\n        while ((len=in.read(buffer)) >= 0) {\n          literalOut.write(buffer,0,len);\n        }\n      }\n     }\n   }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 131,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1322,
                        "startLineNumber": 252,
                        "startColumnNumber": 16,
                        "endLineNumber": 276,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n  encGenerator.addMethod(publicKey);\n  try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n    PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n    try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n      PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n      try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n        final byte[] buffer=new byte[4096];\n        int len;\n        while ((len=in.read(buffer)) >= 0) {\n          literalOut.write(buffer,0,len);\n        }\n      }\n     }\n   }\n }\n  finally {\n  if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n    output.close();\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 143,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1642,
                        "startLineNumber": 244,
                        "startColumnNumber": 16,
                        "endLineNumber": 277,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n  OutputStream output=out;\n  if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n    output=new ArmoredOutputStream(out);\n  }\n  try {\n    PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n    encGenerator.addMethod(publicKey);\n    try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n      PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n      try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n        PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n        try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n          final byte[] buffer=new byte[4096];\n          int len;\n          while ((len=in.read(buffer)) >= 0) {\n            literalOut.write(buffer,0,len);\n          }\n        }\n       }\n     }\n   }\n  finally {\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output.close();\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 172,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1742,
                        "startLineNumber": 244,
                        "startColumnNumber": 12,
                        "endLineNumber": 279,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n  OutputStream output=out;\n  if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n    output=new ArmoredOutputStream(out);\n  }\n  try {\n    PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n    encGenerator.addMethod(publicKey);\n    try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n      PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n      try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n        PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n        try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n          final byte[] buffer=new byte[4096];\n          int len;\n          while ((len=in.read(buffer)) >= 0) {\n            literalOut.write(buffer,0,len);\n          }\n        }\n       }\n     }\n   }\n  finally {\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output.close();\n    }\n  }\n}\n catch (Exception e) {\n  throw new ProcessException(e.getMessage());\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 186,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2026,
                        "startLineNumber": 236,
                        "startColumnNumber": 81,
                        "endLineNumber": 280,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  PGPPublicKey publicKey;\n  try {\n    publicKey=getPublicKey(userId,publicKeyring);\n  }\n catch (  Exception e) {\n    throw new ProcessException(\"Invalid public keyring - \" + e.getMessage());\n  }\n  try {\n    SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n    OutputStream output=out;\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output=new ArmoredOutputStream(out);\n    }\n    try {\n      PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n      encGenerator.addMethod(publicKey);\n      try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n        PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n        try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n          PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n          try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n            final byte[] buffer=new byte[4096];\n            int len;\n            while ((len=in.read(buffer)) >= 0) {\n              literalOut.write(buffer,0,len);\n            }\n          }\n         }\n       }\n     }\n  finally {\n      if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n        output.close();\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new ProcessException(e.getMessage());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 216,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2117,
                        "startLineNumber": 235,
                        "startColumnNumber": 8,
                        "endLineNumber": 280,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "@Override public void process(InputStream in,OutputStream out) throws IOException {\n  PGPPublicKey publicKey;\n  try {\n    publicKey=getPublicKey(userId,publicKeyring);\n  }\n catch (  Exception e) {\n    throw new ProcessException(\"Invalid public keyring - \" + e.getMessage());\n  }\n  try {\n    SecureRandom secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);\n    OutputStream output=out;\n    if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n      output=new ArmoredOutputStream(out);\n    }\n    try {\n      PGPEncryptedDataGenerator encGenerator=new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5,false,secureRandom,provider);\n      encGenerator.addMethod(publicKey);\n      try (OutputStream encOut=encGenerator.open(output,new byte[65536])){\n        PGPCompressedDataGenerator compData=new PGPCompressedDataGenerator(PGPCompressedData.ZIP,Deflater.BEST_SPEED);\n        try (OutputStream compOut=compData.open(encOut,new byte[65536])){\n          PGPLiteralDataGenerator literal=new PGPLiteralDataGenerator();\n          try (OutputStream literalOut=literal.open(compOut,PGPLiteralData.BINARY,filename,new Date(),new byte[65536])){\n            final byte[] buffer=new byte[4096];\n            int len;\n            while ((len=in.read(buffer)) >= 0) {\n              literalOut.write(buffer,0,len);\n            }\n          }\n         }\n       }\n     }\n  finally {\n      if (EncryptContent.isPGPArmoredAlgorithm(algorithm)) {\n        output.close();\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new ProcessException(e.getMessage());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 232,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 263,
                    "startColumnNumber": 32,
                    "endLineNumber": 263,
                    "endColumnNumber": 69
                },
                "nodeContext": "final byte[] buffer=new byte[4096];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "byte[]"
        }
    ],
    "positionList": [
        {
            "charLength": 14,
            "startLineNumber": 263,
            "startColumnNumber": 54,
            "endLineNumber": 263,
            "endColumnNumber": 68
        }
    ],
    "layoutRelationDataList": []
}