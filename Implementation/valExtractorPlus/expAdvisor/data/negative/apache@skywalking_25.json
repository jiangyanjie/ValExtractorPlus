{
    "id": 25,
    "expression": "i",
    "projectName": "apache@skywalking",
    "commitID": "1473c04d3e0973d08e4e478dbbccaa3873377e7c",
    "filePath": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java",
    "occurrences": 3,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 91,
                "startColumnNumber": 24,
                "endLineNumber": 91,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 91,
                        "startColumnNumber": 24,
                        "endLineNumber": 91,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "i < values.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 375,
                        "startLineNumber": 91,
                        "startColumnNumber": 8,
                        "endLineNumber": 97,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < values.length; i++) {\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String key=String.format(template,bucketName);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 65,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 901,
                        "startLineNumber": 76,
                        "startColumnNumber": 77,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 131,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 988,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 147,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 91,
                    "startColumnNumber": 24,
                    "endLineNumber": 91,
                    "endColumnNumber": 41
                },
                "nodeContext": "i < values.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 92,
                "startColumnNumber": 45,
                "endLineNumber": 92,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 92,
                        "startColumnNumber": 26,
                        "endLineNumber": 92,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "value.getBuckets()[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 92,
                        "startColumnNumber": 17,
                        "endLineNumber": 92,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "bucket=value.getBuckets()[i]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 92,
                        "startColumnNumber": 12,
                        "endLineNumber": 92,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "long bucket=value.getBuckets()[i];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 335,
                        "startLineNumber": 91,
                        "startColumnNumber": 48,
                        "endLineNumber": 97,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String key=String.format(template,bucketName);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 52,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 375,
                        "startLineNumber": 91,
                        "startColumnNumber": 8,
                        "endLineNumber": 97,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < values.length; i++) {\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String key=String.format(template,bucketName);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 65,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 901,
                        "startLineNumber": 76,
                        "startColumnNumber": 77,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 131,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 988,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 147,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 92,
                    "startColumnNumber": 12,
                    "endLineNumber": 92,
                    "endColumnNumber": 48
                },
                "nodeContext": "long bucket=value.getBuckets()[i];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "i",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 95,
                "startColumnNumber": 52,
                "endLineNumber": 95,
                "endColumnNumber": 53
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 95,
                        "startColumnNumber": 45,
                        "endLineNumber": 95,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "values[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 95,
                        "startColumnNumber": 12,
                        "endLineNumber": 95,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "summation.valueAccumulation(key,values[i])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 95,
                        "startColumnNumber": 12,
                        "endLineNumber": 95,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "summation.valueAccumulation(key,values[i]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 335,
                        "startLineNumber": 91,
                        "startColumnNumber": 48,
                        "endLineNumber": 97,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String key=String.format(template,bucketName);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 52,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 375,
                        "startLineNumber": 91,
                        "startColumnNumber": 8,
                        "endLineNumber": 97,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < values.length; i++) {\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String key=String.format(template,bucketName);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 65,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 901,
                        "startLineNumber": 76,
                        "startColumnNumber": 77,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 131,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 988,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 98,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String key=String.format(template,bucketName);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 147,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 95,
                    "startColumnNumber": 12,
                    "endLineNumber": 95,
                    "endColumnNumber": 56
                },
                "nodeContext": "summation.valueAccumulation(key,values[i]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 91,
            "startColumnNumber": 24,
            "endLineNumber": 91,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 92,
            "startColumnNumber": 45,
            "endLineNumber": 92,
            "endColumnNumber": 46
        },
        {
            "charLength": 1,
            "startLineNumber": 95,
            "startColumnNumber": 52,
            "endLineNumber": 95,
            "endColumnNumber": 53
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        }
    ]
}