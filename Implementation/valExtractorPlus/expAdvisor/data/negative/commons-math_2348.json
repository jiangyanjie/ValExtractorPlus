{
    "id": 2348,
    "expression": "len",
    "projectName": "commons-math",
    "commitID": "367fe7662e738356ef6fef47a12a5bd6e3269e5e",
    "filePath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
    "occurrences": 5,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 2629,
                "startColumnNumber": 12,
                "endLineNumber": 2629,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 2629,
                        "startColumnNumber": 12,
                        "endLineNumber": 2629,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "len != b.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 2629,
                        "startColumnNumber": 8,
                        "endLineNumber": 2631,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (len != b.length) {\n  throw new DimensionMismatchException(len,b.length);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 2629,
                    "startColumnNumber": 12,
                    "endLineNumber": 2629,
                    "endColumnNumber": 27
                },
                "nodeContext": "len != b.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 2630,
                "startColumnNumber": 49,
                "endLineNumber": 2630,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 2630,
                        "startColumnNumber": 18,
                        "endLineNumber": 2630,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "new DimensionMismatchException(len,b.length)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 2630,
                        "startColumnNumber": 12,
                        "endLineNumber": 2630,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "throw new DimensionMismatchException(len,b.length);\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 2629,
                        "startColumnNumber": 29,
                        "endLineNumber": 2631,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  throw new DimensionMismatchException(len,b.length);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 2629,
                        "startColumnNumber": 8,
                        "endLineNumber": 2631,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (len != b.length) {\n  throw new DimensionMismatchException(len,b.length);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 2630,
                    "startColumnNumber": 12,
                    "endLineNumber": 2630,
                    "endColumnNumber": 64
                },
                "nodeContext": "throw new DimensionMismatchException(len,b.length);\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 2633,
                "startColumnNumber": 45,
                "endLineNumber": 2633,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 2633,
                        "startColumnNumber": 34,
                        "endLineNumber": 2633,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "new double[len]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 2633,
                        "startColumnNumber": 23,
                        "endLineNumber": 2633,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "prodHigh=new double[len]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 2633,
                        "startColumnNumber": 8,
                        "endLineNumber": 2633,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "final double[] prodHigh=new double[len];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 2633,
                    "startColumnNumber": 8,
                    "endLineNumber": 2633,
                    "endColumnNumber": 50
                },
                "nodeContext": "final double[] prodHigh=new double[len];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 2636,
                "startColumnNumber": 28,
                "endLineNumber": 2636,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 2636,
                        "startColumnNumber": 24,
                        "endLineNumber": 2636,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "i < len",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 735,
                        "startLineNumber": 2636,
                        "startColumnNumber": 8,
                        "endLineNumber": 2652,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < len; i++) {\n  final double ai=a[i];\n  final double ca=SPLIT_FACTOR * ai;\n  final double aHigh=ca - (ca - ai);\n  final double aLow=ai - aHigh;\n  final double bi=b[i];\n  final double cb=SPLIT_FACTOR * bi;\n  final double bHigh=cb - (cb - bi);\n  final double bLow=bi - bHigh;\n  prodHigh[i]=ai * bi;\n  final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n  prodLowSum+=prodLow;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 121,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 2636,
                    "startColumnNumber": 24,
                    "endLineNumber": 2636,
                    "endColumnNumber": 31
                },
                "nodeContext": "i < len",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "len",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 2654,
                "startColumnNumber": 32,
                "endLineNumber": 2654,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 2654,
                        "startColumnNumber": 32,
                        "endLineNumber": 2654,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "len - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 2654,
                        "startColumnNumber": 18,
                        "endLineNumber": 2654,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "lenMinusOne=len - 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 2654,
                        "startColumnNumber": 8,
                        "endLineNumber": 2654,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "final int lenMinusOne=len - 1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 2654,
                    "startColumnNumber": 8,
                    "endLineNumber": 2654,
                    "endColumnNumber": 40
                },
                "nodeContext": "final int lenMinusOne=len - 1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 2629,
            "startColumnNumber": 12,
            "endLineNumber": 2629,
            "endColumnNumber": 15
        },
        {
            "charLength": 3,
            "startLineNumber": 2630,
            "startColumnNumber": 49,
            "endLineNumber": 2630,
            "endColumnNumber": 52
        },
        {
            "charLength": 3,
            "startLineNumber": 2633,
            "startColumnNumber": 45,
            "endLineNumber": 2633,
            "endColumnNumber": 48
        },
        {
            "charLength": 3,
            "startLineNumber": 2636,
            "startColumnNumber": 28,
            "endLineNumber": 2636,
            "endColumnNumber": 31
        },
        {
            "charLength": 3,
            "startLineNumber": 2654,
            "startColumnNumber": 32,
            "endLineNumber": 2654,
            "endColumnNumber": 35
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        }
    ]
}