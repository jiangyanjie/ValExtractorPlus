{
    "id": 945,
    "expression": "limit",
    "projectName": "jackrabbit-oak",
    "commitID": "93716466253f6a726c68e5bad26416940857a6c8",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/query/QueryImpl.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "limit",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 942,
                "startColumnNumber": 37,
                "endLineNumber": 942,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 942,
                        "startColumnNumber": 21,
                        "endLineNumber": 942,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "maxEntryCount=limit",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 942,
                        "startColumnNumber": 16,
                        "endLineNumber": 942,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "long maxEntryCount=limit;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2343,
                        "startLineNumber": 914,
                        "startColumnNumber": 53,
                        "endLineNumber": 963,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 226,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2462,
                        "startLineNumber": 914,
                        "startColumnNumber": 12,
                        "endLineNumber": 965,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (index instanceof AdvancedQueryIndex) {\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n else {\n  cost=index.getCost(filter,rootState);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 240,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2967,
                        "startLineNumber": 911,
                        "startColumnNumber": 74,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 299,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3033,
                        "startLineNumber": 911,
                        "startColumnNumber": 8,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 308,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 942,
                    "startColumnNumber": 16,
                    "endLineNumber": 942,
                    "endColumnNumber": 43
                },
                "nodeContext": "long maxEntryCount=limit;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "limit",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 944,
                "startColumnNumber": 33,
                "endLineNumber": 944,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 944,
                        "startColumnNumber": 24,
                        "endLineNumber": 944,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "offset + limit",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 944,
                        "startColumnNumber": 24,
                        "endLineNumber": 944,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "offset + limit < 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 229,
                        "startLineNumber": 944,
                        "startColumnNumber": 20,
                        "endLineNumber": 949,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (offset + limit < 0) {\n  maxEntryCount=Long.MAX_VALUE;\n}\n else {\n  maxEntryCount=offset + limit;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 943,
                        "startColumnNumber": 32,
                        "endLineNumber": 950,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (offset + limit < 0) {\n    maxEntryCount=Long.MAX_VALUE;\n  }\n else {\n    maxEntryCount=offset + limit;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 285,
                        "startLineNumber": 943,
                        "startColumnNumber": 16,
                        "endLineNumber": 950,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (offset > 0) {\n  if (offset + limit < 0) {\n    maxEntryCount=Long.MAX_VALUE;\n  }\n else {\n    maxEntryCount=offset + limit;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2343,
                        "startLineNumber": 914,
                        "startColumnNumber": 53,
                        "endLineNumber": 963,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 226,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2462,
                        "startLineNumber": 914,
                        "startColumnNumber": 12,
                        "endLineNumber": 965,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (index instanceof AdvancedQueryIndex) {\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n else {\n  cost=index.getCost(filter,rootState);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 240,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2967,
                        "startLineNumber": 911,
                        "startColumnNumber": 74,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 299,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3033,
                        "startLineNumber": 911,
                        "startColumnNumber": 8,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 308,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 944,
                    "startColumnNumber": 24,
                    "endLineNumber": 944,
                    "endColumnNumber": 42
                },
                "nodeContext": "offset + limit < 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "limit",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 948,
                "startColumnNumber": 49,
                "endLineNumber": 948,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 948,
                        "startColumnNumber": 40,
                        "endLineNumber": 948,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "offset + limit",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 948,
                        "startColumnNumber": 24,
                        "endLineNumber": 948,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "maxEntryCount=offset + limit",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 948,
                        "startColumnNumber": 24,
                        "endLineNumber": 948,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "maxEntryCount=offset + limit;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 947,
                        "startColumnNumber": 27,
                        "endLineNumber": 949,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  maxEntryCount=offset + limit;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 229,
                        "startLineNumber": 944,
                        "startColumnNumber": 20,
                        "endLineNumber": 949,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (offset + limit < 0) {\n  maxEntryCount=Long.MAX_VALUE;\n}\n else {\n  maxEntryCount=offset + limit;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 943,
                        "startColumnNumber": 32,
                        "endLineNumber": 950,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (offset + limit < 0) {\n    maxEntryCount=Long.MAX_VALUE;\n  }\n else {\n    maxEntryCount=offset + limit;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 285,
                        "startLineNumber": 943,
                        "startColumnNumber": 16,
                        "endLineNumber": 950,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (offset > 0) {\n  if (offset + limit < 0) {\n    maxEntryCount=Long.MAX_VALUE;\n  }\n else {\n    maxEntryCount=offset + limit;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2343,
                        "startLineNumber": 914,
                        "startColumnNumber": 53,
                        "endLineNumber": 963,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 226,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2462,
                        "startLineNumber": 914,
                        "startColumnNumber": 12,
                        "endLineNumber": 965,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (index instanceof AdvancedQueryIndex) {\n  AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n  List<OrderEntry> sortOrder=null;\n  if (orderings != null) {\n    sortOrder=new ArrayList<OrderEntry>();\n    for (    OrderingImpl o : orderings) {\n      DynamicOperandImpl op=o.getOperand();\n      if (!(op instanceof PropertyValueImpl)) {\n        break;\n      }\n      PropertyValueImpl p=(PropertyValueImpl)op;\n      SelectorImpl s=p.getSelectors().iterator().next();\n      if (!s.equals(filter.getSelector())) {\n        continue;\n      }\n      OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n      sortOrder.add(e);\n    }\n    if (sortOrder.size() == 0) {\n      sortOrder=null;\n    }\n  }\n  long maxEntryCount=limit;\n  if (offset > 0) {\n    if (offset + limit < 0) {\n      maxEntryCount=Long.MAX_VALUE;\n    }\n else {\n      maxEntryCount=offset + limit;\n    }\n  }\n  List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n  cost=Double.POSITIVE_INFINITY;\n  for (  IndexPlan p : ipList) {\n    long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n    double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n    if (c < cost) {\n      cost=c;\n      indexPlan=p;\n    }\n  }\n}\n else {\n  cost=index.getCost(filter,rootState);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 240,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 2967,
                        "startLineNumber": 911,
                        "startColumnNumber": 74,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 299,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3033,
                        "startLineNumber": 911,
                        "startColumnNumber": 8,
                        "endLineNumber": 977,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n  double cost;\n  IndexPlan indexPlan=null;\n  if (index instanceof AdvancedQueryIndex) {\n    AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n    List<OrderEntry> sortOrder=null;\n    if (orderings != null) {\n      sortOrder=new ArrayList<OrderEntry>();\n      for (      OrderingImpl o : orderings) {\n        DynamicOperandImpl op=o.getOperand();\n        if (!(op instanceof PropertyValueImpl)) {\n          break;\n        }\n        PropertyValueImpl p=(PropertyValueImpl)op;\n        SelectorImpl s=p.getSelectors().iterator().next();\n        if (!s.equals(filter.getSelector())) {\n          continue;\n        }\n        OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n        sortOrder.add(e);\n      }\n      if (sortOrder.size() == 0) {\n        sortOrder=null;\n      }\n    }\n    long maxEntryCount=limit;\n    if (offset > 0) {\n      if (offset + limit < 0) {\n        maxEntryCount=Long.MAX_VALUE;\n      }\n else {\n        maxEntryCount=offset + limit;\n      }\n    }\n    List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n    cost=Double.POSITIVE_INFINITY;\n    for (    IndexPlan p : ipList) {\n      long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n      double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n      if (c < cost) {\n        cost=c;\n        indexPlan=p;\n      }\n    }\n  }\n else {\n    cost=index.getCost(filter,rootState);\n  }\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < 0) {\n    LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n  }\n  if (cost < bestCost) {\n    bestCost=cost;\n    bestIndex=index;\n    bestPlan=indexPlan;\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 308,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3863,
                        "startLineNumber": 903,
                        "startColumnNumber": 72,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4047,
                        "startLineNumber": 901,
                        "startColumnNumber": 4,
                        "endLineNumber": 992,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SelectorExecutionPlan getBestSelectorExecutionPlan(NodeState rootState,FilterImpl filter,QueryIndexProvider indexProvider,boolean traversalEnabled){\n  QueryIndex bestIndex=null;\n  if (LOG.isDebugEnabled()) {\n    logDebug(\"cost using filter \" + filter);\n  }\n  double bestCost=Double.POSITIVE_INFINITY;\n  IndexPlan bestPlan=null;\n  for (  QueryIndex index : indexProvider.getQueryIndexes(rootState)) {\n    double cost;\n    IndexPlan indexPlan=null;\n    if (index instanceof AdvancedQueryIndex) {\n      AdvancedQueryIndex advIndex=(AdvancedQueryIndex)index;\n      List<OrderEntry> sortOrder=null;\n      if (orderings != null) {\n        sortOrder=new ArrayList<OrderEntry>();\n        for (        OrderingImpl o : orderings) {\n          DynamicOperandImpl op=o.getOperand();\n          if (!(op instanceof PropertyValueImpl)) {\n            break;\n          }\n          PropertyValueImpl p=(PropertyValueImpl)op;\n          SelectorImpl s=p.getSelectors().iterator().next();\n          if (!s.equals(filter.getSelector())) {\n            continue;\n          }\n          OrderEntry e=new OrderEntry(p.getPropertyName(),Type.UNDEFINED,o.isDescending() ? OrderEntry.Order.DESCENDING : OrderEntry.Order.ASCENDING);\n          sortOrder.add(e);\n        }\n        if (sortOrder.size() == 0) {\n          sortOrder=null;\n        }\n      }\n      long maxEntryCount=limit;\n      if (offset > 0) {\n        if (offset + limit < 0) {\n          maxEntryCount=Long.MAX_VALUE;\n        }\n else {\n          maxEntryCount=offset + limit;\n        }\n      }\n      List<IndexPlan> ipList=advIndex.getPlans(filter,sortOrder,rootState);\n      cost=Double.POSITIVE_INFINITY;\n      for (      IndexPlan p : ipList) {\n        long entryCount=Math.min(maxEntryCount,p.getEstimatedEntryCount());\n        double c=p.getCostPerExecution() + entryCount * p.getCostPerEntry();\n        if (c < cost) {\n          cost=c;\n          indexPlan=p;\n        }\n      }\n    }\n else {\n      cost=index.getCost(filter,rootState);\n    }\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < 0) {\n      LOG.error(\"cost below 0 for \" + index.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost) {\n      bestCost=cost;\n      bestIndex=index;\n      bestPlan=indexPlan;\n    }\n  }\n  if (traversalEnabled) {\n    QueryIndex traversal=new TraversingIndex();\n    double cost=traversal.getCost(filter,rootState);\n    if (LOG.isDebugEnabled()) {\n      logDebug(\"cost for \" + traversal.getIndexName() + \" is \"+ cost);\n    }\n    if (cost < bestCost || bestCost == Double.POSITIVE_INFINITY) {\n      bestCost=cost;\n      bestPlan=null;\n      bestIndex=traversal;\n    }\n  }\n  return new SelectorExecutionPlan(filter.getSelector(),bestIndex,bestPlan,bestCost);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 427,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 948,
                    "startColumnNumber": 24,
                    "endLineNumber": 948,
                    "endColumnNumber": 55
                },
                "nodeContext": "maxEntryCount=offset + limit;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 942,
            "startColumnNumber": 37,
            "endLineNumber": 942,
            "endColumnNumber": 42
        },
        {
            "charLength": 5,
            "startLineNumber": 944,
            "startColumnNumber": 33,
            "endLineNumber": 944,
            "endColumnNumber": 38
        },
        {
            "charLength": 5,
            "startLineNumber": 948,
            "startColumnNumber": 49,
            "endLineNumber": 948,
            "endColumnNumber": 54
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        }
    ]
}