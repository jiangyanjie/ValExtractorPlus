{
    "id": 425,
    "expression": "callback",
    "projectName": "jackrabbit-oak",
    "commitID": "738adeb9b9e9503110b87725fc6d91da07bc5e81",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditorProvider.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "callback",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 130,
                "startColumnNumber": 26,
                "endLineNumber": 130,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 130,
                        "startColumnNumber": 26,
                        "endLineNumber": 130,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "callback instanceof ContextAwareCallback",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 131,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 150,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 131,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3546,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 199,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3576,
                        "startLineNumber": 129,
                        "startColumnNumber": 8,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (TYPE_LUCENE.equals(type)) {\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 204,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3613,
                        "startLineNumber": 128,
                        "startColumnNumber": 41,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3841,
                        "startLineNumber": 124,
                        "startColumnNumber": 4,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Editor getIndexEditor(@Nonnull String type,@Nonnull NodeBuilder definition,@Nonnull NodeState root,@Nonnull IndexUpdateCallback callback) throws CommitFailedException {\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 240,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 130,
                    "startColumnNumber": 26,
                    "endLineNumber": 130,
                    "endColumnNumber": 66
                },
                "nodeContext": "callback instanceof ContextAwareCallback",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback"
        },
        {
            "nodeContext": "callback",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 131,
                "startColumnNumber": 49,
                "endLineNumber": 131,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 131,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 150,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 131,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3546,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 199,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3576,
                        "startLineNumber": 129,
                        "startColumnNumber": 8,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (TYPE_LUCENE.equals(type)) {\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 204,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3613,
                        "startLineNumber": 128,
                        "startColumnNumber": 41,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3841,
                        "startLineNumber": 124,
                        "startColumnNumber": 4,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Editor getIndexEditor(@Nonnull String type,@Nonnull NodeBuilder definition,@Nonnull NodeState root,@Nonnull IndexUpdateCallback callback) throws CommitFailedException {\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 240,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 149,
                    "startLineNumber": 130,
                    "startColumnNumber": 12,
                    "endLineNumber": 131,
                    "endColumnNumber": 58
                },
                "nodeContext": "checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback"
        },
        {
            "nodeContext": "callback",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 132,
                "startColumnNumber": 69,
                "endLineNumber": 132,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 132,
                        "startColumnNumber": 47,
                        "endLineNumber": 132,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "(ContextAwareCallback)callback",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 132,
                        "startColumnNumber": 46,
                        "endLineNumber": 132,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "((ContextAwareCallback)callback)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 132,
                        "startColumnNumber": 46,
                        "endLineNumber": 132,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "((ContextAwareCallback)callback).getIndexingContext()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 132,
                        "startColumnNumber": 28,
                        "endLineNumber": 132,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "indexingContext=((ContextAwareCallback)callback).getIndexingContext()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 88,
                        "startLineNumber": 132,
                        "startColumnNumber": 12,
                        "endLineNumber": 132,
                        "endColumnNumber": 100
                    },
                    "nodeContext": "IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3546,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 199,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3576,
                        "startLineNumber": 129,
                        "startColumnNumber": 8,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (TYPE_LUCENE.equals(type)) {\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 204,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3613,
                        "startLineNumber": 128,
                        "startColumnNumber": 41,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3841,
                        "startLineNumber": 124,
                        "startColumnNumber": 4,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Editor getIndexEditor(@Nonnull String type,@Nonnull NodeBuilder definition,@Nonnull NodeState root,@Nonnull IndexUpdateCallback callback) throws CommitFailedException {\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 240,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 88,
                    "startLineNumber": 132,
                    "startColumnNumber": 12,
                    "endLineNumber": 132,
                    "endColumnNumber": 100
                },
                "nodeContext": "IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback"
        },
        {
            "nodeContext": "callback",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 187,
                "startColumnNumber": 111,
                "endLineNumber": 187,
                "endColumnNumber": 119
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 178,
                        "startLineNumber": 187,
                        "startColumnNumber": 47,
                        "endLineNumber": 188,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 188,
                        "startLineNumber": 187,
                        "startColumnNumber": 37,
                        "endLineNumber": 188,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 187,
                        "startColumnNumber": 12,
                        "endLineNumber": 188,
                        "endColumnNumber": 105
                    },
                    "nodeContext": "LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3546,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 199,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3576,
                        "startLineNumber": 129,
                        "startColumnNumber": 8,
                        "endLineNumber": 190,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (TYPE_LUCENE.equals(type)) {\n  checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n  IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n  BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n  indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n  LuceneIndexWriterFactory writerFactory=null;\n  IndexDefinition indexDefinition=null;\n  boolean asyncIndexing=true;\n  if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n    if (indexingContext.isReindexing()) {\n      return null;\n    }\n    CommitContext commitContext=getCommitContext(indexingContext);\n    if (commitContext == null) {\n      log.warn(\"No CommitContext found for commit\",new Exception());\n      return null;\n    }\n    writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n    if (indexTracker != null) {\n      indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n      if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n        log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n        indexDefinition=null;\n      }\n    }\n    definition=new ReadOnlyBuilder(definition.getNodeState());\n    asyncIndexing=false;\n  }\n  if (writerFactory == null) {\n    writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n  }\n  LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n  return new LuceneIndexEditor(context);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 204,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3613,
                        "startLineNumber": 128,
                        "startColumnNumber": 41,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3841,
                        "startLineNumber": 124,
                        "startColumnNumber": 4,
                        "endLineNumber": 192,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Editor getIndexEditor(@Nonnull String type,@Nonnull NodeBuilder definition,@Nonnull NodeState root,@Nonnull IndexUpdateCallback callback) throws CommitFailedException {\n  if (TYPE_LUCENE.equals(type)) {\n    checkArgument(callback instanceof ContextAwareCallback,\"callback instance not of type \" + \"ContextAwareCallback [%s]\",callback);\n    IndexingContext indexingContext=((ContextAwareCallback)callback).getIndexingContext();\n    BlobDeletionCallback blobDeletionCallback=activeDeletedBlobCollector.getBlobDeletionCallback();\n    indexingContext.registerIndexCommitCallback(blobDeletionCallback);\n    LuceneIndexWriterFactory writerFactory=null;\n    IndexDefinition indexDefinition=null;\n    boolean asyncIndexing=true;\n    if (nrtIndexingEnabled() && !indexingContext.isAsync() && IndexDefinition.supportsSyncOrNRTIndexing(definition)) {\n      if (indexingContext.isReindexing()) {\n        return null;\n      }\n      CommitContext commitContext=getCommitContext(indexingContext);\n      if (commitContext == null) {\n        log.warn(\"No CommitContext found for commit\",new Exception());\n        return null;\n      }\n      writerFactory=new LocalIndexWriterFactory(getDocumentHolder(commitContext),indexingContext.getIndexPath());\n      if (indexTracker != null) {\n        indexDefinition=indexTracker.getIndexDefinition(indexingContext.getIndexPath());\n        if (indexDefinition != null && !indexDefinition.hasMatchingNodeTypeReg(root)) {\n          log.debug(\"Detected change in NodeType registry for index {}. Would not use \" + \"existing index definition\",indexDefinition.getIndexPath());\n          indexDefinition=null;\n        }\n      }\n      definition=new ReadOnlyBuilder(definition.getNodeState());\n      asyncIndexing=false;\n    }\n    if (writerFactory == null) {\n      writerFactory=new DefaultIndexWriterFactory(mountInfoProvider,newDirectoryFactory(blobDeletionCallback),writerConfig);\n    }\n    LuceneIndexEditorContext context=new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing);\n    return new LuceneIndexEditor(context);\n  }\n  return null;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 240,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 178,
                    "startLineNumber": 187,
                    "startColumnNumber": 47,
                    "endLineNumber": 188,
                    "endColumnNumber": 104
                },
                "nodeContext": "new LuceneIndexEditorContext(root,definition,indexDefinition,callback,writerFactory,extractedTextCache,augmentorFactory,indexingContext,asyncIndexing)",
                "nodeType": "ClassInstanceCreation",
                "astNodeNumber": 12,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.index.IndexUpdateCallback"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 130,
            "startColumnNumber": 26,
            "endLineNumber": 130,
            "endColumnNumber": 34
        },
        {
            "charLength": 8,
            "startLineNumber": 131,
            "startColumnNumber": 49,
            "endLineNumber": 131,
            "endColumnNumber": 57
        },
        {
            "charLength": 8,
            "startLineNumber": 132,
            "startColumnNumber": 69,
            "endLineNumber": 132,
            "endColumnNumber": 77
        },
        {
            "charLength": 8,
            "startLineNumber": 187,
            "startColumnNumber": 111,
            "endLineNumber": 187,
            "endColumnNumber": 119
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 0
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        }
    ]
}