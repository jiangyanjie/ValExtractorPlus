{
    "id": 953,
    "expression": "ze",
    "projectName": "commons-compress",
    "commitID": "8543b030e93fa71b6093ac7d4cdb8c4e98bfd63d",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
    "occurrences": 22,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 749,
                "startColumnNumber": 8,
                "endLineNumber": 749,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 749,
                        "startColumnNumber": 8,
                        "endLineNumber": 749,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "ze.setVersionMadeBy(versionMadeBy)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 749,
                        "startColumnNumber": 8,
                        "endLineNumber": 749,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "ze.setVersionMadeBy(versionMadeBy);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 749,
                    "startColumnNumber": 8,
                    "endLineNumber": 749,
                    "endColumnNumber": 43
                },
                "nodeContext": "ze.setVersionMadeBy(versionMadeBy);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 750,
                "startColumnNumber": 8,
                "endLineNumber": 750,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 750,
                        "startColumnNumber": 8,
                        "endLineNumber": 750,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 750,
                        "startColumnNumber": 8,
                        "endLineNumber": 750,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 750,
                    "startColumnNumber": 8,
                    "endLineNumber": 750,
                    "endColumnNumber": 68
                },
                "nodeContext": "ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 752,
                "startColumnNumber": 8,
                "endLineNumber": 752,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 752,
                        "startColumnNumber": 8,
                        "endLineNumber": 752,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "ze.setVersionRequired(ZipShort.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 752,
                        "startColumnNumber": 8,
                        "endLineNumber": 752,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 752,
                    "startColumnNumber": 8,
                    "endLineNumber": 752,
                    "endColumnNumber": 62
                },
                "nodeContext": "ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 760,
                "startColumnNumber": 12,
                "endLineNumber": 760,
                "endColumnNumber": 14
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 760,
                        "startColumnNumber": 12,
                        "endLineNumber": 760,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 760,
                        "startColumnNumber": 12,
                        "endLineNumber": 760,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 759,
                        "startColumnNumber": 25,
                        "endLineNumber": 761,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 759,
                        "startColumnNumber": 8,
                        "endLineNumber": 761,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hasUTF8Flag) {\n  ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 64,
                    "startLineNumber": 760,
                    "startColumnNumber": 12,
                    "endLineNumber": 760,
                    "endColumnNumber": 76
                },
                "nodeContext": "ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 762,
                "startColumnNumber": 8,
                "endLineNumber": 762,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 762,
                        "startColumnNumber": 8,
                        "endLineNumber": 762,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "ze.setGeneralPurposeBit(gpFlag)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 762,
                        "startColumnNumber": 8,
                        "endLineNumber": 762,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "ze.setGeneralPurposeBit(gpFlag);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 762,
                    "startColumnNumber": 8,
                    "endLineNumber": 762,
                    "endColumnNumber": 40
                },
                "nodeContext": "ze.setGeneralPurposeBit(gpFlag);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 763,
                "startColumnNumber": 8,
                "endLineNumber": 763,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 763,
                        "startColumnNumber": 8,
                        "endLineNumber": 763,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "ze.setRawFlag(ZipShort.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 763,
                        "startColumnNumber": 8,
                        "endLineNumber": 763,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 763,
                    "startColumnNumber": 8,
                    "endLineNumber": 763,
                    "endColumnNumber": 54
                },
                "nodeContext": "ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 768,
                "startColumnNumber": 8,
                "endLineNumber": 768,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 768,
                        "startColumnNumber": 8,
                        "endLineNumber": 768,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "ze.setMethod(ZipShort.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 768,
                        "startColumnNumber": 8,
                        "endLineNumber": 768,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "ze.setMethod(ZipShort.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 768,
                    "startColumnNumber": 8,
                    "endLineNumber": 768,
                    "endColumnNumber": 53
                },
                "nodeContext": "ze.setMethod(ZipShort.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 772,
                "startColumnNumber": 8,
                "endLineNumber": 772,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 772,
                        "startColumnNumber": 8,
                        "endLineNumber": 772,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "ze.setTime(time)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 772,
                        "startColumnNumber": 8,
                        "endLineNumber": 772,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "ze.setTime(time);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 772,
                    "startColumnNumber": 8,
                    "endLineNumber": 772,
                    "endColumnNumber": 25
                },
                "nodeContext": "ze.setTime(time);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 775,
                "startColumnNumber": 8,
                "endLineNumber": 775,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 775,
                        "startColumnNumber": 8,
                        "endLineNumber": 775,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "ze.setCrc(ZipLong.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 775,
                        "startColumnNumber": 8,
                        "endLineNumber": 775,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "ze.setCrc(ZipLong.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 775,
                    "startColumnNumber": 8,
                    "endLineNumber": 775,
                    "endColumnNumber": 49
                },
                "nodeContext": "ze.setCrc(ZipLong.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 778,
                "startColumnNumber": 8,
                "endLineNumber": 778,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 778,
                        "startColumnNumber": 8,
                        "endLineNumber": 778,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "ze.setCompressedSize(ZipLong.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 778,
                        "startColumnNumber": 8,
                        "endLineNumber": 778,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 778,
                    "startColumnNumber": 8,
                    "endLineNumber": 778,
                    "endColumnNumber": 60
                },
                "nodeContext": "ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 781,
                "startColumnNumber": 8,
                "endLineNumber": 781,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 781,
                        "startColumnNumber": 8,
                        "endLineNumber": 781,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "ze.setSize(ZipLong.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 781,
                        "startColumnNumber": 8,
                        "endLineNumber": 781,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "ze.setSize(ZipLong.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 781,
                    "startColumnNumber": 8,
                    "endLineNumber": 781,
                    "endColumnNumber": 50
                },
                "nodeContext": "ze.setSize(ZipLong.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 793,
                "startColumnNumber": 8,
                "endLineNumber": 793,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 793,
                        "startColumnNumber": 8,
                        "endLineNumber": 793,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 793,
                        "startColumnNumber": 8,
                        "endLineNumber": 793,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 793,
                    "startColumnNumber": 8,
                    "endLineNumber": 793,
                    "endColumnNumber": 62
                },
                "nodeContext": "ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 796,
                "startColumnNumber": 8,
                "endLineNumber": 796,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 796,
                        "startColumnNumber": 8,
                        "endLineNumber": 796,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 796,
                        "startColumnNumber": 8,
                        "endLineNumber": 796,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 796,
                    "startColumnNumber": 8,
                    "endLineNumber": 796,
                    "endColumnNumber": 65
                },
                "nodeContext": "ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 799,
                "startColumnNumber": 8,
                "endLineNumber": 799,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 799,
                        "startColumnNumber": 8,
                        "endLineNumber": 799,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 799,
                        "startColumnNumber": 8,
                        "endLineNumber": 799,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 56,
                    "startLineNumber": 799,
                    "startColumnNumber": 8,
                    "endLineNumber": 799,
                    "endColumnNumber": 64
                },
                "nodeContext": "ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 804,
                "startColumnNumber": 8,
                "endLineNumber": 804,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 804,
                        "startColumnNumber": 8,
                        "endLineNumber": 804,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "ze.setName(entryEncoding.decode(fileName),fileName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 804,
                        "startColumnNumber": 8,
                        "endLineNumber": 804,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "ze.setName(entryEncoding.decode(fileName),fileName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 804,
                    "startColumnNumber": 8,
                    "endLineNumber": 804,
                    "endColumnNumber": 61
                },
                "nodeContext": "ze.setName(entryEncoding.decode(fileName),fileName);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 807,
                "startColumnNumber": 8,
                "endLineNumber": 807,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 807,
                        "startColumnNumber": 8,
                        "endLineNumber": 807,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 807,
                        "startColumnNumber": 8,
                        "endLineNumber": 807,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 807,
                    "startColumnNumber": 8,
                    "endLineNumber": 807,
                    "endColumnNumber": 63
                },
                "nodeContext": "ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 809,
                "startColumnNumber": 20,
                "endLineNumber": 809,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 809,
                        "startColumnNumber": 8,
                        "endLineNumber": 809,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "entries.add(ze)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 809,
                        "startColumnNumber": 8,
                        "endLineNumber": 809,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "entries.add(ze);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 809,
                    "startColumnNumber": 8,
                    "endLineNumber": 809,
                    "endColumnNumber": 24
                },
                "nodeContext": "entries.add(ze);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 813,
                "startColumnNumber": 8,
                "endLineNumber": 813,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 813,
                        "startColumnNumber": 8,
                        "endLineNumber": 813,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "ze.setCentralDirectoryExtra(cdExtraData)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 813,
                        "startColumnNumber": 8,
                        "endLineNumber": 813,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "ze.setCentralDirectoryExtra(cdExtraData);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 813,
                    "startColumnNumber": 8,
                    "endLineNumber": 813,
                    "endColumnNumber": 49
                },
                "nodeContext": "ze.setCentralDirectoryExtra(cdExtraData);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 815,
                "startColumnNumber": 40,
                "endLineNumber": 815,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 815,
                        "startColumnNumber": 8,
                        "endLineNumber": 815,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "setSizesAndOffsetFromZip64Extra(ze)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 815,
                        "startColumnNumber": 8,
                        "endLineNumber": 815,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "setSizesAndOffsetFromZip64Extra(ze);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 815,
                    "startColumnNumber": 8,
                    "endLineNumber": 815,
                    "endColumnNumber": 44
                },
                "nodeContext": "setSizesAndOffsetFromZip64Extra(ze);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 819,
                "startColumnNumber": 8,
                "endLineNumber": 819,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 819,
                        "startColumnNumber": 8,
                        "endLineNumber": 819,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "ze.setComment(entryEncoding.decode(comment))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 819,
                        "startColumnNumber": 8,
                        "endLineNumber": 819,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "ze.setComment(entryEncoding.decode(comment));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 819,
                    "startColumnNumber": 8,
                    "endLineNumber": 819,
                    "endColumnNumber": 53
                },
                "nodeContext": "ze.setComment(entryEncoding.decode(comment));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 822,
                "startColumnNumber": 27,
                "endLineNumber": 822,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 822,
                        "startColumnNumber": 12,
                        "endLineNumber": 822,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "noUTF8Flag.put(ze,new NameAndComment(fileName,comment))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 822,
                        "startColumnNumber": 12,
                        "endLineNumber": 822,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 821,
                        "startColumnNumber": 51,
                        "endLineNumber": 823,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 821,
                        "startColumnNumber": 8,
                        "endLineNumber": 823,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!hasUTF8Flag && useUnicodeExtraFields) {\n  noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 822,
                    "startColumnNumber": 12,
                    "endLineNumber": 822,
                    "endColumnNumber": 70
                },
                "nodeContext": "noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 825,
                "startColumnNumber": 8,
                "endLineNumber": 825,
                "endColumnNumber": 10
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 825,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "ze.setStreamContiguous(true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 825,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "ze.setStreamContiguous(true);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2914,
                        "startLineNumber": 741,
                        "startColumnNumber": 27,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 407,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3439,
                        "startLineNumber": 730,
                        "startColumnNumber": 4,
                        "endLineNumber": 826,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Reads an individual entry of the central directory, creats an ZipArchiveEntry from it and adds it to the global maps.\n * @param noUTF8Flag map used to collect entries that don't havetheir UTF-8 flag set and whose name will be set by data read from the local file header later.  The current entry may be added to this map.\n */\nprivate void readCentralDirectoryEntry(final Map<ZipArchiveEntry,NameAndComment> noUTF8Flag) throws IOException {\n  cfhBbuf.rewind();\n  IOUtils.readFully(archive,cfhBbuf);\n  int off=0;\n  final Entry ze=new Entry();\n  final int versionMadeBy=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setVersionMadeBy(versionMadeBy);\n  ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n  ze.setVersionRequired(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(cfhBuf,off);\n  final boolean hasUTF8Flag=gpFlag.usesUTF8ForNames();\n  final ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n  if (hasUTF8Flag) {\n    ze.setNameSource(ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);\n  }\n  ze.setGeneralPurposeBit(gpFlag);\n  ze.setRawFlag(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setMethod(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  final long time=ZipUtil.dosToJavaTime(ZipLong.getValue(cfhBuf,off));\n  ze.setTime(time);\n  off+=WORD;\n  ze.setCrc(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setCompressedSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  ze.setSize(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final int fileNameLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int extraLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  final int commentLen=ZipShort.getValue(cfhBuf,off);\n  off+=SHORT;\n  ze.setDiskNumberStart(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setInternalAttributes(ZipShort.getValue(cfhBuf,off));\n  off+=SHORT;\n  ze.setExternalAttributes(ZipLong.getValue(cfhBuf,off));\n  off+=WORD;\n  final byte[] fileName=new byte[fileNameLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(fileName));\n  ze.setName(entryEncoding.decode(fileName),fileName);\n  ze.setLocalHeaderOffset(ZipLong.getValue(cfhBuf,off));\n  entries.add(ze);\n  final byte[] cdExtraData=new byte[extraLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(cdExtraData));\n  ze.setCentralDirectoryExtra(cdExtraData);\n  setSizesAndOffsetFromZip64Extra(ze);\n  final byte[] comment=new byte[commentLen];\n  IOUtils.readFully(archive,ByteBuffer.wrap(comment));\n  ze.setComment(entryEncoding.decode(comment));\n  if (!hasUTF8Flag && useUnicodeExtraFields) {\n    noUTF8Flag.put(ze,new NameAndComment(fileName,comment));\n  }\n  ze.setStreamContiguous(true);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 424,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 825,
                    "startColumnNumber": 8,
                    "endLineNumber": 825,
                    "endColumnNumber": 37
                },
                "nodeContext": "ze.setStreamContiguous(true);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipFile.Entry"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 749,
            "startColumnNumber": 8,
            "endLineNumber": 749,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 750,
            "startColumnNumber": 8,
            "endLineNumber": 750,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 752,
            "startColumnNumber": 8,
            "endLineNumber": 752,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 760,
            "startColumnNumber": 12,
            "endLineNumber": 760,
            "endColumnNumber": 14
        },
        {
            "charLength": 2,
            "startLineNumber": 762,
            "startColumnNumber": 8,
            "endLineNumber": 762,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 763,
            "startColumnNumber": 8,
            "endLineNumber": 763,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 768,
            "startColumnNumber": 8,
            "endLineNumber": 768,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 772,
            "startColumnNumber": 8,
            "endLineNumber": 772,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 775,
            "startColumnNumber": 8,
            "endLineNumber": 775,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 778,
            "startColumnNumber": 8,
            "endLineNumber": 778,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 781,
            "startColumnNumber": 8,
            "endLineNumber": 781,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 793,
            "startColumnNumber": 8,
            "endLineNumber": 793,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 796,
            "startColumnNumber": 8,
            "endLineNumber": 796,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 799,
            "startColumnNumber": 8,
            "endLineNumber": 799,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 804,
            "startColumnNumber": 8,
            "endLineNumber": 804,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 807,
            "startColumnNumber": 8,
            "endLineNumber": 807,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 809,
            "startColumnNumber": 20,
            "endLineNumber": 809,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 813,
            "startColumnNumber": 8,
            "endLineNumber": 813,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 815,
            "startColumnNumber": 40,
            "endLineNumber": 815,
            "endColumnNumber": 42
        },
        {
            "charLength": 2,
            "startLineNumber": 819,
            "startColumnNumber": 8,
            "endLineNumber": 819,
            "endColumnNumber": 10
        },
        {
            "charLength": 2,
            "startLineNumber": 822,
            "startColumnNumber": 27,
            "endLineNumber": 822,
            "endColumnNumber": 29
        },
        {
            "charLength": 2,
            "startLineNumber": 825,
            "startColumnNumber": 8,
            "endLineNumber": 825,
            "endColumnNumber": 10
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 2
        }
    ]
}