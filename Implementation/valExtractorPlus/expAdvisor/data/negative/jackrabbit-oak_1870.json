{
    "id": 1870,
    "expression": "\" already exists\"",
    "projectName": "jackrabbit-oak",
    "commitID": "aa5687fbff0d7acbad4c3e30ea586a8ab02bf72e",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/write/NodeTypeTemplateImpl.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "\" already exists\"",
            "nodeType": "StringLiteral",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 137,
                "startColumnNumber": 51,
                "endLineNumber": 137,
                "endColumnNumber": 68
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 137,
                        "startColumnNumber": 24,
                        "endLineNumber": 137,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "\"Node type \" + getName() + \" already exists\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 98,
                        "startLineNumber": 136,
                        "startColumnNumber": 22,
                        "endLineNumber": 137,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 136,
                        "startColumnNumber": 16,
                        "endLineNumber": 137,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 135,
                        "startColumnNumber": 19,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 206,
                        "startLineNumber": 133,
                        "startColumnNumber": 12,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (allowUpdate) {\n  type.remove();\n}\n else {\n  throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 230,
                        "startLineNumber": 132,
                        "startColumnNumber": 27,
                        "endLineNumber": 139,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (allowUpdate) {\n    type.remove();\n  }\n else {\n    throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 249,
                        "startLineNumber": 132,
                        "startColumnNumber": 8,
                        "endLineNumber": 139,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (type.exists()) {\n  if (allowUpdate) {\n    type.remove();\n  }\n else {\n    throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 22,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2357,
                        "startLineNumber": 128,
                        "startColumnNumber": 78,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 213,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2948,
                        "startLineNumber": 117,
                        "startColumnNumber": 4,
                        "endLineNumber": 188,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Writes this node type as an  {@code nt:nodeType} child of the givenparent node. An exception is thrown if the child node already exists, unless the  {@code allowUpdate} flag is set, in which case the existingnode is overwritten.\n * @param parent parent node under which to write this node type\n * @param allowUpdate whether to overwrite an existing type\n * @return The node type tree.\n * @throws RepositoryException if this type could not be written\n */\nTree writeTo(Tree parent,boolean allowUpdate) throws RepositoryException {\n  String oakName=getOakName();\n  Tree type=parent.getChild(oakName);\n  if (type.exists()) {\n    if (allowUpdate) {\n      type.remove();\n    }\n else {\n      throw new NodeTypeExistsException(\"Node type \" + getName() + \" already exists\");\n    }\n  }\n  type=parent.addChild(oakName);\n  type.setProperty(JCR_PRIMARYTYPE,NT_NODETYPE,Type.NAME);\n  type.setProperty(JCR_NODETYPENAME,oakName,Type.NAME);\n  if (superTypeOakNames.length > 0) {\n    type.setProperty(JCR_SUPERTYPES,Arrays.asList(superTypeOakNames),Type.NAMES);\n  }\n  type.setProperty(JCR_IS_ABSTRACT,isAbstract);\n  type.setProperty(JCR_IS_QUERYABLE,queryable);\n  type.setProperty(JCR_ISMIXIN,isMixin);\n  type.setProperty(JCR_HASORDERABLECHILDNODES,isOrderable);\n  if (primaryItemOakName != null) {\n    type.setProperty(JCR_PRIMARYITEMNAME,primaryItemOakName,Type.NAME);\n  }\n  if (propertyDefinitionTemplates != null) {\n    int pdn=1;\n    for (    PropertyDefinitionTemplateImpl pdt : propertyDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_PROPERTYDEFINITION + \"[\" + pdn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_PROPERTYDEFINITION,Type.NAME);\n      pdt.writeTo(tree);\n    }\n  }\n  if (nodeDefinitionTemplates != null) {\n    int ndn=1;\n    for (    NodeDefinitionTemplateImpl ndt : nodeDefinitionTemplates) {\n      Tree tree=type.addChild(JCR_CHILDNODEDEFINITION + \"[\" + ndn+++ \"]\");\n      tree.setProperty(JCR_PRIMARYTYPE,NT_CHILDNODEDEFINITION,Type.NAME);\n      ndt.writeTo(tree);\n    }\n  }\n  return type;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 227,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 137,
                    "startColumnNumber": 24,
                    "endLineNumber": 137,
                    "endColumnNumber": 68
                },
                "nodeContext": "\"Node type \" + getName() + \" already exists\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 17,
            "startLineNumber": 137,
            "startColumnNumber": 51,
            "endLineNumber": 137,
            "endColumnNumber": 68
        }
    ],
    "layoutRelationDataList": []
}