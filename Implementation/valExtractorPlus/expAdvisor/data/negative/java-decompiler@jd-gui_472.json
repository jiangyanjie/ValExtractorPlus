{
    "id": 472,
    "expression": "superInternalTypeNameSet",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "fbc5b14d66b37b88bf1dc18386b530e874550240",
    "filePath": "services/src/main/java/org/jd/gui/service/indexer/JavaFileIndexerProvider.java",
    "occurrences": 4,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "superInternalTypeNameSet",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 24,
                "startLineNumber": 149,
                "startColumnNumber": 24,
                "endLineNumber": 149,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 149,
                        "startColumnNumber": 24,
                        "endLineNumber": 149,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "superInternalTypeNameSet.add(superQualifiedTypeName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 149,
                        "startColumnNumber": 24,
                        "endLineNumber": 149,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "superInternalTypeNameSet.add(superQualifiedTypeName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 148,
                        "startColumnNumber": 20,
                        "endLineNumber": 149,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "if (superQualifiedTypeName.charAt(0) != '*') superInternalTypeNameSet.add(superQualifiedTypeName);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 292,
                        "startLineNumber": 145,
                        "startColumnNumber": 39,
                        "endLineNumber": 150,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  if (superQualifiedTypeName.charAt(0) != '*')   superInternalTypeNameSet.add(superQualifiedTypeName);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 315,
                        "startLineNumber": 145,
                        "startColumnNumber": 16,
                        "endLineNumber": 150,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (superType != null) {\n  String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  if (superQualifiedTypeName.charAt(0) != '*')   superInternalTypeNameSet.add(superQualifiedTypeName);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1988,
                        "startLineNumber": 127,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 190,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2012,
                        "startLineNumber": 127,
                        "startColumnNumber": 12,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (identifier != null) {\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 194,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2156,
                        "startLineNumber": 123,
                        "startColumnNumber": 67,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2215,
                        "startLineNumber": 123,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 149,
                    "startColumnNumber": 24,
                    "endLineNumber": 149,
                    "endColumnNumber": 77
                },
                "nodeContext": "superInternalTypeNameSet.add(superQualifiedTypeName);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.HashSet<java.lang.String>"
        },
        {
            "nodeContext": "superInternalTypeNameSet",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 24,
                "startLineNumber": 159,
                "startColumnNumber": 28,
                "endLineNumber": 159,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 159,
                        "startColumnNumber": 28,
                        "endLineNumber": 159,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "superInternalTypeNameSet.add(superQualifiedInterfaceName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 159,
                        "startColumnNumber": 28,
                        "endLineNumber": 159,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "superInternalTypeNameSet.add(superQualifiedInterfaceName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 137,
                        "startLineNumber": 158,
                        "startColumnNumber": 24,
                        "endLineNumber": 159,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "if (superQualifiedInterfaceName.charAt(0) != '*') superInternalTypeNameSet.add(superQualifiedInterfaceName);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 328,
                        "startLineNumber": 155,
                        "startColumnNumber": 89,
                        "endLineNumber": 160,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n  if (superQualifiedInterfaceName.charAt(0) != '*')   superInternalTypeNameSet.add(superQualifiedInterfaceName);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 397,
                        "startLineNumber": 155,
                        "startColumnNumber": 20,
                        "endLineNumber": 160,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (JavaParser.TypeContext superInterface : superInterfaces.type()) {\n  String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n  if (superQualifiedInterfaceName.charAt(0) != '*')   superInternalTypeNameSet.add(superQualifiedInterfaceName);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 35,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 154,
                        "startColumnNumber": 45,
                        "endLineNumber": 161,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  JavaParser.TypeContext superInterface : superInterfaces.type()) {\n    String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n    if (superQualifiedInterfaceName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedInterfaceName);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 36,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 468,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 161,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (superInterfaces != null) {\n  for (  JavaParser.TypeContext superInterface : superInterfaces.type()) {\n    String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n    if (superQualifiedInterfaceName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedInterfaceName);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1988,
                        "startLineNumber": 127,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 190,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2012,
                        "startLineNumber": 127,
                        "startColumnNumber": 12,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (identifier != null) {\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 194,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2156,
                        "startLineNumber": 123,
                        "startColumnNumber": 67,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2215,
                        "startLineNumber": 123,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 159,
                    "startColumnNumber": 28,
                    "endLineNumber": 159,
                    "endColumnNumber": 86
                },
                "nodeContext": "superInternalTypeNameSet.add(superQualifiedInterfaceName);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.HashSet<java.lang.String>"
        },
        {
            "nodeContext": "superInternalTypeNameSet",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 24,
                "startLineNumber": 163,
                "startColumnNumber": 21,
                "endLineNumber": 163,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 163,
                        "startColumnNumber": 21,
                        "endLineNumber": 163,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "superInternalTypeNameSet.isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 163,
                        "startColumnNumber": 20,
                        "endLineNumber": 163,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "!superInternalTypeNameSet.isEmpty()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 165,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (!superInternalTypeNameSet.isEmpty()) {\n  superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1988,
                        "startLineNumber": 127,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 190,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2012,
                        "startLineNumber": 127,
                        "startColumnNumber": 12,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (identifier != null) {\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 194,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2156,
                        "startLineNumber": 123,
                        "startColumnNumber": 67,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2215,
                        "startLineNumber": 123,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 163,
                    "startColumnNumber": 20,
                    "endLineNumber": 163,
                    "endColumnNumber": 55
                },
                "nodeContext": "!superInternalTypeNameSet.isEmpty()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.HashSet<java.lang.String>"
        },
        {
            "nodeContext": "superInternalTypeNameSet",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 24,
                "startLineNumber": 164,
                "startColumnNumber": 60,
                "endLineNumber": 164,
                "endColumnNumber": 84
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 164,
                        "startColumnNumber": 20,
                        "endLineNumber": 164,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 164,
                        "startColumnNumber": 20,
                        "endLineNumber": 164,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 163,
                        "startColumnNumber": 57,
                        "endLineNumber": 165,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 165,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (!superInternalTypeNameSet.isEmpty()) {\n  superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1988,
                        "startLineNumber": 127,
                        "startColumnNumber": 36,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 190,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2012,
                        "startLineNumber": 127,
                        "startColumnNumber": 12,
                        "endLineNumber": 166,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (identifier != null) {\n  String typeName=identifier.getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 194,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2156,
                        "startLineNumber": 123,
                        "startColumnNumber": 67,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 207,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2215,
                        "startLineNumber": 123,
                        "startColumnNumber": 8,
                        "endLineNumber": 167,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode identifier=ctx.getToken(JavaParser.Identifier,0);\n  if (identifier != null) {\n    String typeName=identifier.getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 164,
                    "startColumnNumber": 20,
                    "endLineNumber": 164,
                    "endColumnNumber": 86
                },
                "nodeContext": "superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.HashSet<java.lang.String>"
        }
    ],
    "positionList": [
        {
            "charLength": 24,
            "startLineNumber": 149,
            "startColumnNumber": 24,
            "endLineNumber": 149,
            "endColumnNumber": 48
        },
        {
            "charLength": 24,
            "startLineNumber": 159,
            "startColumnNumber": 28,
            "endLineNumber": 159,
            "endColumnNumber": 52
        },
        {
            "charLength": 24,
            "startLineNumber": 163,
            "startColumnNumber": 21,
            "endLineNumber": 163,
            "endColumnNumber": 45
        },
        {
            "charLength": 24,
            "startLineNumber": 164,
            "startColumnNumber": 60,
            "endLineNumber": 164,
            "endColumnNumber": 84
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        }
    ]
}