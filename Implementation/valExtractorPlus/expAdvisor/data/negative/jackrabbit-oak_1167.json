{
    "id": 1167,
    "expression": "userId",
    "projectName": "jackrabbit-oak",
    "commitID": "f6f7ebd56aa6640f43fdbae23150f9663448c8e7",
    "filePath": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/ExternalLoginModule.java",
    "occurrences": 11,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 179,
                "startColumnNumber": 12,
                "endLineNumber": 179,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 179,
                        "startColumnNumber": 12,
                        "endLineNumber": 179,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "userId == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 179,
                        "startColumnNumber": 12,
                        "endLineNumber": 179,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "userId == null && credentials == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 164,
                        "startLineNumber": 179,
                        "startColumnNumber": 8,
                        "endLineNumber": 182,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (userId == null && credentials == null) {\n  log.debug(\"No credentials found for external login module. ignoring.\");\n  return false;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 179,
                    "startColumnNumber": 12,
                    "endLineNumber": 179,
                    "endColumnNumber": 49
                },
                "nodeContext": "userId == null && credentials == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 186,
                "startColumnNumber": 16,
                "endLineNumber": 186,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 186,
                        "startColumnNumber": 16,
                        "endLineNumber": 186,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "userId != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 887,
                        "startLineNumber": 186,
                        "startColumnNumber": 12,
                        "endLineNumber": 202,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (userId != null) {\n  sId=syncHandler.findIdentity(getUserManager(),userId);\n  if (sId != null) {\n    if (sId.getExternalIdRef() == null) {\n      log.debug(\"ignoring local user: {}\",sId.getId());\n      return false;\n    }\n    if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n      }\n      return false;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 69,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2344,
                        "startLineNumber": 184,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 188,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 186,
                    "startColumnNumber": 16,
                    "endLineNumber": 186,
                    "endColumnNumber": 30
                },
                "nodeContext": "userId != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 187,
                "startColumnNumber": 65,
                "endLineNumber": 187,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 187,
                        "startColumnNumber": 22,
                        "endLineNumber": 187,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "syncHandler.findIdentity(getUserManager(),userId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 187,
                        "startColumnNumber": 16,
                        "endLineNumber": 187,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "sId=syncHandler.findIdentity(getUserManager(),userId)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 187,
                        "startColumnNumber": 16,
                        "endLineNumber": 187,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "sId=syncHandler.findIdentity(getUserManager(),userId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 867,
                        "startLineNumber": 186,
                        "startColumnNumber": 32,
                        "endLineNumber": 202,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sId=syncHandler.findIdentity(getUserManager(),userId);\n  if (sId != null) {\n    if (sId.getExternalIdRef() == null) {\n      log.debug(\"ignoring local user: {}\",sId.getId());\n      return false;\n    }\n    if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n      }\n      return false;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 887,
                        "startLineNumber": 186,
                        "startColumnNumber": 12,
                        "endLineNumber": 202,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (userId != null) {\n  sId=syncHandler.findIdentity(getUserManager(),userId);\n  if (sId != null) {\n    if (sId.getExternalIdRef() == null) {\n      log.debug(\"ignoring local user: {}\",sId.getId());\n      return false;\n    }\n    if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n      }\n      return false;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 69,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2344,
                        "startLineNumber": 184,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 188,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 187,
                    "startColumnNumber": 16,
                    "endLineNumber": 187,
                    "endColumnNumber": 73
                },
                "nodeContext": "sId=syncHandler.findIdentity(getUserManager(),userId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 226,
                "startColumnNumber": 24,
                "endLineNumber": 226,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 226,
                        "startColumnNumber": 24,
                        "endLineNumber": 226,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "userId != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 271,
                        "startLineNumber": 226,
                        "startColumnNumber": 20,
                        "endLineNumber": 230,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (userId != null) {\n  log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n}\n else {\n  log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 311,
                        "startLineNumber": 225,
                        "startColumnNumber": 42,
                        "endLineNumber": 231,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (userId != null) {\n    log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n  }\n else {\n    log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 337,
                        "startLineNumber": 225,
                        "startColumnNumber": 16,
                        "endLineNumber": 231,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (log.isDebugEnabled()) {\n  if (userId != null) {\n    log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n  }\n else {\n    log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 664,
                        "startLineNumber": 224,
                        "startColumnNumber": 19,
                        "endLineNumber": 239,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (log.isDebugEnabled()) {\n    if (userId != null) {\n      log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n    }\n else {\n      log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n    }\n  }\n  if (sId != null) {\n    log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n    validateUser(sId.getId());\n  }\n  return false;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1172,
                        "startLineNumber": 210,
                        "startColumnNumber": 12,
                        "endLineNumber": 239,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (externalUser != null) {\n  log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n  if (credentials != null) {\n    sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n  }\n  sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n  syncUser(externalUser);\n  return true;\n}\n else {\n  if (log.isDebugEnabled()) {\n    if (userId != null) {\n      log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n    }\n else {\n      log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n    }\n  }\n  if (sId != null) {\n    log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n    validateUser(sId.getId());\n  }\n  return false;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2344,
                        "startLineNumber": 184,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 188,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 226,
                    "startColumnNumber": 24,
                    "endLineNumber": 226,
                    "endColumnNumber": 38
                },
                "nodeContext": "userId != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 227,
                "startColumnNumber": 96,
                "endLineNumber": 227,
                "endColumnNumber": 102
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 227,
                        "startColumnNumber": 24,
                        "endLineNumber": 227,
                        "endColumnNumber": 103
                    },
                    "nodeContext": "log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 227,
                        "startColumnNumber": 24,
                        "endLineNumber": 227,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 128,
                        "startLineNumber": 226,
                        "startColumnNumber": 40,
                        "endLineNumber": 228,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 271,
                        "startLineNumber": 226,
                        "startColumnNumber": 20,
                        "endLineNumber": 230,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (userId != null) {\n  log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n}\n else {\n  log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 311,
                        "startLineNumber": 225,
                        "startColumnNumber": 42,
                        "endLineNumber": 231,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (userId != null) {\n    log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n  }\n else {\n    log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 337,
                        "startLineNumber": 225,
                        "startColumnNumber": 16,
                        "endLineNumber": 231,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (log.isDebugEnabled()) {\n  if (userId != null) {\n    log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n  }\n else {\n    log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 664,
                        "startLineNumber": 224,
                        "startColumnNumber": 19,
                        "endLineNumber": 239,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (log.isDebugEnabled()) {\n    if (userId != null) {\n      log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n    }\n else {\n      log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n    }\n  }\n  if (sId != null) {\n    log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n    validateUser(sId.getId());\n  }\n  return false;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1172,
                        "startLineNumber": 210,
                        "startColumnNumber": 12,
                        "endLineNumber": 239,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (externalUser != null) {\n  log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n  if (credentials != null) {\n    sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n  }\n  sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n  syncUser(externalUser);\n  return true;\n}\n else {\n  if (log.isDebugEnabled()) {\n    if (userId != null) {\n      log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n    }\n else {\n      log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n    }\n  }\n  if (sId != null) {\n    log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n    validateUser(sId.getId());\n  }\n  return false;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2344,
                        "startLineNumber": 184,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 188,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 80,
                    "startLineNumber": 227,
                    "startColumnNumber": 24,
                    "endLineNumber": 227,
                    "endColumnNumber": 104
                },
                "nodeContext": "log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 242,
                "startColumnNumber": 20,
                "endLineNumber": 242,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 242,
                        "startColumnNumber": 20,
                        "endLineNumber": 242,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "userId == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 242,
                        "startColumnNumber": 20,
                        "endLineNumber": 242,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 129,
                        "startLineNumber": 241,
                        "startColumnNumber": 12,
                        "endLineNumber": 242,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 241,
                        "startColumnNumber": 12,
                        "endLineNumber": 242,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 180,
                        "startLineNumber": 240,
                        "startColumnNumber": 46,
                        "endLineNumber": 244,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 216,
                        "startLineNumber": 240,
                        "startColumnNumber": 10,
                        "endLineNumber": 244,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 23,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 242,
                    "startColumnNumber": 20,
                    "endLineNumber": 242,
                    "endColumnNumber": 57
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 242,
                "startColumnNumber": 51,
                "endLineNumber": 242,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 242,
                        "startColumnNumber": 20,
                        "endLineNumber": 242,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 129,
                        "startLineNumber": 241,
                        "startColumnNumber": 12,
                        "endLineNumber": 242,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 241,
                        "startColumnNumber": 12,
                        "endLineNumber": 242,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 180,
                        "startLineNumber": 240,
                        "startColumnNumber": 46,
                        "endLineNumber": 244,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 216,
                        "startLineNumber": 240,
                        "startColumnNumber": 10,
                        "endLineNumber": 244,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 23,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 242,
                    "startColumnNumber": 20,
                    "endLineNumber": 242,
                    "endColumnNumber": 57
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 246,
                "startColumnNumber": 35,
                "endLineNumber": 246,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 246,
                        "startColumnNumber": 35,
                        "endLineNumber": 246,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "userId == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 246,
                        "startColumnNumber": 35,
                        "endLineNumber": 246,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 145,
                        "startLineNumber": 245,
                        "startColumnNumber": 12,
                        "endLineNumber": 246,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 16,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 146,
                        "startLineNumber": 245,
                        "startColumnNumber": 12,
                        "endLineNumber": 246,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 244,
                        "startColumnNumber": 35,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 216,
                        "startLineNumber": 244,
                        "startColumnNumber": 10,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 246,
                    "startColumnNumber": 35,
                    "endLineNumber": 246,
                    "endColumnNumber": 72
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 246,
                "startColumnNumber": 66,
                "endLineNumber": 246,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 246,
                        "startColumnNumber": 35,
                        "endLineNumber": 246,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 145,
                        "startLineNumber": 245,
                        "startColumnNumber": 12,
                        "endLineNumber": 246,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 16,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 146,
                        "startLineNumber": 245,
                        "startColumnNumber": 12,
                        "endLineNumber": 246,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 244,
                        "startColumnNumber": 35,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 216,
                        "startLineNumber": 244,
                        "startColumnNumber": 10,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 246,
                    "startColumnNumber": 35,
                    "endLineNumber": 246,
                    "endColumnNumber": 72
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 250,
                "startColumnNumber": 43,
                "endLineNumber": 250,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 250,
                        "startColumnNumber": 43,
                        "endLineNumber": 250,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "userId == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 250,
                        "startColumnNumber": 43,
                        "endLineNumber": 250,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 249,
                        "startColumnNumber": 12,
                        "endLineNumber": 250,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 249,
                        "startColumnNumber": 12,
                        "endLineNumber": 250,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 300,
                        "startLineNumber": 248,
                        "startColumnNumber": 30,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 32,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 320,
                        "startLineNumber": 248,
                        "startColumnNumber": 10,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 37,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 250,
                    "startColumnNumber": 43,
                    "endLineNumber": 250,
                    "endColumnNumber": 80
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "userId",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 250,
                "startColumnNumber": 74,
                "endLineNumber": 250,
                "endColumnNumber": 80
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 250,
                        "startColumnNumber": 43,
                        "endLineNumber": 250,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "userId == null ? credentials : userId",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 249,
                        "startColumnNumber": 12,
                        "endLineNumber": 250,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 249,
                        "startColumnNumber": 12,
                        "endLineNumber": 250,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 300,
                        "startLineNumber": 248,
                        "startColumnNumber": 30,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 32,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 320,
                        "startLineNumber": 248,
                        "startColumnNumber": 10,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 37,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 250,
                    "startColumnNumber": 43,
                    "endLineNumber": 250,
                    "endColumnNumber": 80
                },
                "nodeContext": "userId == null ? credentials : userId",
                "nodeType": "ConditionalExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 179,
            "startColumnNumber": 12,
            "endLineNumber": 179,
            "endColumnNumber": 18
        },
        {
            "charLength": 6,
            "startLineNumber": 186,
            "startColumnNumber": 16,
            "endLineNumber": 186,
            "endColumnNumber": 22
        },
        {
            "charLength": 6,
            "startLineNumber": 187,
            "startColumnNumber": 65,
            "endLineNumber": 187,
            "endColumnNumber": 71
        },
        {
            "charLength": 6,
            "startLineNumber": 226,
            "startColumnNumber": 24,
            "endLineNumber": 226,
            "endColumnNumber": 30
        },
        {
            "charLength": 6,
            "startLineNumber": 227,
            "startColumnNumber": 96,
            "endLineNumber": 227,
            "endColumnNumber": 102
        },
        {
            "charLength": 6,
            "startLineNumber": 242,
            "startColumnNumber": 20,
            "endLineNumber": 242,
            "endColumnNumber": 26
        },
        {
            "charLength": 6,
            "startLineNumber": 242,
            "startColumnNumber": 51,
            "endLineNumber": 242,
            "endColumnNumber": 57
        },
        {
            "charLength": 6,
            "startLineNumber": 246,
            "startColumnNumber": 35,
            "endLineNumber": 246,
            "endColumnNumber": 41
        },
        {
            "charLength": 6,
            "startLineNumber": 246,
            "startColumnNumber": 66,
            "endLineNumber": 246,
            "endColumnNumber": 72
        },
        {
            "charLength": 6,
            "startLineNumber": 250,
            "startColumnNumber": 43,
            "endLineNumber": 250,
            "endColumnNumber": 49
        },
        {
            "charLength": 6,
            "startLineNumber": 250,
            "startColumnNumber": 74,
            "endLineNumber": 250,
            "endColumnNumber": 80
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 0
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 0
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 0
        }
    ]
}