{
  "id" : 15,
  "expression" : "Convert.convertWithCheck(valueType,result,null,ignoreError)",
  "projectName" : "dromara@hutool",
  "commitID" : "df58ad5eff9d1a896e34348e7720fe7c46e7b690",
  "filePath" : "hutool-core/src/main/java/cn/hutool/core/bean/copier/provider/BeanValueProvider.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "Convert.convertWithCheck(valueType,result,null,ignoreError)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 59,
      "startLineNumber" : 61,
      "startColumnNumber" : 15,
      "endLineNumber" : 61,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 7,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 61,
        "startColumnNumber" : 7,
        "endLineNumber" : 61,
        "endColumnNumber" : 74
      },
      "nodeContext" : "null != Convert.convertWithCheck(valueType,result,null,ignoreError)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n  result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 50,
        "startColumnNumber" : 23,
        "endLineNumber" : 64,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  try {\n    result=getter.invoke(source);\n  }\n catch (  Exception e) {\n    if (false == ignoreError) {\n      throw new UtilException(e,\"Inject [{}] error!\",key);\n    }\n  }\n  final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n    result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 50,
        "startColumnNumber" : 3,
        "endLineNumber" : 64,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (null != getter) {\n  try {\n    result=getter.invoke(source);\n  }\n catch (  Exception e) {\n    if (false == ignoreError) {\n      throw new UtilException(e,\"Inject [{}] error!\",key);\n    }\n  }\n  final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n    result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 48,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Method getter=sourcePd.getGetter();\n  if (null != getter) {\n    try {\n      result=getter.invoke(source);\n    }\n catch (    Exception e) {\n      if (false == ignoreError) {\n        throw new UtilException(e,\"Inject [{}] error!\",key);\n      }\n    }\n    final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n      result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null != sourcePd) {\n  final Method getter=sourcePd.getGetter();\n  if (null != getter) {\n    try {\n      result=getter.invoke(source);\n    }\n catch (    Exception e) {\n      if (false == ignoreError) {\n        throw new UtilException(e,\"Inject [{}] error!\",key);\n      }\n    }\n    final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n      result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 67,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  PropDesc sourcePd=sourcePdMap.get(key);\n  if (null == sourcePd && (Boolean.class == valueType || boolean.class == valueType)) {\n    sourcePd=sourcePdMap.get(StrUtil.upperFirstAndAddPre(key,\"is\"));\n  }\n  Object result=null;\n  if (null != sourcePd) {\n    final Method getter=sourcePd.getGetter();\n    if (null != getter) {\n      try {\n        result=getter.invoke(source);\n      }\n catch (      Exception e) {\n        if (false == ignoreError) {\n          throw new UtilException(e,\"Inject [{}] error!\",key);\n        }\n      }\n      final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n        result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 39,
        "startColumnNumber" : 1,
        "endLineNumber" : 67,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public Object value(String key,Type valueType){\n  PropDesc sourcePd=sourcePdMap.get(key);\n  if (null == sourcePd && (Boolean.class == valueType || boolean.class == valueType)) {\n    sourcePd=sourcePdMap.get(StrUtil.upperFirstAndAddPre(key,\"is\"));\n  }\n  Object result=null;\n  if (null != sourcePd) {\n    final Method getter=sourcePd.getGetter();\n    if (null != getter) {\n      try {\n        result=getter.invoke(source);\n      }\n catch (      Exception e) {\n        if (false == ignoreError) {\n          throw new UtilException(e,\"Inject [{}] error!\",key);\n        }\n      }\n      final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n        result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 15
    } ],
    "tokenLength" : 6,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "Convert.convertWithCheck(valueType,result,null,ignoreError)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 59,
      "startLineNumber" : 62,
      "startColumnNumber" : 14,
      "endLineNumber" : 62,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 7,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 62,
        "startColumnNumber" : 5,
        "endLineNumber" : 62,
        "endColumnNumber" : 71
      },
      "nodeContext" : "result=Convert.convertWithCheck(valueType,result,null,ignoreError)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 62,
        "startColumnNumber" : 5,
        "endLineNumber" : 62,
        "endColumnNumber" : 73
      },
      "nodeContext" : "result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 61,
        "startColumnNumber" : 28,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n  result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 50,
        "startColumnNumber" : 23,
        "endLineNumber" : 64,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  try {\n    result=getter.invoke(source);\n  }\n catch (  Exception e) {\n    if (false == ignoreError) {\n      throw new UtilException(e,\"Inject [{}] error!\",key);\n    }\n  }\n  final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n    result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 50,
        "startColumnNumber" : 3,
        "endLineNumber" : 64,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (null != getter) {\n  try {\n    result=getter.invoke(source);\n  }\n catch (  Exception e) {\n    if (false == ignoreError) {\n      throw new UtilException(e,\"Inject [{}] error!\",key);\n    }\n  }\n  final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n    result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 48,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Method getter=sourcePd.getGetter();\n  if (null != getter) {\n    try {\n      result=getter.invoke(source);\n    }\n catch (    Exception e) {\n      if (false == ignoreError) {\n        throw new UtilException(e,\"Inject [{}] error!\",key);\n      }\n    }\n    final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n      result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (null != sourcePd) {\n  final Method getter=sourcePd.getGetter();\n  if (null != getter) {\n    try {\n      result=getter.invoke(source);\n    }\n catch (    Exception e) {\n      if (false == ignoreError) {\n        throw new UtilException(e,\"Inject [{}] error!\",key);\n      }\n    }\n    final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n      result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 67,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  PropDesc sourcePd=sourcePdMap.get(key);\n  if (null == sourcePd && (Boolean.class == valueType || boolean.class == valueType)) {\n    sourcePd=sourcePdMap.get(StrUtil.upperFirstAndAddPre(key,\"is\"));\n  }\n  Object result=null;\n  if (null != sourcePd) {\n    final Method getter=sourcePd.getGetter();\n    if (null != getter) {\n      try {\n        result=getter.invoke(source);\n      }\n catch (      Exception e) {\n        if (false == ignoreError) {\n          throw new UtilException(e,\"Inject [{}] error!\",key);\n        }\n      }\n      final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n        result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 39,
        "startColumnNumber" : 1,
        "endLineNumber" : 67,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public Object value(String key,Type valueType){\n  PropDesc sourcePd=sourcePdMap.get(key);\n  if (null == sourcePd && (Boolean.class == valueType || boolean.class == valueType)) {\n    sourcePd=sourcePdMap.get(StrUtil.upperFirstAndAddPre(key,\"is\"));\n  }\n  Object result=null;\n  if (null != sourcePd) {\n    final Method getter=sourcePd.getGetter();\n    if (null != getter) {\n      try {\n        result=getter.invoke(source);\n      }\n catch (      Exception e) {\n        if (false == ignoreError) {\n          throw new UtilException(e,\"Inject [{}] error!\",key);\n        }\n      }\n      final Object Convert.convertWithCheck(valueType,result,null,ignoreError)=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      if (null != Convert.convertWithCheck(valueType,result,null,ignoreError)) {\n        result=Convert.convertWithCheck(valueType,result,null,ignoreError);\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 15
    } ],
    "tokenLength" : 6,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 59,
    "startLineNumber" : 61,
    "startColumnNumber" : 15,
    "endLineNumber" : 61,
    "endColumnNumber" : 74
  }, {
    "charLength" : 59,
    "startLineNumber" : 62,
    "startColumnNumber" : 14,
    "endLineNumber" : 62,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "convertValue",
  "nodePosition" : {
    "charLength" : 12,
    "startLineNumber" : 60,
    "startColumnNumber" : 17,
    "endLineNumber" : 60,
    "endColumnNumber" : 29
  }
}