{
  "id" : 2,
  "expression" : "a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b",
  "projectName" : "antlr@antlr4",
  "commitID" : "df62fba4b053f0255b80e4b06f904d31c658fb6a",
  "filePath" : "tool/src/org/antlr/v4/automata/LexerATNFactory.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 58,
      "startLineNumber" : 619,
      "startColumnNumber" : 8,
      "endLineNumber" : 619,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 18,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 618,
        "startColumnNumber" : 6,
        "endLineNumber" : 619,
        "endColumnNumber" : 29
      },
      "nodeContext" : "g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 618,
        "startColumnNumber" : 6,
        "endLineNumber" : 619,
        "endColumnNumber" : 30
      },
      "nodeContext" : "g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 893,
        "startLineNumber" : 596,
        "startColumnNumber" : 26,
        "endLineNumber" : 622,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  String setText;\n  if (rootAst.getChildren() == null) {\n    setText=rootAst.getText();\n  }\n else {\n    StringBuilder sb=new StringBuilder();\n    for (    Object child : rootAst.getChildren()) {\n      if (child instanceof RangeAST) {\n        sb.append(((RangeAST)child).getChild(0).getText());\n        sb.append(\"..\");\n        sb.append(((RangeAST)child).getChild(1).getText());\n      }\n else {\n        sb.append(((GrammarAST)child).getText());\n      }\n      sb.append(\" | \");\n    }\n    sb.replace(sb.length() - 3,sb.length(),\"\");\n    setText=sb.toString();\n  }\n  String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n  g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n  charactersCollision=true;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 596,
        "startColumnNumber" : 5,
        "endLineNumber" : 622,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (set.contains(i)) {\n  String setText;\n  if (rootAst.getChildren() == null) {\n    setText=rootAst.getText();\n  }\n else {\n    StringBuilder sb=new StringBuilder();\n    for (    Object child : rootAst.getChildren()) {\n      if (child instanceof RangeAST) {\n        sb.append(((RangeAST)child).getChild(0).getText());\n        sb.append(\"..\");\n        sb.append(((RangeAST)child).getChild(1).getText());\n      }\n else {\n        sb.append(((GrammarAST)child).getText());\n      }\n      sb.append(\" | \");\n    }\n    sb.replace(sb.length() - 3,sb.length(),\"\");\n    setText=sb.toString();\n  }\n  String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n  g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n  charactersCollision=true;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 595,
        "startColumnNumber" : 33,
        "endLineNumber" : 623,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (set.contains(i)) {\n    String setText;\n    if (rootAst.getChildren() == null) {\n      setText=rootAst.getText();\n    }\n else {\n      StringBuilder sb=new StringBuilder();\n      for (      Object child : rootAst.getChildren()) {\n        if (child instanceof RangeAST) {\n          sb.append(((RangeAST)child).getChild(0).getText());\n          sb.append(\"..\");\n          sb.append(((RangeAST)child).getChild(1).getText());\n        }\n else {\n          sb.append(((GrammarAST)child).getText());\n        }\n        sb.append(\" | \");\n      }\n      sb.replace(sb.length() - 3,sb.length(),\"\");\n      setText=sb.toString();\n    }\n    String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n    g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n    charactersCollision=true;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 995,
        "startLineNumber" : 595,
        "startColumnNumber" : 4,
        "endLineNumber" : 623,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=a; i <= b; i++) {\n  if (set.contains(i)) {\n    String setText;\n    if (rootAst.getChildren() == null) {\n      setText=rootAst.getText();\n    }\n else {\n      StringBuilder sb=new StringBuilder();\n      for (      Object child : rootAst.getChildren()) {\n        if (child instanceof RangeAST) {\n          sb.append(((RangeAST)child).getChild(0).getText());\n          sb.append(\"..\");\n          sb.append(((RangeAST)child).getChild(1).getText());\n        }\n else {\n          sb.append(((GrammarAST)child).getText());\n        }\n        sb.append(\" | \");\n      }\n      sb.replace(sb.length() - 3,sb.length(),\"\");\n      setText=sb.toString();\n    }\n    String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n    g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n    charactersCollision=true;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 193,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 594,
        "startColumnNumber" : 29,
        "endLineNumber" : 624,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  for (int i=a; i <= b; i++) {\n    if (set.contains(i)) {\n      String setText;\n      if (rootAst.getChildren() == null) {\n        setText=rootAst.getText();\n      }\n else {\n        StringBuilder sb=new StringBuilder();\n        for (        Object child : rootAst.getChildren()) {\n          if (child instanceof RangeAST) {\n            sb.append(((RangeAST)child).getChild(0).getText());\n            sb.append(\"..\");\n            sb.append(((RangeAST)child).getChild(1).getText());\n          }\n else {\n            sb.append(((GrammarAST)child).getText());\n          }\n          sb.append(\" | \");\n        }\n        sb.replace(sb.length() - 3,sb.length(),\"\");\n        setText=sb.toString();\n      }\n      String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n      g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n      charactersCollision=true;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 594,
        "startColumnNumber" : 3,
        "endLineNumber" : 624,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!charactersCollision) {\n  for (int i=a; i <= b; i++) {\n    if (set.contains(i)) {\n      String setText;\n      if (rootAst.getChildren() == null) {\n        setText=rootAst.getText();\n      }\n else {\n        StringBuilder sb=new StringBuilder();\n        for (        Object child : rootAst.getChildren()) {\n          if (child instanceof RangeAST) {\n            sb.append(((RangeAST)child).getChild(0).getText());\n            sb.append(\"..\");\n            sb.append(((RangeAST)child).getChild(1).getText());\n          }\n else {\n            sb.append(((GrammarAST)child).getText());\n          }\n          sb.append(\" | \");\n        }\n        sb.replace(sb.length() - 3,sb.length(),\"\");\n        setText=sb.toString();\n      }\n      String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n      g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n      charactersCollision=true;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 197,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 592,
        "startColumnNumber" : 7,
        "endLineNumber" : 627,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean charactersCollision=previousStatus != null && previousStatus.collision;\n  if (!charactersCollision) {\n    for (int i=a; i <= b; i++) {\n      if (set.contains(i)) {\n        String setText;\n        if (rootAst.getChildren() == null) {\n          setText=rootAst.getText();\n        }\n else {\n          StringBuilder sb=new StringBuilder();\n          for (          Object child : rootAst.getChildren()) {\n            if (child instanceof RangeAST) {\n              sb.append(((RangeAST)child).getChild(0).getText());\n              sb.append(\"..\");\n              sb.append(((RangeAST)child).getChild(1).getText());\n            }\n else {\n              sb.append(((GrammarAST)child).getText());\n            }\n            sb.append(\" | \");\n          }\n          sb.replace(sb.length() - 3,sb.length(),\"\");\n          setText=sb.toString();\n        }\n        String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n        g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n        charactersCollision=true;\n        break;\n      }\n    }\n  }\n  status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n  set.add(a,b);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1810,
        "startLineNumber" : 581,
        "startColumnNumber" : 2,
        "endLineNumber" : 627,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (caseInsensitive) {\n  status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n  if (charactersData.isSingleRange()) {\n    status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n  }\n else {\n    status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n    status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n  }\n}\n else {\n  boolean charactersCollision=previousStatus != null && previousStatus.collision;\n  if (!charactersCollision) {\n    for (int i=a; i <= b; i++) {\n      if (set.contains(i)) {\n        String setText;\n        if (rootAst.getChildren() == null) {\n          setText=rootAst.getText();\n        }\n else {\n          StringBuilder sb=new StringBuilder();\n          for (          Object child : rootAst.getChildren()) {\n            if (child instanceof RangeAST) {\n              sb.append(((RangeAST)child).getChild(0).getText());\n              sb.append(\"..\");\n              sb.append(((RangeAST)child).getChild(1).getText());\n            }\n else {\n              sb.append(((GrammarAST)child).getText());\n            }\n            sb.append(\" | \");\n          }\n          sb.replace(sb.length() - 3,sb.length(),\"\");\n          setText=sb.toString();\n        }\n        String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n        g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n        charactersCollision=true;\n        break;\n      }\n    }\n  }\n  status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n  set.add(a,b);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 288,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2121,
        "startLineNumber" : 577,
        "startColumnNumber" : 191,
        "endLineNumber" : 629,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CharactersDataCheckStatus status;\n  RangeBorderCharactersData charactersData=RangeBorderCharactersData.getAndCheckCharactersData(a,b,g,ast,previousStatus == null || !previousStatus.notImpliedCharacters);\n  if (caseInsensitive) {\n    status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n    if (charactersData.isSingleRange()) {\n      status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n    }\n else {\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n    }\n  }\n else {\n    boolean charactersCollision=previousStatus != null && previousStatus.collision;\n    if (!charactersCollision) {\n      for (int i=a; i <= b; i++) {\n        if (set.contains(i)) {\n          String setText;\n          if (rootAst.getChildren() == null) {\n            setText=rootAst.getText();\n          }\n else {\n            StringBuilder sb=new StringBuilder();\n            for (            Object child : rootAst.getChildren()) {\n              if (child instanceof RangeAST) {\n                sb.append(((RangeAST)child).getChild(0).getText());\n                sb.append(\"..\");\n                sb.append(((RangeAST)child).getChild(1).getText());\n              }\n else {\n                sb.append(((GrammarAST)child).getText());\n              }\n              sb.append(\" | \");\n            }\n            sb.replace(sb.length() - 3,sb.length(),\"\");\n            setText=sb.toString();\n          }\n          String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n          g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n          charactersCollision=true;\n          break;\n        }\n      }\n    }\n    status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n    set.add(a,b);\n  }\n  return status;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2304,
        "startLineNumber" : 577,
        "startColumnNumber" : 1,
        "endLineNumber" : 629,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private CharactersDataCheckStatus checkRangeAndAddToSet(GrammarAST rootAst,GrammarAST ast,IntervalSet set,int a,int b,boolean caseInsensitive,CharactersDataCheckStatus previousStatus){\n  CharactersDataCheckStatus status;\n  RangeBorderCharactersData charactersData=RangeBorderCharactersData.getAndCheckCharactersData(a,b,g,ast,previousStatus == null || !previousStatus.notImpliedCharacters);\n  if (caseInsensitive) {\n    status=new CharactersDataCheckStatus(false,charactersData.mixOfLowerAndUpperCharCase);\n    if (charactersData.isSingleRange()) {\n      status=checkRangeAndAddToSet(rootAst,ast,set,a,b,false,status);\n    }\n else {\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.lowerFrom,charactersData.lowerTo,false,status);\n      status=checkRangeAndAddToSet(rootAst,ast,set,charactersData.upperFrom,charactersData.upperTo,false,status);\n    }\n  }\n else {\n    boolean charactersCollision=previousStatus != null && previousStatus.collision;\n    if (!charactersCollision) {\n      for (int i=a; i <= b; i++) {\n        if (set.contains(i)) {\n          String setText;\n          if (rootAst.getChildren() == null) {\n            setText=rootAst.getText();\n          }\n else {\n            StringBuilder sb=new StringBuilder();\n            for (            Object child : rootAst.getChildren()) {\n              if (child instanceof RangeAST) {\n                sb.append(((RangeAST)child).getChild(0).getText());\n                sb.append(\"..\");\n                sb.append(((RangeAST)child).getChild(1).getText());\n              }\n else {\n                sb.append(((GrammarAST)child).getText());\n              }\n              sb.append(\" | \");\n            }\n            sb.replace(sb.length() - 3,sb.length(),\"\");\n            setText=sb.toString();\n          }\n          String a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b=a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b;\n          g.tool.errMgr.grammarError(ErrorType.CHARACTERS_COLLISION_IN_SET,g.fileName,ast.getToken(),a == b ? String.valueOf((char)a) : (char)a + \"-\" + (char)b,setText);\n          charactersCollision=true;\n          break;\n        }\n      }\n    }\n    status=new CharactersDataCheckStatus(charactersCollision,charactersData.mixOfLowerAndUpperCharCase);\n    set.add(a,b);\n  }\n  return status;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 24
    } ],
    "tokenLength" : 11,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 58,
    "startLineNumber" : 619,
    "startColumnNumber" : 8,
    "endLineNumber" : 619,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "charsString",
  "nodePosition" : {
    "charLength" : 11,
    "startLineNumber" : 617,
    "startColumnNumber" : 13,
    "endLineNumber" : 617,
    "endColumnNumber" : 24
  }
}