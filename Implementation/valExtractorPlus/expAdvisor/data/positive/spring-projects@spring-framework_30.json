{
  "id" : 30,
  "expression" : "testContext.getTestClass()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "9614817e884367da0c20539da5391968d74a0b51",
  "filePath" : "spring-test/src/main/java/org/springframework/test/context/support/DependencyInjectionTestExecutionListener.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "testContext.getTestClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 120,
      "startColumnNumber" : 35,
      "endLineNumber" : 120,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 120,
        "startColumnNumber" : 35,
        "endLineNumber" : 120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "testContext.getTestClass().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 120,
        "startColumnNumber" : 35,
        "endLineNumber" : 120,
        "endColumnNumber" : 125
      },
      "nodeContext" : "testContext.getTestClass().getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 125
      },
      "nodeContext" : "beanFactory.initializeBean(bean,testContext.getTestClass().getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 127
      },
      "nodeContext" : "beanFactory.initializeBean(bean,testContext.getTestClass().getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 115,
        "startColumnNumber" : 77,
        "endLineNumber" : 122,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=testContext.getTestInstance();\n  Class<?> testContext.getTestClass()=testContext.getTestClass();\n  AutowireCapableBeanFactory beanFactory=testContext.getApplicationContext().getAutowireCapableBeanFactory();\n  beanFactory.autowireBeanProperties(bean,AutowireCapableBeanFactory.AUTOWIRE_NO,false);\n  beanFactory.initializeBean(bean,testContext.getTestClass().getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX);\n  testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1136,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 122,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Performs dependency injection and bean initialization for the supplied {@link TestContext} as described in{@link #prepareTestInstance(TestContext) prepareTestInstance()}. <p>The  {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removedfrom the test context, regardless of its value.\n * @param testContext the test context for which dependency injection shouldbe performed (never  {@code null})\n * @throws Exception allows any exception to propagate\n * @see #prepareTestInstance(TestContext)\n * @see #beforeTestMethod(TestContext)\n */\nprotected void injectDependencies(TestContext testContext) throws Exception {\n  Object bean=testContext.getTestInstance();\n  Class<?> testContext.getTestClass()=testContext.getTestClass();\n  AutowireCapableBeanFactory beanFactory=testContext.getApplicationContext().getAutowireCapableBeanFactory();\n  beanFactory.autowireBeanProperties(bean,AutowireCapableBeanFactory.AUTOWIRE_NO,false);\n  beanFactory.initializeBean(bean,testContext.getTestClass().getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX);\n  testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 68,
      "astHeight" : 8
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 120,
    "startColumnNumber" : 35,
    "endLineNumber" : 120,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "clazz",
  "nodePosition" : {
    "charLength" : 5,
    "startLineNumber" : 117,
    "startColumnNumber" : 11,
    "endLineNumber" : 117,
    "endColumnNumber" : 16
  }
}