{
  "id" : 4,
  "expression" : "e.getCause()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "8965822c11828b4e69baee911f315901c2e073ec",
  "filePath" : "src/test/java/io/vertx/test/core/HttpTLSTest.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "e.getCause()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 569,
      "startColumnNumber" : 46,
      "endLineNumber" : 569,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 569,
        "startColumnNumber" : 46,
        "endLineNumber" : 569,
        "endColumnNumber" : 71
      },
      "nodeContext" : "e.getCause().getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 569,
        "startColumnNumber" : 16,
        "endLineNumber" : 569,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedPossiblePrefix.equals(e.getCause().getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 569,
        "startColumnNumber" : 10,
        "endLineNumber" : 569,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ok|=expectedPossiblePrefix.equals(e.getCause().getMessage())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 569,
        "startColumnNumber" : 10,
        "endLineNumber" : 569,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 568,
        "startColumnNumber" : 71,
        "endLineNumber" : 570,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 568,
        "startColumnNumber" : 8,
        "endLineNumber" : 570,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String expectedPossiblePrefix : expectedPossiblePrefixes) {\n  ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 566,
        "startColumnNumber" : 33,
        "endLineNumber" : 574,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 566,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (expectedSuffix == null) {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n else {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 564,
        "startColumnNumber" : 31,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 564,
        "startColumnNumber" : 6,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 101,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 561,
        "startColumnNumber" : 4,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  server.listen();\n  fail(\"Was expecting a failure\");\n}\n catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 555,
        "startColumnNumber" : 120,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 555,
        "startColumnNumber" : 2,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testStore(HttpServerOptions serverOptions,List<String> expectedPossiblePrefixes,String expectedSuffix){\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 15
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "e.getCause()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 572,
      "startColumnNumber" : 35,
      "endLineNumber" : 572,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 572,
        "startColumnNumber" : 35,
        "endLineNumber" : 572,
        "endColumnNumber" : 60
      },
      "nodeContext" : "e.getCause().getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 572,
        "startColumnNumber" : 15,
        "endLineNumber" : 572,
        "endColumnNumber" : 117
      },
      "nodeContext" : "\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 572,
        "startColumnNumber" : 10,
        "endLineNumber" : 572,
        "endColumnNumber" : 118
      },
      "nodeContext" : "fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 572,
        "startColumnNumber" : 10,
        "endLineNumber" : 572,
        "endColumnNumber" : 120
      },
      "nodeContext" : "fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 571,
        "startColumnNumber" : 17,
        "endLineNumber" : 573,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 571,
        "startColumnNumber" : 8,
        "endLineNumber" : 573,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ok) {\n  fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 566,
        "startColumnNumber" : 33,
        "endLineNumber" : 574,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 566,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (expectedSuffix == null) {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n else {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 564,
        "startColumnNumber" : 31,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 564,
        "startColumnNumber" : 6,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 101,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 561,
        "startColumnNumber" : 4,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  server.listen();\n  fail(\"Was expecting a failure\");\n}\n catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 555,
        "startColumnNumber" : 120,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 555,
        "startColumnNumber" : 2,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testStore(HttpServerOptions serverOptions,List<String> expectedPossiblePrefixes,String expectedSuffix){\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 15
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "e.getCause()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 577,
      "startColumnNumber" : 16,
      "endLineNumber" : 577,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 577,
        "startColumnNumber" : 16,
        "endLineNumber" : 577,
        "endColumnNumber" : 41
      },
      "nodeContext" : "e.getCause().getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 577,
        "startColumnNumber" : 16,
        "endLineNumber" : 577,
        "endColumnNumber" : 76
      },
      "nodeContext" : "e.getCause().getMessage().startsWith(expectedPossiblePrefix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 577,
        "startColumnNumber" : 10,
        "endLineNumber" : 577,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 577,
        "startColumnNumber" : 10,
        "endLineNumber" : 577,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 576,
        "startColumnNumber" : 71,
        "endLineNumber" : 578,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 576,
        "startColumnNumber" : 8,
        "endLineNumber" : 578,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String expectedPossiblePrefix : expectedPossiblePrefixes) {\n  ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 574,
        "startColumnNumber" : 13,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 566,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (expectedSuffix == null) {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n else {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 564,
        "startColumnNumber" : 31,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 564,
        "startColumnNumber" : 6,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 101,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 561,
        "startColumnNumber" : 4,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  server.listen();\n  fail(\"Was expecting a failure\");\n}\n catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 555,
        "startColumnNumber" : 120,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 555,
        "startColumnNumber" : 2,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testStore(HttpServerOptions serverOptions,List<String> expectedPossiblePrefixes,String expectedSuffix){\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 15
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "e.getCause()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 582,
      "startColumnNumber" : 19,
      "endLineNumber" : 582,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 582,
        "startColumnNumber" : 19,
        "endLineNumber" : 582,
        "endColumnNumber" : 44
      },
      "nodeContext" : "e.getCause().getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 582,
        "startColumnNumber" : 19,
        "endLineNumber" : 582,
        "endColumnNumber" : 69
      },
      "nodeContext" : "e.getCause().getMessage().endsWith(expectedSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 582,
        "startColumnNumber" : 8,
        "endLineNumber" : 582,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertTrue(e.getCause().getMessage().endsWith(expectedSuffix))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 582,
        "startColumnNumber" : 8,
        "endLineNumber" : 582,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 574,
        "startColumnNumber" : 13,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 566,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (expectedSuffix == null) {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n  }\n  if (!ok) {\n    fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n  }\n}\n else {\n  boolean ok=expectedPossiblePrefixes.isEmpty();\n  for (  String expectedPossiblePrefix : expectedPossiblePrefixes) {\n    ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n  }\n  if (!ok) {\n    fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n  }\n  assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 564,
        "startColumnNumber" : 31,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 564,
        "startColumnNumber" : 6,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 561,
        "startColumnNumber" : 4,
        "endLineNumber" : 584,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  server.listen();\n  fail(\"Was expecting a failure\");\n}\n catch (VertxException e) {\n  Throwable e.getCause()=e.getCause();\n  if (expectedSuffix == null) {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n    }\n    if (!ok) {\n      fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n    }\n  }\n else {\n    boolean ok=expectedPossiblePrefixes.isEmpty();\n    for (    String expectedPossiblePrefix : expectedPossiblePrefixes) {\n      ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n    }\n    if (!ok) {\n      fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n    }\n    assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 111,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 555,
        "startColumnNumber" : 120,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 555,
        "startColumnNumber" : 2,
        "endLineNumber" : 585,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testStore(HttpServerOptions serverOptions,List<String> expectedPossiblePrefixes,String expectedSuffix){\n  serverOptions.setSsl(true);\n  serverOptions.setPort(4043);\n  HttpServer server=vertx.createHttpServer(serverOptions);\n  server.requestHandler(req -> {\n  }\n);\n  try {\n    server.listen();\n    fail(\"Was expecting a failure\");\n  }\n catch (  VertxException e) {\n    Throwable e.getCause()=e.getCause();\n    if (expectedSuffix == null) {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=expectedPossiblePrefix.equals(e.getCause().getMessage());\n      }\n      if (!ok) {\n        fail(\"Was expecting <\" + e.getCause().getMessage() + \">  to be equals to one of \"+ expectedPossiblePrefixes);\n      }\n    }\n else {\n      boolean ok=expectedPossiblePrefixes.isEmpty();\n      for (      String expectedPossiblePrefix : expectedPossiblePrefixes) {\n        ok|=e.getCause().getMessage().startsWith(expectedPossiblePrefix);\n      }\n      if (!ok) {\n        fail(\"Was expecting e.getCause().getMessage() to be prefixed by one of \" + expectedPossiblePrefixes);\n      }\n      assertTrue(e.getCause().getMessage().endsWith(expectedSuffix));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 14
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Throwable"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 569,
    "startColumnNumber" : 46,
    "endLineNumber" : 569,
    "endColumnNumber" : 58
  }, {
    "charLength" : 12,
    "startLineNumber" : 572,
    "startColumnNumber" : 35,
    "endLineNumber" : 572,
    "endColumnNumber" : 47
  }, {
    "charLength" : 12,
    "startLineNumber" : 577,
    "startColumnNumber" : 16,
    "endLineNumber" : 577,
    "endColumnNumber" : 28
  }, {
    "charLength" : 12,
    "startLineNumber" : 582,
    "startColumnNumber" : 19,
    "endLineNumber" : 582,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "cause",
  "nodePosition" : {
    "charLength" : 5,
    "startLineNumber" : 565,
    "startColumnNumber" : 16,
    "endLineNumber" : 565,
    "endColumnNumber" : 21
  }
}