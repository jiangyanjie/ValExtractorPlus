{
  "id" : 1,
  "expression" : "dataBuffers.size()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "dataBuffers.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 103,
      "startColumnNumber" : 6,
      "endLineNumber" : 103,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 29
      },
      "nodeContext" : "dataBuffers.size() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 103,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (dataBuffers.size() == 1) {\n  return dataBuffers.get(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 100,
        "startColumnNumber" : 64,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notEmpty(dataBuffers,\"DataBuffer List must not be empty\");\n  int dataBuffers.size()=dataBuffers.size();\n  if (dataBuffers.size() == 1) {\n    return dataBuffers.get(0);\n  }\n  CompositeByteBuf composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size());\n  for (  DataBuffer dataBuffer : dataBuffers) {\n    Assert.isInstanceOf(NettyDataBuffer.class,dataBuffer);\n    composite.addComponent(true,((NettyDataBuffer)dataBuffer).getNativeBuffer());\n  }\n  return new NettyDataBuffer(composite,this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 95,
        "startColumnNumber" : 1,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@inheritDoc}<p>This implementation uses Netty's  {@link CompositeByteBuf}.\n */\n@Override public DataBuffer join(List<? extends DataBuffer> dataBuffers){\n  Assert.notEmpty(dataBuffers,\"DataBuffer List must not be empty\");\n  int dataBuffers.size()=dataBuffers.size();\n  if (dataBuffers.size() == 1) {\n    return dataBuffers.get(0);\n  }\n  CompositeByteBuf composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size());\n  for (  DataBuffer dataBuffer : dataBuffers) {\n    Assert.isInstanceOf(NettyDataBuffer.class,dataBuffer);\n    composite.addComponent(true,((NettyDataBuffer)dataBuffer).getNativeBuffer());\n  }\n  return new NettyDataBuffer(composite,this);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 11
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "dataBuffers.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 106,
      "startColumnNumber" : 69,
      "endLineNumber" : 106,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 106,
        "startColumnNumber" : 31,
        "endLineNumber" : 106,
        "endColumnNumber" : 88
      },
      "nodeContext" : "this.byteBufAllocator.compositeBuffer(dataBuffers.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 106,
        "startColumnNumber" : 19,
        "endLineNumber" : 106,
        "endColumnNumber" : 86
      },
      "nodeContext" : "composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 88
      },
      "nodeContext" : "CompositeByteBuf composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 100,
        "startColumnNumber" : 64,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notEmpty(dataBuffers,\"DataBuffer List must not be empty\");\n  int dataBuffers.size()=dataBuffers.size();\n  if (dataBuffers.size() == 1) {\n    return dataBuffers.get(0);\n  }\n  CompositeByteBuf composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size());\n  for (  DataBuffer dataBuffer : dataBuffers) {\n    Assert.isInstanceOf(NettyDataBuffer.class,dataBuffer);\n    composite.addComponent(true,((NettyDataBuffer)dataBuffer).getNativeBuffer());\n  }\n  return new NettyDataBuffer(composite,this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 95,
        "startColumnNumber" : 1,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@inheritDoc}<p>This implementation uses Netty's  {@link CompositeByteBuf}.\n */\n@Override public DataBuffer join(List<? extends DataBuffer> dataBuffers){\n  Assert.notEmpty(dataBuffers,\"DataBuffer List must not be empty\");\n  int dataBuffers.size()=dataBuffers.size();\n  if (dataBuffers.size() == 1) {\n    return dataBuffers.get(0);\n  }\n  CompositeByteBuf composite=this.byteBufAllocator.compositeBuffer(dataBuffers.size());\n  for (  DataBuffer dataBuffer : dataBuffers) {\n    Assert.isInstanceOf(NettyDataBuffer.class,dataBuffer);\n    composite.addComponent(true,((NettyDataBuffer)dataBuffer).getNativeBuffer());\n  }\n  return new NettyDataBuffer(composite,this);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 11
    } ],
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 103,
    "startColumnNumber" : 6,
    "endLineNumber" : 103,
    "endColumnNumber" : 24
  }, {
    "charLength" : 18,
    "startLineNumber" : 106,
    "startColumnNumber" : 69,
    "endLineNumber" : 106,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "bufferCount",
  "nodePosition" : {
    "charLength" : 11,
    "startLineNumber" : 102,
    "startColumnNumber" : 6,
    "endLineNumber" : 102,
    "endColumnNumber" : 17
  }
}