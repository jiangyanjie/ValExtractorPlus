{
  "id" : 3,
  "expression" : "EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())",
  "projectName" : "apache@rocketmq",
  "commitID" : "7f234337d01c737bfd01d5e0fd2b86bdb8719d35",
  "filePath" : "remoting/src/main/java/org/apache/rocketmq/remoting/transport/mqtt/MqttMessage2RemotingCommandHandler.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 49,
      "startColumnNumber" : 12,
      "endLineNumber" : 49,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 107
      },
      "nodeContext" : "EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n  requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 42,
        "startColumnNumber" : 29,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(msg instanceof MqttMessage)) {\n    return;\n  }\n  RemotingCommand requestCommand=null;\n  Message2MessageEncodeDecode EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType());\n  if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n    requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n  }\n  out.add(requestCommand);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Decode from one message to an other. This method will be called for each written message that can be handled by this encoder.\n * @param ctx the {@link ChannelHandlerContext} which this {@link MessageToMessageDecoder}belongs to\n * @param msg the message to decode to an other one\n * @param out the {@link List} to which decoded messages should be added\n * @throws Exception is thrown if an error occurs\n */\n@Override protected void decode(ChannelHandlerContext ctx,MqttMessage msg,List<Object> out) throws Exception {\n  if (!(msg instanceof MqttMessage)) {\n    return;\n  }\n  RemotingCommand requestCommand=null;\n  Message2MessageEncodeDecode EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType());\n  if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n    requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n  }\n  out.add(requestCommand);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "tokenLength" : 6,
    "type" : "org.apache.rocketmq.remoting.transport.mqtt.dispatcher.Message2MessageEncodeDecode"
  }, {
    "nodeContext" : "EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 50,
      "startColumnNumber" : 29,
      "endLineNumber" : 50,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 50,
        "startColumnNumber" : 29,
        "endLineNumber" : 50,
        "endColumnNumber" : 128
      },
      "nodeContext" : "EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 126
      },
      "nodeContext" : "requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 128
      },
      "nodeContext" : "requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 49,
        "startColumnNumber" : 49,
        "endLineNumber" : 51,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n  requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 42,
        "startColumnNumber" : 29,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(msg instanceof MqttMessage)) {\n    return;\n  }\n  RemotingCommand requestCommand=null;\n  Message2MessageEncodeDecode EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType());\n  if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n    requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n  }\n  out.add(requestCommand);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Decode from one message to an other. This method will be called for each written message that can be handled by this encoder.\n * @param ctx the {@link ChannelHandlerContext} which this {@link MessageToMessageDecoder}belongs to\n * @param msg the message to decode to an other one\n * @param out the {@link List} to which decoded messages should be added\n * @throws Exception is thrown if an error occurs\n */\n@Override protected void decode(ChannelHandlerContext ctx,MqttMessage msg,List<Object> out) throws Exception {\n  if (!(msg instanceof MqttMessage)) {\n    return;\n  }\n  RemotingCommand requestCommand=null;\n  Message2MessageEncodeDecode EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType())=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType());\n  if (EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()) != null) {\n    requestCommand=EncodeDecodeDispatcher.getEncodeDecodeDispatcher().get(msg.fixedHeader().messageType()).decode(msg);\n  }\n  out.add(requestCommand);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 11
    } ],
    "tokenLength" : 6,
    "type" : "org.apache.rocketmq.remoting.transport.mqtt.dispatcher.Message2MessageEncodeDecode"
  } ],
  "positionList" : [ {
    "charLength" : 87,
    "startLineNumber" : 49,
    "startColumnNumber" : 12,
    "endLineNumber" : 49,
    "endColumnNumber" : 99
  }, {
    "charLength" : 87,
    "startLineNumber" : 50,
    "startColumnNumber" : 29,
    "endLineNumber" : 50,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "message2MessageEncodeDecode",
  "nodePosition" : {
    "charLength" : 27,
    "startLineNumber" : 47,
    "startColumnNumber" : 36,
    "endLineNumber" : 47,
    "endColumnNumber" : 63
  }
}