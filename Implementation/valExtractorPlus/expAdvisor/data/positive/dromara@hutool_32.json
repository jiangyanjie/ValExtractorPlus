{
  "id" : 32,
  "expression" : "((day * 24 + hour) * 60 + minute) * 60",
  "projectName" : "dromara@hutool",
  "commitID" : "e754ec3e86944f7d2c4d610123c5f3971fb08b99",
  "filePath" : "hutool-core/src/main/java/cn/hutool/core/date/BetweenFormater.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "((day * 24 + hour) * 60 + minute) * 60",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 56,
      "startColumnNumber" : 59,
      "endLineNumber" : 56,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 13,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 56,
        "startColumnNumber" : 17,
        "endLineNumber" : 56,
        "endColumnNumber" : 97
      },
      "nodeContext" : "betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 95
      },
      "nodeContext" : "second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 56,
        "startColumnNumber" : 3,
        "endLineNumber" : 56,
        "endColumnNumber" : 97
      },
      "nodeContext" : "long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 50,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n  long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1334,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (betweenMs > 0) {\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n  long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 48,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1609,
        "startLineNumber" : 43,
        "startColumnNumber" : 1,
        "endLineNumber" : 89,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 格式化日期间隔输出<br>\n * @return 格式化后的字符串\n */\npublic String format(){\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 15
    } ],
    "tokenLength" : 11,
    "type" : "long"
  }, {
    "nodeContext" : "((day * 24 + hour) * 60 + minute) * 60",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 57,
      "startColumnNumber" : 35,
      "endLineNumber" : 57,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 13,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 57,
        "startColumnNumber" : 35,
        "endLineNumber" : 57,
        "endColumnNumber" : 82
      },
      "nodeContext" : "((day * 24 + hour) * 60 + minute) * 60 + second",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 57,
        "startColumnNumber" : 34,
        "endLineNumber" : 57,
        "endColumnNumber" : 83
      },
      "nodeContext" : "(((day * 24 + hour) * 60 + minute) * 60 + second)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 16,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 57,
        "startColumnNumber" : 34,
        "endLineNumber" : 57,
        "endColumnNumber" : 90
      },
      "nodeContext" : "(((day * 24 + hour) * 60 + minute) * 60 + second) * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 57,
        "startColumnNumber" : 22,
        "endLineNumber" : 57,
        "endColumnNumber" : 90
      },
      "nodeContext" : "betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 22,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 57,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 90
      },
      "nodeContext" : "long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 50,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n  long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1334,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (betweenMs > 0) {\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n  long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLSECOND.name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 48,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1609,
        "startLineNumber" : 43,
        "startColumnNumber" : 1,
        "endLineNumber" : 89,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 格式化日期间隔输出<br>\n * @return 格式化后的字符串\n */\npublic String format(){\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long ((day * 24 + hour) * 60 + minute) * 60=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;\n    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLSECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 18
    } ],
    "tokenLength" : 11,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 56,
    "startColumnNumber" : 59,
    "endLineNumber" : 56,
    "endColumnNumber" : 97
  }, {
    "charLength" : 38,
    "startLineNumber" : 57,
    "startColumnNumber" : 35,
    "endLineNumber" : 57,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "BetweenOfSecond",
  "nodePosition" : {
    "charLength" : 15,
    "startLineNumber" : 55,
    "startColumnNumber" : 14,
    "endLineNumber" : 55,
    "endColumnNumber" : 29
  }
}