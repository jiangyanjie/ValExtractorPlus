{
    "id": 26,
    "expression": "originalBitLengths.length",
    "projectName": "commons-compress",
    "commitID": "1470c26cadbbfe6a7150f862766eaa30937fbd2b",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
    "occurrences": 4,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "originalBitLengths.length",
            "nodeType": "QualifiedName",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 154,
                "startColumnNumber": 42,
                "endLineNumber": 154,
                "endColumnNumber": 67
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 154,
                        "startColumnNumber": 34,
                        "endLineNumber": 154,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "new int[originalBitLengths.length]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 154,
                        "startColumnNumber": 20,
                        "endLineNumber": 154,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "permutation=new int[originalBitLengths.length]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 154,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "final int[] permutation=new int[originalBitLengths.length];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 154,
                    "startColumnNumber": 8,
                    "endLineNumber": 154,
                    "endColumnNumber": 69
                },
                "nodeContext": "final int[] permutation=new int[originalBitLengths.length];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "int"
        },
        {
            "nodeContext": "originalBitLengths.length",
            "nodeType": "QualifiedName",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 160,
                "startColumnNumber": 47,
                "endLineNumber": 160,
                "endColumnNumber": 72
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 160,
                        "startColumnNumber": 39,
                        "endLineNumber": 160,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "new int[originalBitLengths.length]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 160,
                        "startColumnNumber": 20,
                        "endLineNumber": 160,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "sortedBitLengths=new int[originalBitLengths.length]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 160,
                        "startColumnNumber": 8,
                        "endLineNumber": 160,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "final int[] sortedBitLengths=new int[originalBitLengths.length];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 160,
                    "startColumnNumber": 8,
                    "endLineNumber": 160,
                    "endColumnNumber": 74
                },
                "nodeContext": "final int[] sortedBitLengths=new int[originalBitLengths.length];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "int"
        },
        {
            "nodeContext": "originalBitLengths.length",
            "nodeType": "QualifiedName",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 161,
                "startColumnNumber": 28,
                "endLineNumber": 161,
                "endColumnNumber": 53
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 161,
                        "startColumnNumber": 24,
                        "endLineNumber": 161,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "k < originalBitLengths.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 575,
                        "startLineNumber": 161,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < originalBitLengths.length; k++) {\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 161,
                    "startColumnNumber": 24,
                    "endLineNumber": 161,
                    "endColumnNumber": 53
                },
                "nodeContext": "k < originalBitLengths.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "int"
        },
        {
            "nodeContext": "originalBitLengths.length",
            "nodeType": "QualifiedName",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 163,
                "startColumnNumber": 32,
                "endLineNumber": 163,
                "endColumnNumber": 57
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 163,
                        "startColumnNumber": 28,
                        "endLineNumber": 163,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "l < originalBitLengths.length",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 457,
                        "startLineNumber": 163,
                        "startColumnNumber": 12,
                        "endLineNumber": 174,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int l=0; l < originalBitLengths.length; l++) {\n  if (originalBitLengths[l] == k) {\n    sortedBitLengths[c]=k;\n    permutation[c]=l;\n    c++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 523,
                        "startLineNumber": 161,
                        "startColumnNumber": 60,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 37,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 575,
                        "startLineNumber": 161,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < originalBitLengths.length; k++) {\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 163,
                    "startColumnNumber": 28,
                    "endLineNumber": 163,
                    "endColumnNumber": 57
                },
                "nodeContext": "l < originalBitLengths.length",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 25,
            "startLineNumber": 154,
            "startColumnNumber": 42,
            "endLineNumber": 154,
            "endColumnNumber": 67
        },
        {
            "charLength": 25,
            "startLineNumber": 160,
            "startColumnNumber": 47,
            "endLineNumber": 160,
            "endColumnNumber": 72
        },
        {
            "charLength": 25,
            "startLineNumber": 161,
            "startColumnNumber": 28,
            "endLineNumber": 161,
            "endColumnNumber": 53
        },
        {
            "charLength": 25,
            "startLineNumber": 163,
            "startColumnNumber": 32,
            "endLineNumber": 163,
            "endColumnNumber": 57
        }
    ],
    "layoutRelationDataList": []
}