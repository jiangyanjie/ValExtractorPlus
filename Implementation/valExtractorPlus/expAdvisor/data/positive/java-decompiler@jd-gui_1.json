{
  "id" : 1,
  "expression" : "ctx.getToken(JavaParser.Identifier,0)",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "services/src/main/java/org/jd/gui/service/indexer/JavaFileIndexerProvider.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "ctx.getToken(JavaParser.Identifier,0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 127,
      "startColumnNumber" : 16,
      "endLineNumber" : 127,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ctx.getToken(JavaParser.Identifier,0) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ctx.getToken(JavaParser.Identifier,0) != null) {\n  String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 200,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 123,
        "startColumnNumber" : 67,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TerminalNode ctx.getToken(JavaParser.Identifier,0)=ctx.getToken(JavaParser.Identifier,0);\n  if (ctx.getToken(JavaParser.Identifier,0) != null) {\n    String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode ctx.getToken(JavaParser.Identifier,0)=ctx.getToken(JavaParser.Identifier,0);\n  if (ctx.getToken(JavaParser.Identifier,0) != null) {\n    String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 14
    } ],
    "tokenLength" : 5,
    "type" : "org.jd.gui.service.indexer.TerminalNode"
  }, {
    "nodeContext" : "ctx.getToken(JavaParser.Identifier,0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 128,
      "startColumnNumber" : 34,
      "endLineNumber" : 128,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 128,
        "startColumnNumber" : 34,
        "endLineNumber" : 128,
        "endColumnNumber" : 81
      },
      "nodeContext" : "ctx.getToken(JavaParser.Identifier,0).getText()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 128,
        "startColumnNumber" : 23,
        "endLineNumber" : 128,
        "endColumnNumber" : 79
      },
      "nodeContext" : "typeName=ctx.getToken(JavaParser.Identifier,0).getText()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 81
      },
      "nodeContext" : "String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1421,
        "startLineNumber" : 127,
        "startColumnNumber" : 36,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ctx.getToken(JavaParser.Identifier,0) != null) {\n  String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n  int length=sbTypeDeclaration.length();\n  if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n    sbTypeDeclaration.append(typeName);\n  }\n else {\n    sbTypeDeclaration.append('$').append(typeName);\n  }\n  String internalTypeName=sbTypeDeclaration.toString();\n  typeDeclarationSet.add(internalTypeName);\n  nameToInternalTypeName.put(typeName,internalTypeName);\n  HashSet<String> superInternalTypeNameSet=new HashSet<>();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  if (superType != null) {\n    String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n    if (superQualifiedTypeName.charAt(0) != '*')     superInternalTypeNameSet.add(superQualifiedTypeName);\n  }\n  JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n  if (superInterfaces != null) {\n    for (    JavaParser.TypeContext superInterface : superInterfaces.type()) {\n      String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n      if (superQualifiedInterfaceName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedInterfaceName);\n    }\n  }\n  if (!superInternalTypeNameSet.isEmpty()) {\n    superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 200,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 123,
        "startColumnNumber" : 67,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TerminalNode ctx.getToken(JavaParser.Identifier,0)=ctx.getToken(JavaParser.Identifier,0);\n  if (ctx.getToken(JavaParser.Identifier,0) != null) {\n    String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx){\n  TerminalNode ctx.getToken(JavaParser.Identifier,0)=ctx.getToken(JavaParser.Identifier,0);\n  if (ctx.getToken(JavaParser.Identifier,0) != null) {\n    String typeName=ctx.getToken(JavaParser.Identifier,0).getText();\n    int length=sbTypeDeclaration.length();\n    if ((length == 0) || (sbTypeDeclaration.charAt(length - 1) == '/')) {\n      sbTypeDeclaration.append(typeName);\n    }\n else {\n      sbTypeDeclaration.append('$').append(typeName);\n    }\n    String internalTypeName=sbTypeDeclaration.toString();\n    typeDeclarationSet.add(internalTypeName);\n    nameToInternalTypeName.put(typeName,internalTypeName);\n    HashSet<String> superInternalTypeNameSet=new HashSet<>();\n    JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n    if (superType != null) {\n      String superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n      if (superQualifiedTypeName.charAt(0) != '*')       superInternalTypeNameSet.add(superQualifiedTypeName);\n    }\n    JavaParser.TypeListContext superInterfaces=ctx.getRuleContext(JavaParser.TypeListContext.class,0);\n    if (superInterfaces != null) {\n      for (      JavaParser.TypeContext superInterface : superInterfaces.type()) {\n        String superQualifiedInterfaceName=resolveInternalTypeName(superInterface.classOrInterfaceType().Identifier());\n        if (superQualifiedInterfaceName.charAt(0) != '*')         superInternalTypeNameSet.add(superQualifiedInterfaceName);\n      }\n    }\n    if (!superInternalTypeNameSet.isEmpty()) {\n      superTypeNamesMap.put(internalTypeName,superInternalTypeNameSet);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 14
    } ],
    "tokenLength" : 5,
    "type" : "org.jd.gui.service.indexer.TerminalNode"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 127,
    "startColumnNumber" : 16,
    "endLineNumber" : 127,
    "endColumnNumber" : 53
  }, {
    "charLength" : 37,
    "startLineNumber" : 128,
    "startColumnNumber" : 34,
    "endLineNumber" : 128,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "identifier",
  "nodePosition" : {
    "charLength" : 10,
    "startLineNumber" : 125,
    "startColumnNumber" : 25,
    "endLineNumber" : 125,
    "endColumnNumber" : 35
  }
}