{
  "id" : 67,
  "expression" : "String.format(template,bucketName)",
  "projectName" : "apache@skywalking",
  "commitID" : "1473c04d3e0973d08e4e478dbbccaa3873377e7c",
  "filePath" : "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "String.format(template,bucketName)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 95,
      "startColumnNumber" : 40,
      "endLineNumber" : 95,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 85
      },
      "nodeContext" : "summation.valueAccumulation(String.format(template,bucketName),values[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 87
      },
      "nodeContext" : "summation.valueAccumulation(String.format(template,bucketName),values[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 91,
        "startColumnNumber" : 48,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String String.format(template,bucketName)=String.format(template,bucketName);\n  summation.valueAccumulation(String.format(template,bucketName),values[i]);\n  count.valueAccumulation(String.format(template,bucketName),1L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String String.format(template,bucketName)=String.format(template,bucketName);\n  summation.valueAccumulation(String.format(template,bucketName),values[i]);\n  count.valueAccumulation(String.format(template,bucketName),1L);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 76,
        "startColumnNumber" : 77,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String String.format(template,bucketName)=String.format(template,bucketName);\n    summation.valueAccumulation(String.format(template,bucketName),values[i]);\n    count.valueAccumulation(String.format(template,bucketName),1L);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String String.format(template,bucketName)=String.format(template,bucketName);\n    summation.valueAccumulation(String.format(template,bucketName),values[i]);\n    count.valueAccumulation(String.format(template,bucketName),1L);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 10
    } ],
    "tokenLength" : 4,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "String.format(template,bucketName)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 96,
      "startColumnNumber" : 36,
      "endLineNumber" : 96,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 74
      },
      "nodeContext" : "count.valueAccumulation(String.format(template,bucketName),1L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 76
      },
      "nodeContext" : "count.valueAccumulation(String.format(template,bucketName),1L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 91,
        "startColumnNumber" : 48,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String String.format(template,bucketName)=String.format(template,bucketName);\n  summation.valueAccumulation(String.format(template,bucketName),values[i]);\n  count.valueAccumulation(String.format(template,bucketName),1L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  long bucket=value.getBuckets()[i];\n  String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n  String String.format(template,bucketName)=String.format(template,bucketName);\n  summation.valueAccumulation(String.format(template,bucketName),values[i]);\n  count.valueAccumulation(String.format(template,bucketName),1L);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 76,
        "startColumnNumber" : 77,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String String.format(template,bucketName)=String.format(template,bucketName);\n    summation.valueAccumulation(String.format(template,bucketName),values[i]);\n    count.valueAccumulation(String.format(template,bucketName),1L);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long bucket=value.getBuckets()[i];\n    String bucketName=bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n    String String.format(template,bucketName)=String.format(template,bucketName);\n    summation.valueAccumulation(String.format(template,bucketName),values[i]);\n    count.valueAccumulation(String.format(template,bucketName),1L);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 10
    } ],
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 95,
    "startColumnNumber" : 40,
    "endLineNumber" : 95,
    "endColumnNumber" : 74
  }, {
    "charLength" : 34,
    "startLineNumber" : 96,
    "startColumnNumber" : 36,
    "endLineNumber" : 96,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "key",
  "nodePosition" : {
    "charLength" : 3,
    "startLineNumber" : 94,
    "startColumnNumber" : 19,
    "endLineNumber" : 94,
    "endColumnNumber" : 22
  }
}