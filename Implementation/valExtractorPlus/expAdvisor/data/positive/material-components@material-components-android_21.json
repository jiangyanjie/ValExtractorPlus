{
  "id" : 21,
  "expression" : "chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
  "projectName" : "material-components@material-components-android",
  "commitID" : "663e1cd1cb3bbe75094e9f4baaae94f44a469798",
  "filePath" : "lib/src/android/support/design/chip/ChipDrawable.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 85,
      "startLineNumber" : 622,
      "startColumnNumber" : 33,
      "endLineNumber" : 622,
      "endColumnNumber" : 118
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 622,
        "startColumnNumber" : 19,
        "endLineNumber" : 622,
        "endColumnNumber" : 118
      },
      "nodeContext" : "bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 622,
        "startColumnNumber" : 8,
        "endLineNumber" : 622,
        "endColumnNumber" : 116
      },
      "nodeContext" : "pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 622,
        "startColumnNumber" : 8,
        "endLineNumber" : 622,
        "endColumnNumber" : 118
      },
      "nodeContext" : "pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 621,
        "startColumnNumber" : 80,
        "endLineNumber" : 624,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.LEFT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 621,
        "startColumnNumber" : 6,
        "endLineNumber" : 627,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n  pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.LEFT;\n}\n else {\n  pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.RIGHT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 617,
        "startColumnNumber" : 26,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n    pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.LEFT;\n  }\n else {\n    pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.RIGHT;\n  }\n  pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 617,
        "startColumnNumber" : 4,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (chipText != null) {\n  float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n    pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.LEFT;\n  }\n else {\n    pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.RIGHT;\n  }\n  pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 613,
        "startColumnNumber" : 68,
        "endLineNumber" : 633,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  pointF.set(0,0);\n  Align align=null;\n  if (chipText != null) {\n    float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n      pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.LEFT;\n    }\n else {\n      pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.RIGHT;\n    }\n    pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n  }\n  return align;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 955,
        "startLineNumber" : 609,
        "startColumnNumber" : 2,
        "endLineNumber" : 633,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the chip text's drawable-absolute origin point (top-left is <code>[bounds.left, bounds.top]</code>). Returns the text alignment at the origin.\n */\nprivate Align calculateChipTextOrigin(Rect bounds,PointF pointF){\n  pointF.set(0,0);\n  Align align=null;\n  if (chipText != null) {\n    float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n      pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.LEFT;\n    }\n else {\n      pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.RIGHT;\n    }\n    pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n  }\n  return align;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 14
    } ],
    "tokenLength" : 9,
    "type" : "float"
  }, {
    "nodeContext" : "chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 85,
      "startLineNumber" : 625,
      "startColumnNumber" : 34,
      "endLineNumber" : 625,
      "endColumnNumber" : 119
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 625,
        "startColumnNumber" : 19,
        "endLineNumber" : 625,
        "endColumnNumber" : 119
      },
      "nodeContext" : "bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 625,
        "startColumnNumber" : 8,
        "endLineNumber" : 625,
        "endColumnNumber" : 117
      },
      "nodeContext" : "pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 625,
        "startColumnNumber" : 8,
        "endLineNumber" : 625,
        "endColumnNumber" : 119
      },
      "nodeContext" : "pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 624,
        "startColumnNumber" : 13,
        "endLineNumber" : 627,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.RIGHT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 621,
        "startColumnNumber" : 6,
        "endLineNumber" : 627,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n  pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.LEFT;\n}\n else {\n  pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  align=Align.RIGHT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 617,
        "startColumnNumber" : 26,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n    pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.LEFT;\n  }\n else {\n    pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.RIGHT;\n  }\n  pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 617,
        "startColumnNumber" : 4,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (chipText != null) {\n  float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n  if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n    pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.LEFT;\n  }\n else {\n    pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    align=Align.RIGHT;\n  }\n  pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 613,
        "startColumnNumber" : 68,
        "endLineNumber" : 633,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  pointF.set(0,0);\n  Align align=null;\n  if (chipText != null) {\n    float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n      pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.LEFT;\n    }\n else {\n      pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.RIGHT;\n    }\n    pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n  }\n  return align;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 955,
        "startLineNumber" : 609,
        "startColumnNumber" : 2,
        "endLineNumber" : 633,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the chip text's drawable-absolute origin point (top-left is <code>[bounds.left, bounds.top]</code>). Returns the text alignment at the origin.\n */\nprivate Align calculateChipTextOrigin(Rect bounds,PointF pointF){\n  pointF.set(0,0);\n  Align align=null;\n  if (chipText != null) {\n    float chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding=chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n    if (DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_LTR) {\n      pointF.x=bounds.left + chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.LEFT;\n    }\n else {\n      pointF.x=bounds.right - chipStrokeWidth / 2f + chipStartPadding + calculateChipIconWidth() + textStartPadding;\n      align=Align.RIGHT;\n    }\n    pointF.y=bounds.centerY() - calculateChipTextCenterFromBaseline();\n  }\n  return align;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 14
    } ],
    "tokenLength" : 9,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 85,
    "startLineNumber" : 622,
    "startColumnNumber" : 33,
    "endLineNumber" : 622,
    "endColumnNumber" : 118
  }, {
    "charLength" : 85,
    "startLineNumber" : 625,
    "startColumnNumber" : 34,
    "endLineNumber" : 625,
    "endColumnNumber" : 119
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "offsetFromStart",
  "nodePosition" : {
    "charLength" : 15,
    "startLineNumber" : 618,
    "startColumnNumber" : 12,
    "endLineNumber" : 618,
    "endColumnNumber" : 27
  }
}