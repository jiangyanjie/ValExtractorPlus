{
  "id" : 15,
  "expression" : "new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "3fe11bf2c97823cbaba60b305338bc44a993daa5",
  "filePath" : "services/src/main/java/org/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 77,
      "startLineNumber" : 118,
      "startColumnNumber" : 25,
      "endLineNumber" : 118,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 111,
        "startColumnNumber" : 61,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1821,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 305,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 84,
        "startColumnNumber" : 128,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2262,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\"));\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 16
    } ],
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 77,
    "startLineNumber" : 118,
    "startColumnNumber" : 25,
    "endLineNumber" : 118,
    "endColumnNumber" : 102
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "location",
  "nodePosition" : {
    "charLength" : 8,
    "startLineNumber" : 113,
    "startColumnNumber" : 23,
    "endLineNumber" : 113,
    "endColumnNumber" : 31
  }
}