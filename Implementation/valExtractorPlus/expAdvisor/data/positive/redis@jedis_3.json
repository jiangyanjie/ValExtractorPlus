{
  "id" : 3,
  "expression" : "client.getMultiBulkReply()",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "src/main/java/redis/clients/jedis/Jedis.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "client.getMultiBulkReply()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 1926,
      "startColumnNumber" : 8,
      "endLineNumber" : 1926,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 1926,
        "startColumnNumber" : 8,
        "endLineNumber" : 1926,
        "endColumnNumber" : 42
      },
      "nodeContext" : "client.getMultiBulkReply() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1926,
        "startColumnNumber" : 4,
        "endLineNumber" : 1928,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (client.getMultiBulkReply() == null) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 1922,
        "startColumnNumber" : 41,
        "endLineNumber" : 1930,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> client.getMultiBulkReply()=client.getMultiBulkReply();\n  if (client.getMultiBulkReply() == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(client.getMultiBulkReply());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 1874,
        "startColumnNumber" : 2,
        "endLineNumber" : 1930,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return the all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). <p> The elements having the same score are returned sorted lexicographically as ASCII strings (this follows from a property of Redis sorted sets and does not involve further computation). <p> Using the optional  {@link #zrangeByScore(String,double,double,int,int) LIMIT} it's possibleto get only a range of the matching elements in an SQL-alike way. Note that if offset is large the commands needs to traverse the list for offset elements and this adds up to the O(M) figure. <p> The  {@link #zcount(String,double,double) ZCOUNT} command is similar to{@link #zrangeByScore(String,double,double) ZRANGEBYSCORE} but instead of returning theactual elements in the specified interval, it just returns the number of matching elements. <p> <b>Exclusive intervals and infinity</b> <p> min and max can be -inf and +inf, so that you are not required to know what's the greatest or smallest element in order to take, for instance, elements \"up to a given value\". <p> Also while the interval is for default closed (inclusive) it's possible to specify open intervals prefixing the score with a \"(\" character, so for instance: <p> {@code ZRANGEBYSCORE zset (1.3 5}<p> Will return all the values with score > 1.3 and <= 5, while for instance: <p> {@code ZRANGEBYSCORE zset (5 (10}<p> Will return all the values with score > 5 and < 10 (5 and 10 excluded). <p> <b>Time complexity:</b> <p> O(log(N))+O(M) with N being the number of elements in the sorted set and M the number of elements returned by the command, so if M is constant (for instance you always ask for the first ten elements with LIMIT) you can consider it O(log(N))\n * @see #zrangeByScore(String,double,double)\n * @see #zrangeByScore(String,double,double,int,int)\n * @see #zrangeByScoreWithScores(String,double,double)\n * @see #zrangeByScoreWithScores(String,double,double,int,int)\n * @see #zcount(String,double,double)\n * @param key\n * @param min\n * @param max\n * @return Multi bulk reply specifically a list of elements in the specified score range.\n */\npublic Set<String> zrangeByScore(final String key,final double min,final double max,final int offset,final int count){\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> client.getMultiBulkReply()=client.getMultiBulkReply();\n  if (client.getMultiBulkReply() == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(client.getMultiBulkReply());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 8
    } ],
    "tokenLength" : 2,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "client.getMultiBulkReply()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 1929,
      "startColumnNumber" : 37,
      "endLineNumber" : 1929,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1929,
        "startColumnNumber" : 11,
        "endLineNumber" : 1929,
        "endColumnNumber" : 64
      },
      "nodeContext" : "new LinkedHashSet<String>(client.getMultiBulkReply())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1929,
        "startColumnNumber" : 4,
        "endLineNumber" : 1929,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return new LinkedHashSet<String>(client.getMultiBulkReply());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 1922,
        "startColumnNumber" : 41,
        "endLineNumber" : 1930,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> client.getMultiBulkReply()=client.getMultiBulkReply();\n  if (client.getMultiBulkReply() == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(client.getMultiBulkReply());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 1874,
        "startColumnNumber" : 2,
        "endLineNumber" : 1930,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return the all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). <p> The elements having the same score are returned sorted lexicographically as ASCII strings (this follows from a property of Redis sorted sets and does not involve further computation). <p> Using the optional  {@link #zrangeByScore(String,double,double,int,int) LIMIT} it's possibleto get only a range of the matching elements in an SQL-alike way. Note that if offset is large the commands needs to traverse the list for offset elements and this adds up to the O(M) figure. <p> The  {@link #zcount(String,double,double) ZCOUNT} command is similar to{@link #zrangeByScore(String,double,double) ZRANGEBYSCORE} but instead of returning theactual elements in the specified interval, it just returns the number of matching elements. <p> <b>Exclusive intervals and infinity</b> <p> min and max can be -inf and +inf, so that you are not required to know what's the greatest or smallest element in order to take, for instance, elements \"up to a given value\". <p> Also while the interval is for default closed (inclusive) it's possible to specify open intervals prefixing the score with a \"(\" character, so for instance: <p> {@code ZRANGEBYSCORE zset (1.3 5}<p> Will return all the values with score > 1.3 and <= 5, while for instance: <p> {@code ZRANGEBYSCORE zset (5 (10}<p> Will return all the values with score > 5 and < 10 (5 and 10 excluded). <p> <b>Time complexity:</b> <p> O(log(N))+O(M) with N being the number of elements in the sorted set and M the number of elements returned by the command, so if M is constant (for instance you always ask for the first ten elements with LIMIT) you can consider it O(log(N))\n * @see #zrangeByScore(String,double,double)\n * @see #zrangeByScore(String,double,double,int,int)\n * @see #zrangeByScoreWithScores(String,double,double)\n * @see #zrangeByScoreWithScores(String,double,double,int,int)\n * @see #zcount(String,double,double)\n * @param key\n * @param min\n * @param max\n * @return Multi bulk reply specifically a list of elements in the specified score range.\n */\npublic Set<String> zrangeByScore(final String key,final double min,final double max,final int offset,final int count){\n  checkIsInMulti();\n  client.zrangeByScore(key,min,max,offset,count);\n  final List<String> client.getMultiBulkReply()=client.getMultiBulkReply();\n  if (client.getMultiBulkReply() == null) {\n    return null;\n  }\n  return new LinkedHashSet<String>(client.getMultiBulkReply());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 8
    } ],
    "tokenLength" : 2,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 1926,
    "startColumnNumber" : 8,
    "endLineNumber" : 1926,
    "endColumnNumber" : 34
  }, {
    "charLength" : 26,
    "startLineNumber" : 1929,
    "startColumnNumber" : 37,
    "endLineNumber" : 1929,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "members",
  "nodePosition" : {
    "charLength" : 7,
    "startLineNumber" : 1925,
    "startColumnNumber" : 23,
    "endLineNumber" : 1925,
    "endColumnNumber" : 30
  }
}