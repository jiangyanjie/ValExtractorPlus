{
  "id" : 16,
  "expression" : "ctx.getParent()",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "c2d7d4d2cb49c8b09607a51febf37ad0528a836e",
  "filePath" : "services/src/main/java/jd/gui/service/type/JavaFileTypeFactoryProvider.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "ctx.getParent()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 215,
      "startColumnNumber" : 16,
      "endLineNumber" : 215,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 215,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ctx.getParent() instanceof JavaParser.TypeDeclarationContext",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext) access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 201,
        "startColumnNumber" : 79,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2144,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx,int access){\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "jd.gui.service.type.ParserRuleContext"
  }, {
    "nodeContext" : "ctx.getParent()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 216,
      "startColumnNumber" : 62,
      "endLineNumber" : 216,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 216,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 78
      },
      "nodeContext" : "getTypeDeclarationContextAccessFlag(ctx.getParent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 216,
        "startColumnNumber" : 16,
        "endLineNumber" : 216,
        "endColumnNumber" : 76
      },
      "nodeContext" : "access+=getTypeDeclarationContextAccessFlag(ctx.getParent())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 216,
        "startColumnNumber" : 16,
        "endLineNumber" : 216,
        "endColumnNumber" : 78
      },
      "nodeContext" : "access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext) access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 201,
        "startColumnNumber" : 79,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2144,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx,int access){\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "jd.gui.service.type.ParserRuleContext"
  }, {
    "nodeContext" : "ctx.getParent()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 217,
      "startColumnNumber" : 21,
      "endLineNumber" : 217,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 217,
        "startColumnNumber" : 21,
        "endLineNumber" : 217,
        "endColumnNumber" : 83
      },
      "nodeContext" : "ctx.getParent() instanceof JavaParser.MemberDeclarationContext",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 217,
        "startColumnNumber" : 17,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext) access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 201,
        "startColumnNumber" : 79,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2144,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx,int access){\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "jd.gui.service.type.ParserRuleContext"
  }, {
    "nodeContext" : "ctx.getParent()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 218,
      "startColumnNumber" : 64,
      "endLineNumber" : 218,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 218,
        "startColumnNumber" : 64,
        "endLineNumber" : 218,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ctx.getParent().getParent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 218,
        "startColumnNumber" : 26,
        "endLineNumber" : 218,
        "endColumnNumber" : 92
      },
      "nodeContext" : "getMemberDeclarationContextAccessFlag(ctx.getParent().getParent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 90
      },
      "nodeContext" : "access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 92
      },
      "nodeContext" : "access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 217,
        "startColumnNumber" : 17,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 84
      },
      "nodeContext" : "if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext) access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext) access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 201,
        "startColumnNumber" : 79,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2144,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void enterTypeDeclaration(ParserRuleContext ctx,int access){\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext ctx.getParent()=ctx.getParent();\n  if (ctx.getParent() instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(ctx.getParent());\n else   if (ctx.getParent() instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(ctx.getParent().getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "jd.gui.service.type.ParserRuleContext"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 215,
    "startColumnNumber" : 16,
    "endLineNumber" : 215,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 216,
    "startColumnNumber" : 62,
    "endLineNumber" : 216,
    "endColumnNumber" : 77
  }, {
    "charLength" : 15,
    "startLineNumber" : 217,
    "startColumnNumber" : 21,
    "endLineNumber" : 217,
    "endColumnNumber" : 36
  }, {
    "charLength" : 15,
    "startLineNumber" : 218,
    "startColumnNumber" : 64,
    "endLineNumber" : 218,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "parent",
  "nodePosition" : {
    "charLength" : 6,
    "startLineNumber" : 213,
    "startColumnNumber" : 30,
    "endLineNumber" : 213,
    "endColumnNumber" : 36
  }
}