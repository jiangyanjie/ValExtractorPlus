{
  "id" : 1,
  "expression" : "entry.getValue()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "tool/src/org/antlr/v4/tool/Grammar.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 797,
      "startColumnNumber" : 7,
      "endLineNumber" : 797,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 28
      },
      "nodeContext" : "entry.getValue() >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 70
      },
      "nodeContext" : "entry.getValue() >= 0 && entry.getValue() < literalNames.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 112
      },
      "nodeContext" : "entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 797,
        "startColumnNumber" : 3,
        "endLineNumber" : 799,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n  literalNames[entry.getValue()]=entry.getKey();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 795,
        "startColumnNumber" : 77,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 795,
        "startColumnNumber" : 2,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 788,
        "startColumnNumber" : 40,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 784,
        "startColumnNumber" : 1,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 797,
      "startColumnNumber" : 21,
      "endLineNumber" : 797,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 797,
        "startColumnNumber" : 21,
        "endLineNumber" : 797,
        "endColumnNumber" : 59
      },
      "nodeContext" : "entry.getValue() < literalNames.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 70
      },
      "nodeContext" : "entry.getValue() >= 0 && entry.getValue() < literalNames.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 112
      },
      "nodeContext" : "entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 797,
        "startColumnNumber" : 3,
        "endLineNumber" : 799,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n  literalNames[entry.getValue()]=entry.getKey();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 795,
        "startColumnNumber" : 77,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 795,
        "startColumnNumber" : 2,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 788,
        "startColumnNumber" : 40,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 784,
        "startColumnNumber" : 1,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 797,
      "startColumnNumber" : 65,
      "endLineNumber" : 797,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 797,
        "startColumnNumber" : 52,
        "endLineNumber" : 797,
        "endColumnNumber" : 82
      },
      "nodeContext" : "literalNames[entry.getValue()]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 797,
        "startColumnNumber" : 52,
        "endLineNumber" : 797,
        "endColumnNumber" : 90
      },
      "nodeContext" : "literalNames[entry.getValue()] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 797,
        "startColumnNumber" : 7,
        "endLineNumber" : 797,
        "endColumnNumber" : 112
      },
      "nodeContext" : "entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 797,
        "startColumnNumber" : 3,
        "endLineNumber" : 799,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n  literalNames[entry.getValue()]=entry.getKey();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 795,
        "startColumnNumber" : 77,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 795,
        "startColumnNumber" : 2,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 788,
        "startColumnNumber" : 40,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 784,
        "startColumnNumber" : 1,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 798,
      "startColumnNumber" : 17,
      "endLineNumber" : 798,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 798,
        "startColumnNumber" : 4,
        "endLineNumber" : 798,
        "endColumnNumber" : 34
      },
      "nodeContext" : "literalNames[entry.getValue()]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 798,
        "startColumnNumber" : 4,
        "endLineNumber" : 798,
        "endColumnNumber" : 49
      },
      "nodeContext" : "literalNames[entry.getValue()]=entry.getKey()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 798,
        "startColumnNumber" : 4,
        "endLineNumber" : 798,
        "endColumnNumber" : 51
      },
      "nodeContext" : "literalNames[entry.getValue()]=entry.getKey();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 797,
        "startColumnNumber" : 81,
        "endLineNumber" : 799,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  literalNames[entry.getValue()]=entry.getKey();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 797,
        "startColumnNumber" : 3,
        "endLineNumber" : 799,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n  literalNames[entry.getValue()]=entry.getKey();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 795,
        "startColumnNumber" : 77,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 795,
        "startColumnNumber" : 2,
        "endLineNumber" : 800,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n  int entry.getValue()=entry.getValue();\n  if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n    literalNames[entry.getValue()]=entry.getKey();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 788,
        "startColumnNumber" : 40,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 784,
        "startColumnNumber" : 1,
        "endLineNumber" : 803,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int entry.getValue()=entry.getValue();\n    if (entry.getValue() >= 0 && entry.getValue() < literalNames.length && literalNames[entry.getValue()] == null) {\n      literalNames[entry.getValue()]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 11
    } ],
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 797,
    "startColumnNumber" : 7,
    "endLineNumber" : 797,
    "endColumnNumber" : 23
  }, {
    "charLength" : 16,
    "startLineNumber" : 797,
    "startColumnNumber" : 21,
    "endLineNumber" : 797,
    "endColumnNumber" : 37
  }, {
    "charLength" : 16,
    "startLineNumber" : 797,
    "startColumnNumber" : 65,
    "endLineNumber" : 797,
    "endColumnNumber" : 81
  }, {
    "charLength" : 16,
    "startLineNumber" : 798,
    "startColumnNumber" : 17,
    "endLineNumber" : 798,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "value",
  "nodePosition" : {
    "charLength" : 5,
    "startLineNumber" : 796,
    "startColumnNumber" : 7,
    "endLineNumber" : 796,
    "endColumnNumber" : 12
  }
}