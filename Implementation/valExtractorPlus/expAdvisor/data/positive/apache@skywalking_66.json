{
  "id" : 66,
  "expression" : "value.getBuckets()[i]",
  "projectName" : "apache@skywalking",
  "commitID" : "1473c04d3e0973d08e4e478dbbccaa3873377e7c",
  "filePath" : "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "value.getBuckets()[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 93,
      "startColumnNumber" : 32,
      "endLineNumber" : 93,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 93,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 71
      },
      "nodeContext" : "value.getBuckets()[i] == Long.MIN_VALUE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 93,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 138
      },
      "nodeContext" : "value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i])",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 151
      },
      "nodeContext" : "value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 153
      },
      "nodeContext" : "String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 91,
        "startColumnNumber" : 48,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long value.getBuckets()[i]=value.getBuckets()[i];\n  String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n  String key=String.format(template,value.getBuckets()[i]Name);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  long value.getBuckets()[i]=value.getBuckets()[i];\n  String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n  String key=String.format(template,value.getBuckets()[i]Name);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 76,
        "startColumnNumber" : 77,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long value.getBuckets()[i]=value.getBuckets()[i];\n    String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n    String key=String.format(template,value.getBuckets()[i]Name);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long value.getBuckets()[i]=value.getBuckets()[i];\n    String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n    String key=String.format(template,value.getBuckets()[i]Name);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 11
    } ],
    "tokenLength" : 3,
    "type" : "long"
  }, {
    "nodeContext" : "value.getBuckets()[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 93,
      "startColumnNumber" : 101,
      "endLineNumber" : 93,
      "endColumnNumber" : 122
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 93,
        "startColumnNumber" : 86,
        "endLineNumber" : 93,
        "endColumnNumber" : 123
      },
      "nodeContext" : "String.valueOf(value.getBuckets()[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 93,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 138
      },
      "nodeContext" : "value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i])",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 151
      },
      "nodeContext" : "value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 153
      },
      "nodeContext" : "String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 91,
        "startColumnNumber" : 48,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long value.getBuckets()[i]=value.getBuckets()[i];\n  String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n  String key=String.format(template,value.getBuckets()[i]Name);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  long value.getBuckets()[i]=value.getBuckets()[i];\n  String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n  String key=String.format(template,value.getBuckets()[i]Name);\n  summation.valueAccumulation(key,values[i]);\n  count.valueAccumulation(key,1L);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 76,
        "startColumnNumber" : 77,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long value.getBuckets()[i]=value.getBuckets()[i];\n    String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n    String key=String.format(template,value.getBuckets()[i]Name);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void accept(final MeterEntity entity,final BucketedValues value){\n  if (dataset.size() > 0) {\n    if (!value.isCompatible(dataset)) {\n      throw new IllegalArgumentException(\"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\"+ dataset+ \"]\");\n    }\n  }\n  this.entityId=entity.id();\n  String template=\"%s\";\n  if (!Strings.isNullOrEmpty(value.getGroup())) {\n    template=value.getGroup() + \":%s\";\n  }\n  final long[] values=value.getValues();\n  for (int i=0; i < values.length; i++) {\n    long value.getBuckets()[i]=value.getBuckets()[i];\n    String value.getBuckets()[i]Name=value.getBuckets()[i] == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(value.getBuckets()[i]);\n    String key=String.format(template,value.getBuckets()[i]Name);\n    summation.valueAccumulation(key,values[i]);\n    count.valueAccumulation(key,1L);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 11
    } ],
    "tokenLength" : 3,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 93,
    "startColumnNumber" : 32,
    "endLineNumber" : 93,
    "endColumnNumber" : 53
  }, {
    "charLength" : 21,
    "startLineNumber" : 93,
    "startColumnNumber" : 101,
    "endLineNumber" : 93,
    "endColumnNumber" : 122
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "bucket",
  "nodePosition" : {
    "charLength" : 6,
    "startLineNumber" : 92,
    "startColumnNumber" : 17,
    "endLineNumber" : 92,
    "endColumnNumber" : 23
  }
}