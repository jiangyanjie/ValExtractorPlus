{
    "id": 22,
    "expression": "controllerServiceEntity.getComponent()",
    "projectName": "nifi",
    "commitID": "2a92747046b39d7b3f7604258c1d3bb81a9447bd",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
    "occurrences": 10,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2100,
                "startColumnNumber": 47,
                "endLineNumber": 2100,
                "endColumnNumber": 85
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 2100,
                        "startColumnNumber": 47,
                        "endLineNumber": 2100,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "controllerServiceEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 2100,
                        "startColumnNumber": 12,
                        "endLineNumber": 2100,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "controllerServiceEntity == null || controllerServiceEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 195,
                        "startLineNumber": 2100,
                        "startColumnNumber": 8,
                        "endLineNumber": 2102,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n  throw new IllegalArgumentException(\"Controller service details must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 2100,
                    "startColumnNumber": 12,
                    "endLineNumber": 2100,
                    "endColumnNumber": 93
                },
                "nodeContext": "controllerServiceEntity == null || controllerServiceEntity.getComponent() == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2108,
                "startColumnNumber": 12,
                "endLineNumber": 2108,
                "endColumnNumber": 50
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 2108,
                        "startColumnNumber": 12,
                        "endLineNumber": 2108,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 2108,
                        "startColumnNumber": 12,
                        "endLineNumber": 2108,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 2108,
                        "startColumnNumber": 8,
                        "endLineNumber": 2110,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity.getComponent().getId() != null) {\n  throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 2108,
                    "startColumnNumber": 12,
                    "endLineNumber": 2108,
                    "endColumnNumber": 66
                },
                "nodeContext": "controllerServiceEntity.getComponent().getId() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2112,
                "startColumnNumber": 32,
                "endLineNumber": 2112,
                "endColumnNumber": 70
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 2112,
                        "startColumnNumber": 32,
                        "endLineNumber": 2112,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 2112,
                        "startColumnNumber": 12,
                        "endLineNumber": 2112,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "StringUtils.isBlank(controllerServiceEntity.getComponent().getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 197,
                        "startLineNumber": 2112,
                        "startColumnNumber": 8,
                        "endLineNumber": 2114,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n  throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 2112,
                    "startColumnNumber": 12,
                    "endLineNumber": 2112,
                    "endColumnNumber": 81
                },
                "nodeContext": "StringUtils.isBlank(controllerServiceEntity.getComponent().getType())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2116,
                "startColumnNumber": 12,
                "endLineNumber": 2116,
                "endColumnNumber": 50
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 2116,
                        "startColumnNumber": 12,
                        "endLineNumber": 2116,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 2116,
                        "startColumnNumber": 12,
                        "endLineNumber": 2116,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 2116,
                        "startColumnNumber": 12,
                        "endLineNumber": 2116,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 403,
                        "startLineNumber": 2116,
                        "startColumnNumber": 8,
                        "endLineNumber": 2119,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n  throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 143,
                    "startLineNumber": 2116,
                    "startColumnNumber": 12,
                    "endLineNumber": 2116,
                    "endColumnNumber": 155
                },
                "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                "nodeType": "InfixExpression",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2116,
                "startColumnNumber": 97,
                "endLineNumber": 2116,
                "endColumnNumber": 135
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 2116,
                        "startColumnNumber": 97,
                        "endLineNumber": 2116,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 2116,
                        "startColumnNumber": 82,
                        "endLineNumber": 2116,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 2116,
                        "startColumnNumber": 81,
                        "endLineNumber": 2116,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "!groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 2116,
                        "startColumnNumber": 12,
                        "endLineNumber": 2116,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 403,
                        "startLineNumber": 2116,
                        "startColumnNumber": 8,
                        "endLineNumber": 2119,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n  throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 143,
                    "startLineNumber": 2116,
                    "startColumnNumber": 12,
                    "endLineNumber": 2116,
                    "endColumnNumber": 155
                },
                "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())",
                "nodeType": "InfixExpression",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2118,
                "startColumnNumber": 20,
                "endLineNumber": 2118,
                "endColumnNumber": 58
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 2118,
                        "startColumnNumber": 20,
                        "endLineNumber": 2118,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 193,
                        "startLineNumber": 2117,
                        "startColumnNumber": 47,
                        "endLineNumber": 2118,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 223,
                        "startLineNumber": 2117,
                        "startColumnNumber": 18,
                        "endLineNumber": 2118,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId))",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 230,
                        "startLineNumber": 2117,
                        "startColumnNumber": 12,
                        "endLineNumber": 2118,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 2116,
                        "startColumnNumber": 157,
                        "endLineNumber": 2119,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 403,
                        "startLineNumber": 2116,
                        "startColumnNumber": 8,
                        "endLineNumber": 2119,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n  throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 2118,
                    "startColumnNumber": 20,
                    "endLineNumber": 2118,
                    "endColumnNumber": 77
                },
                "nodeContext": "controllerServiceEntity.getComponent().getParentGroupId()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2120,
                "startColumnNumber": 8,
                "endLineNumber": 2120,
                "endColumnNumber": 46
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 2120,
                        "startColumnNumber": 8,
                        "endLineNumber": 2120,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setParentGroupId(groupId)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 2120,
                        "startColumnNumber": 8,
                        "endLineNumber": 2120,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setParentGroupId(groupId);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 2120,
                    "startColumnNumber": 8,
                    "endLineNumber": 2120,
                    "endColumnNumber": 73
                },
                "nodeContext": "controllerServiceEntity.getComponent().setParentGroupId(groupId);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2140,
                "startColumnNumber": 8,
                "endLineNumber": 2140,
                "endColumnNumber": 46
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 2140,
                        "startColumnNumber": 8,
                        "endLineNumber": 2140,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 2140,
                        "startColumnNumber": 8,
                        "endLineNumber": 2140,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 2140,
                    "startColumnNumber": 8,
                    "endLineNumber": 2140,
                    "endColumnNumber": 69
                },
                "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2143,
                "startColumnNumber": 71,
                "endLineNumber": 2143,
                "endColumnNumber": 109
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 2143,
                        "startColumnNumber": 71,
                        "endLineNumber": 2143,
                        "endColumnNumber": 117
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 2143,
                        "startColumnNumber": 34,
                        "endLineNumber": 2143,
                        "endColumnNumber": 118
                    },
                    "nodeContext": "getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 2143,
                        "startColumnNumber": 23,
                        "endLineNumber": 2143,
                        "endColumnNumber": 118
                    },
                    "nodeContext": "revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 2143,
                        "startColumnNumber": 8,
                        "endLineNumber": 2143,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 111,
                    "startLineNumber": 2143,
                    "startColumnNumber": 8,
                    "endLineNumber": 2143,
                    "endColumnNumber": 119
                },
                "nodeContext": "final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 2144,
                "startColumnNumber": 104,
                "endLineNumber": 2144,
                "endColumnNumber": 142
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 2144,
                        "startColumnNumber": 47,
                        "endLineNumber": 2144,
                        "endColumnNumber": 143
                    },
                    "nodeContext": "serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 2144,
                        "startColumnNumber": 38,
                        "endLineNumber": 2144,
                        "endColumnNumber": 143
                    },
                    "nodeContext": "entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 136,
                        "startLineNumber": 2144,
                        "startColumnNumber": 8,
                        "endLineNumber": 2144,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2823,
                        "startLineNumber": 2098,
                        "startColumnNumber": 69,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4557,
                        "startLineNumber": 2062,
                        "startColumnNumber": 4,
                        "endLineNumber": 2149,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"{id}/controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /process-groups/{uuid}\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The process group id.\",required=true) @PathParam(\"id\") final String groupId,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (controllerServiceEntity.getComponent().getParentGroupId() != null && !groupId.equals(controllerServiceEntity.getComponent().getParentGroupId())) {\n    throw new IllegalArgumentException(String.format(\"If specified, the parent process group id %s must be the same as specified in the URI %s\",controllerServiceEntity.getComponent().getParentGroupId(),groupId));\n  }\n  controllerServiceEntity.getComponent().setParentGroupId(groupId);\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      final Authorizable processGroup=lookup.getProcessGroup(groupId).getAuthorizable();\n      processGroup.authorize(authorizer,RequestAction.WRITE,NiFiUserUtils.getNiFiUser());\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 351,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 136,
                    "startLineNumber": 2144,
                    "startColumnNumber": 8,
                    "endLineNumber": 2144,
                    "endColumnNumber": 144
                },
                "nodeContext": "final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,groupId,controllerServiceEntity.getComponent());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        }
    ],
    "positionList": [
        {
            "charLength": 38,
            "startLineNumber": 2100,
            "startColumnNumber": 47,
            "endLineNumber": 2100,
            "endColumnNumber": 85
        },
        {
            "charLength": 38,
            "startLineNumber": 2108,
            "startColumnNumber": 12,
            "endLineNumber": 2108,
            "endColumnNumber": 50
        },
        {
            "charLength": 38,
            "startLineNumber": 2112,
            "startColumnNumber": 32,
            "endLineNumber": 2112,
            "endColumnNumber": 70
        },
        {
            "charLength": 38,
            "startLineNumber": 2116,
            "startColumnNumber": 12,
            "endLineNumber": 2116,
            "endColumnNumber": 50
        },
        {
            "charLength": 38,
            "startLineNumber": 2116,
            "startColumnNumber": 97,
            "endLineNumber": 2116,
            "endColumnNumber": 135
        },
        {
            "charLength": 38,
            "startLineNumber": 2118,
            "startColumnNumber": 20,
            "endLineNumber": 2118,
            "endColumnNumber": 58
        },
        {
            "charLength": 38,
            "startLineNumber": 2120,
            "startColumnNumber": 8,
            "endLineNumber": 2120,
            "endColumnNumber": 46
        },
        {
            "charLength": 38,
            "startLineNumber": 2140,
            "startColumnNumber": 8,
            "endLineNumber": 2140,
            "endColumnNumber": 46
        },
        {
            "charLength": 38,
            "startLineNumber": 2143,
            "startColumnNumber": 71,
            "endLineNumber": 2143,
            "endColumnNumber": 109
        },
        {
            "charLength": 38,
            "startLineNumber": 2144,
            "startColumnNumber": 104,
            "endLineNumber": 2144,
            "endColumnNumber": 142
        }
    ],
    "layoutRelationDataList": []
}