{
    "id": 20,
    "expression": "controllerServiceEntity.getComponent()",
    "projectName": "nifi",
    "commitID": "2a92747046b39d7b3f7604258c1d3bb81a9447bd",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
    "occurrences": 6,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 332,
                "startColumnNumber": 47,
                "endLineNumber": 332,
                "endColumnNumber": 85
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 332,
                        "startColumnNumber": 47,
                        "endLineNumber": 332,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "controllerServiceEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 332,
                        "startColumnNumber": 12,
                        "endLineNumber": 332,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "controllerServiceEntity == null || controllerServiceEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 195,
                        "startLineNumber": 332,
                        "startColumnNumber": 8,
                        "endLineNumber": 334,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n  throw new IllegalArgumentException(\"Controller service details must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 332,
                    "startColumnNumber": 12,
                    "endLineNumber": 332,
                    "endColumnNumber": 93
                },
                "nodeContext": "controllerServiceEntity == null || controllerServiceEntity.getComponent() == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 340,
                "startColumnNumber": 12,
                "endLineNumber": 340,
                "endColumnNumber": 50
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 340,
                        "startColumnNumber": 12,
                        "endLineNumber": 340,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 340,
                        "startColumnNumber": 12,
                        "endLineNumber": 340,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 165,
                        "startLineNumber": 340,
                        "startColumnNumber": 8,
                        "endLineNumber": 342,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (controllerServiceEntity.getComponent().getId() != null) {\n  throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 340,
                    "startColumnNumber": 12,
                    "endLineNumber": 340,
                    "endColumnNumber": 66
                },
                "nodeContext": "controllerServiceEntity.getComponent().getId() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 344,
                "startColumnNumber": 32,
                "endLineNumber": 344,
                "endColumnNumber": 70
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 344,
                        "startColumnNumber": 32,
                        "endLineNumber": 344,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 344,
                        "startColumnNumber": 12,
                        "endLineNumber": 344,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "StringUtils.isBlank(controllerServiceEntity.getComponent().getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 197,
                        "startLineNumber": 344,
                        "startColumnNumber": 8,
                        "endLineNumber": 346,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n  throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 69,
                    "startLineNumber": 344,
                    "startColumnNumber": 12,
                    "endLineNumber": 344,
                    "endColumnNumber": 81
                },
                "nodeContext": "StringUtils.isBlank(controllerServiceEntity.getComponent().getType())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 365,
                "startColumnNumber": 8,
                "endLineNumber": 365,
                "endColumnNumber": 46
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 365,
                        "startColumnNumber": 8,
                        "endLineNumber": 365,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 365,
                        "startColumnNumber": 8,
                        "endLineNumber": 365,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 365,
                    "startColumnNumber": 8,
                    "endLineNumber": 365,
                    "endColumnNumber": 69
                },
                "nodeContext": "controllerServiceEntity.getComponent().setId(generateUuid());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 368,
                "startColumnNumber": 71,
                "endLineNumber": 368,
                "endColumnNumber": 109
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 368,
                        "startColumnNumber": 71,
                        "endLineNumber": 368,
                        "endColumnNumber": 117
                    },
                    "nodeContext": "controllerServiceEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 368,
                        "startColumnNumber": 34,
                        "endLineNumber": 368,
                        "endColumnNumber": 118
                    },
                    "nodeContext": "getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 368,
                        "startColumnNumber": 23,
                        "endLineNumber": 368,
                        "endColumnNumber": 118
                    },
                    "nodeContext": "revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 368,
                        "startColumnNumber": 8,
                        "endLineNumber": 368,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 111,
                    "startLineNumber": 368,
                    "startColumnNumber": 8,
                    "endLineNumber": 368,
                    "endColumnNumber": 119
                },
                "nodeContext": "final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        },
        {
            "nodeContext": "controllerServiceEntity.getComponent()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 38,
                "startLineNumber": 369,
                "startColumnNumber": 101,
                "endLineNumber": 369,
                "endColumnNumber": 139
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 369,
                        "startColumnNumber": 47,
                        "endLineNumber": 369,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 369,
                        "startColumnNumber": 38,
                        "endLineNumber": 369,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 369,
                        "startColumnNumber": 8,
                        "endLineNumber": 369,
                        "endColumnNumber": 141
                    },
                    "nodeContext": "final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2188,
                        "startLineNumber": 330,
                        "startColumnNumber": 69,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 179,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3729,
                        "startLineNumber": 299,
                        "startColumnNumber": 4,
                        "endLineNumber": 374,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Controller Service.\n * @param httpServletRequest      request\n * @param controllerServiceEntity A controllerServiceEntity.\n * @return A controllerServiceEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"controller-services\") @ApiOperation(value=\"Creates a new controller service\",response=ControllerServiceEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createControllerService(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The controller service configuration details.\",required=true) final ControllerServiceEntity controllerServiceEntity){\n  if (controllerServiceEntity == null || controllerServiceEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Controller service details must be specified.\");\n  }\n  if (controllerServiceEntity.getRevision() == null || (controllerServiceEntity.getRevision().getVersion() == null || controllerServiceEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Controller service.\");\n  }\n  if (controllerServiceEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Controller service ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(controllerServiceEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of controller service to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,controllerServiceEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  controllerServiceEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(controllerServiceEntity,controllerServiceEntity.getComponent().getId());\n  final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n  controllerServiceResource.populateRemainingControllerServiceEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 278,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 133,
                    "startLineNumber": 369,
                    "startColumnNumber": 8,
                    "endLineNumber": 369,
                    "endColumnNumber": 141
                },
                "nodeContext": "final ControllerServiceEntity entity=serviceFacade.createControllerService(revision,null,controllerServiceEntity.getComponent());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.web.api.dto.ControllerServiceDTO"
        }
    ],
    "positionList": [
        {
            "charLength": 38,
            "startLineNumber": 332,
            "startColumnNumber": 47,
            "endLineNumber": 332,
            "endColumnNumber": 85
        },
        {
            "charLength": 38,
            "startLineNumber": 340,
            "startColumnNumber": 12,
            "endLineNumber": 340,
            "endColumnNumber": 50
        },
        {
            "charLength": 38,
            "startLineNumber": 344,
            "startColumnNumber": 32,
            "endLineNumber": 344,
            "endColumnNumber": 70
        },
        {
            "charLength": 38,
            "startLineNumber": 365,
            "startColumnNumber": 8,
            "endLineNumber": 365,
            "endColumnNumber": 46
        },
        {
            "charLength": 38,
            "startLineNumber": 368,
            "startColumnNumber": 71,
            "endLineNumber": 368,
            "endColumnNumber": 109
        },
        {
            "charLength": 38,
            "startLineNumber": 369,
            "startColumnNumber": 101,
            "endLineNumber": 369,
            "endColumnNumber": 139
        }
    ],
    "layoutRelationDataList": []
}