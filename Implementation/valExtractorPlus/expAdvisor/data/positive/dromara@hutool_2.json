{
  "id" : 2,
  "expression" : "split(str,prefix)",
  "projectName" : "dromara@hutool",
  "commitID" : "4fa9794d06fa92188895883a1dae020b01fb0e2e",
  "filePath" : "hutool-core/src/main/java/cn/hutool/core/util/StrUtil.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "split(str,prefix)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 2411,
      "startColumnNumber" : 28,
      "endLineNumber" : 2411,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 2411,
        "startColumnNumber" : 28,
        "endLineNumber" : 2411,
        "endColumnNumber" : 52
      },
      "nodeContext" : "split(str,prefix).length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 2411,
        "startColumnNumber" : 28,
        "endLineNumber" : 2411,
        "endColumnNumber" : 56
      },
      "nodeContext" : "split(str,prefix).length - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 2411,
        "startColumnNumber" : 19,
        "endLineNumber" : 2411,
        "endColumnNumber" : 54
      },
      "nodeContext" : "length=split(str,prefix).length - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 2411,
        "startColumnNumber" : 8,
        "endLineNumber" : 2411,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int i=1, length=split(str,prefix).length - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 2411,
        "startColumnNumber" : 3,
        "endLineNumber" : 2413,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n  result.add(split(str,prefix)[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 2409,
        "startColumnNumber" : 27,
        "endLineNumber" : 2414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n    result.add(split(str,prefix)[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 2409,
        "startColumnNumber" : 2,
        "endLineNumber" : 2422,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (prefix.equals(suffix)) {\n  for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n    result.add(split(str,prefix)[i]);\n  }\n}\n else {\n  int suffixIndex;\n  for (  String fragment : split(str,prefix)) {\n    suffixIndex=fragment.indexOf(suffix.toString());\n    if (suffixIndex > 0) {\n      result.add(fragment.substring(0,suffixIndex));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 2400,
        "startColumnNumber" : 98,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1561,
        "startLineNumber" : 2374,
        "startColumnNumber" : 1,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 截取指定字符串多段中间部分，不包括标识字符串<br> <p> 栗子： <pre> StrUtil.subBetweenAll(\"wx[b]y[z]\", \"[\", \"]\") \t\t= [\"b\",\"z\"] StrUtil.subBetweenAll(null, *, *)          \t\t\t= [] StrUtil.subBetweenAll(*, null, *)          \t\t\t= [] StrUtil.subBetweenAll(*, *, null)          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"\")          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"]\")         \t\t\t= [] StrUtil.subBetweenAll(\"\", \"[\", \"]\")        \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"\", \"\")     \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"y\", \"z\")   \t\t\t= [\"abc\"] StrUtil.subBetweenAll(\"yabczyabcz\", \"y\", \"z\")   \t\t= [\"abc\",\"abc\"] StrUtil.subBetweenAll(\"[yabc[zy]abcz]\", \"[\", \"]\");   = [\"zy\"]           重叠时只截取内部， </pre>\n * @param str    被切割的字符串\n * @param prefix 截取开始的字符串标识\n * @param suffix 截取到的字符串标识\n * @return 截取后的字符串\n * @author dahuoyzs\n * @since 5.2.5\n */\npublic static String[] subBetweenAll(CharSequence str,CharSequence prefix,CharSequence suffix){\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 12
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "split(str,prefix)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 2412,
      "startColumnNumber" : 15,
      "endLineNumber" : 2412,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 2412,
        "startColumnNumber" : 15,
        "endLineNumber" : 2412,
        "endColumnNumber" : 35
      },
      "nodeContext" : "split(str,prefix)[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 2412,
        "startColumnNumber" : 4,
        "endLineNumber" : 2412,
        "endColumnNumber" : 36
      },
      "nodeContext" : "result.add(split(str,prefix)[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 2412,
        "startColumnNumber" : 4,
        "endLineNumber" : 2412,
        "endColumnNumber" : 38
      },
      "nodeContext" : "result.add(split(str,prefix)[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 2411,
        "startColumnNumber" : 66,
        "endLineNumber" : 2413,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  result.add(split(str,prefix)[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 2411,
        "startColumnNumber" : 3,
        "endLineNumber" : 2413,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n  result.add(split(str,prefix)[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 2409,
        "startColumnNumber" : 27,
        "endLineNumber" : 2414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n    result.add(split(str,prefix)[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 2409,
        "startColumnNumber" : 2,
        "endLineNumber" : 2422,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (prefix.equals(suffix)) {\n  for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n    result.add(split(str,prefix)[i]);\n  }\n}\n else {\n  int suffixIndex;\n  for (  String fragment : split(str,prefix)) {\n    suffixIndex=fragment.indexOf(suffix.toString());\n    if (suffixIndex > 0) {\n      result.add(fragment.substring(0,suffixIndex));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 2400,
        "startColumnNumber" : 98,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1561,
        "startLineNumber" : 2374,
        "startColumnNumber" : 1,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 截取指定字符串多段中间部分，不包括标识字符串<br> <p> 栗子： <pre> StrUtil.subBetweenAll(\"wx[b]y[z]\", \"[\", \"]\") \t\t= [\"b\",\"z\"] StrUtil.subBetweenAll(null, *, *)          \t\t\t= [] StrUtil.subBetweenAll(*, null, *)          \t\t\t= [] StrUtil.subBetweenAll(*, *, null)          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"\")          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"]\")         \t\t\t= [] StrUtil.subBetweenAll(\"\", \"[\", \"]\")        \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"\", \"\")     \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"y\", \"z\")   \t\t\t= [\"abc\"] StrUtil.subBetweenAll(\"yabczyabcz\", \"y\", \"z\")   \t\t= [\"abc\",\"abc\"] StrUtil.subBetweenAll(\"[yabc[zy]abcz]\", \"[\", \"]\");   = [\"zy\"]           重叠时只截取内部， </pre>\n * @param str    被切割的字符串\n * @param prefix 截取开始的字符串标识\n * @param suffix 截取到的字符串标识\n * @return 截取后的字符串\n * @author dahuoyzs\n * @since 5.2.5\n */\npublic static String[] subBetweenAll(CharSequence str,CharSequence prefix,CharSequence suffix){\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 12
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "split(str,prefix)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 2416,
      "startColumnNumber" : 26,
      "endLineNumber" : 2416,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 2416,
        "startColumnNumber" : 3,
        "endLineNumber" : 2421,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (String fragment : split(str,prefix)) {\n  suffixIndex=fragment.indexOf(suffix.toString());\n  if (suffixIndex > 0) {\n    result.add(fragment.substring(0,suffixIndex));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 2414,
        "startColumnNumber" : 8,
        "endLineNumber" : 2422,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int suffixIndex;\n  for (  String fragment : split(str,prefix)) {\n    suffixIndex=fragment.indexOf(suffix.toString());\n    if (suffixIndex > 0) {\n      result.add(fragment.substring(0,suffixIndex));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 2409,
        "startColumnNumber" : 2,
        "endLineNumber" : 2422,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (prefix.equals(suffix)) {\n  for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n    result.add(split(str,prefix)[i]);\n  }\n}\n else {\n  int suffixIndex;\n  for (  String fragment : split(str,prefix)) {\n    suffixIndex=fragment.indexOf(suffix.toString());\n    if (suffixIndex > 0) {\n      result.add(fragment.substring(0,suffixIndex));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 2400,
        "startColumnNumber" : 98,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1561,
        "startLineNumber" : 2374,
        "startColumnNumber" : 1,
        "endLineNumber" : 2425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 截取指定字符串多段中间部分，不包括标识字符串<br> <p> 栗子： <pre> StrUtil.subBetweenAll(\"wx[b]y[z]\", \"[\", \"]\") \t\t= [\"b\",\"z\"] StrUtil.subBetweenAll(null, *, *)          \t\t\t= [] StrUtil.subBetweenAll(*, null, *)          \t\t\t= [] StrUtil.subBetweenAll(*, *, null)          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"\")          \t\t\t= [] StrUtil.subBetweenAll(\"\", \"\", \"]\")         \t\t\t= [] StrUtil.subBetweenAll(\"\", \"[\", \"]\")        \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"\", \"\")     \t\t\t= [] StrUtil.subBetweenAll(\"yabcz\", \"y\", \"z\")   \t\t\t= [\"abc\"] StrUtil.subBetweenAll(\"yabczyabcz\", \"y\", \"z\")   \t\t= [\"abc\",\"abc\"] StrUtil.subBetweenAll(\"[yabc[zy]abcz]\", \"[\", \"]\");   = [\"zy\"]           重叠时只截取内部， </pre>\n * @param str    被切割的字符串\n * @param prefix 截取开始的字符串标识\n * @param suffix 截取到的字符串标识\n * @return 截取后的字符串\n * @author dahuoyzs\n * @since 5.2.5\n */\npublic static String[] subBetweenAll(CharSequence str,CharSequence prefix,CharSequence suffix){\n  if (hasEmpty(str,prefix,suffix) || false == contains(str,prefix)) {\n    return new String[0];\n  }\n  final List<String> result=new LinkedList<>();\n  final String[] split(str,prefix)=split(str,prefix)(str,prefix);\n  if (prefix.equals(suffix)) {\n    for (int i=1, length=split(str,prefix).length - 1; i < length; i+=2) {\n      result.add(split(str,prefix)[i]);\n    }\n  }\n else {\n    int suffixIndex;\n    for (    String fragment : split(str,prefix)) {\n      suffixIndex=fragment.indexOf(suffix.toString());\n      if (suffixIndex > 0) {\n        result.add(fragment.substring(0,suffixIndex));\n      }\n    }\n  }\n  return result.toArray(new String[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 12
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 2411,
    "startColumnNumber" : 28,
    "endLineNumber" : 2411,
    "endColumnNumber" : 45
  }, {
    "charLength" : 17,
    "startLineNumber" : 2412,
    "startColumnNumber" : 15,
    "endLineNumber" : 2412,
    "endColumnNumber" : 32
  }, {
    "charLength" : 17,
    "startLineNumber" : 2416,
    "startColumnNumber" : 26,
    "endLineNumber" : 2416,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ],
  "name" : "split",
  "nodePosition" : {
    "charLength" : 5,
    "startLineNumber" : 2408,
    "startColumnNumber" : 17,
    "endLineNumber" : 2408,
    "endColumnNumber" : 22
  }
}