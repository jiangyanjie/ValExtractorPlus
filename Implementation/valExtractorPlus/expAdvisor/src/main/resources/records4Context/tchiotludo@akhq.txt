0c559c7e169a90951c451fb924ba7aff621fec9e###/tchiotludo_akhq/src/main/java/org/akhq/repositories/RecordRepository.java###/RecordRepository.java###org.akhq.repositories.RecordRepository###newRecord:ConsumerRecord<byte[],byte[]> String ###returnnewRecord(record,this.schemaRegistryRepository.getSchemaRegistryType(clusterId),this.schemaRegistryRepository.getKafkaAvroDeserializer(clusterId),this.customDeserializerRepository.getProtobufToJsonDeserializer(clusterId),avroWireFormatConverter.convertValueToWireFormat(record,this.kafkaModule.getRegistryClient(clusterId),this.schemaRegistryRepository.getSchemaRegistryType(clusterId)));###client###this.kafkaModule.getRegistryClient(clusterId)###420:9:427:11
cdbccd1cc3131731e04ca5ce9c04480c99e9be8f###/tchiotludo_akhq/src/main/java/org/akhq/repositories/RecordRepository.java###/RecordRepository.java###org.akhq.repositories.RecordRepository###consumeNewest:Topic Options ###list.add(newRecord(record,options));###current###newRecord(record,options)###220:25:220:62
e657b5a6aaaa8f4906e77b4dca5b6c69b5732288###/tchiotludo_akhq/src/main/java/org/kafkahq/modules/KafkaWrapper.java###/KafkaWrapper.java###org.kafkahq.modules.KafkaWrapper###describeTopicsOffsets:List<String> ###Map<TopicPartition,Long>begins=kafkaModule.getConsumer(clusterId).beginningOffsets(collect);###consumer###kafkaModule.getConsumer(clusterId)###113:21:113:117
387b9e68105907f65101f2d400fc41dcb12962cd###/tchiotludo_akhq/src/main/java/org/akhq/controllers/TopicController.java###/TopicController.java###org.akhq.controllers.TopicController###produce:HttpRequest<?> String String String Optional<String> Optional<Integer> Optional<String> Map<String,String> Optional<Integer> Optional<Integer> ###returnnewRecord(this.recordRepository.produce(cluster,topicName,value,headers,key,partition,timestamp.map(r->Instant.parse(r).toEpochMilli()),keySchema,valueSchema),schemaRegistryRepository.getSchemaRegistryType(cluster),key.map(String::getBytes).orElse(null),value.getBytes(),headers,topicRepository.findByName(cluster,topicName));###targetTopic###topicRepository.findByName(cluster,topicName)###138:9:155:11
acb9dcf8ff854cd5b4a6b44d010fe29432dc62ff###/tchiotludo_akhq/src/main/java/org/akhq/models/Topic.java###/Topic.java###org.akhq.models.Topic###canDeleteRecords:String ConfigRepository ###returnconfigRepository.findByTopic(clusterId,this.getName()).stream().filter(config->config.getName().equals(TopicConfig.CLEANUP_POLICY_CONFIG)).anyMatch(config->config.getValue().contains(TopicConfig.CLEANUP_POLICY_COMPACT));###configs###configRepository.findByTopic(clusterId,this.getName())###133:9:137:97
d11fcfac195ff1dec80e56492abac0108e8b9115###/tchiotludo_akhq/src/test/java/org/akhq/repositories/AccessControlRepositoryTest.java###/AccessControlRepositoryTest.java###org.akhq.repositories.AccessControlRepositoryTest###findAll:###assertEquals(2,aclRepository.findAll(KafkaTestCluster.CLUSTER_ID,Optional.empty()).size());###all###aclRepository.findAll(KafkaTestCluster.CLUSTER_ID,Optional.empty())###22:9:23:94
433496171456f3f6d6e6b5738e2b70a3bd3b9214###/tchiotludo_akhq/src/main/java/org/kafkahq/repositories/RecordRepository.java###/RecordRepository.java###org.kafkahq.repositories.RecordRepository###search:Options ###list.add(newRecord(record,options));###current###newRecord(record,options)###375:21:375:58
3576c6cde3ad3dee4af962820243bae2af7a05e3###/tchiotludo_akhq/src/main/java/org/akhq/modules/OidcUserDetailsMapper.java###/OidcUserDetailsMapper.java###org.akhq.modules.OidcUserDetailsMapper###createAuthenticationResponse:String OpenIdTokenResponse OpenIdClaims State ###List<String>oidcGroups=getOidcGroups(oidc.getProvider(providerName),openIdClaims);###provider###oidc.getProvider(providerName)###51:9:51:95
4a7053bdb2c073446af2f1583964798f4abaa193###/tchiotludo_akhq/src/main/java/org/akhq/repositories/ConnectRepository.java###/ConnectRepository.java###org.akhq.repositories.ConnectRepository###getDefinitions:String String ###returnthis.kafkaModule.getConnectRestClient(clusterId).get(connectId).getConnectors().stream().map(s->getDefinition(clusterId,connectId,s)).collect(Collectors.toList());###unfiltered###this.kafkaModule.getConnectRestClient(clusterId).get(connectId).getConnectors()###53:9:59:43
cdbccd1cc3131731e04ca5ce9c04480c99e9be8f###/tchiotludo_akhq/src/main/java/org/akhq/repositories/RecordRepository.java###/RecordRepository.java###org.akhq.repositories.RecordRepository###consumeOldest:Topic Options ###list.add(newRecord(record,options));###current###newRecord(record,options)###86:17:86:54
a19883902698f49be4fb96a78bda9c2e933a3c0a###/tchiotludo_akhq/src/test/java/org/akhq/repositories/SchemaRegistryRepositoryTest.java###/SchemaRegistryRepositoryTest.java###org.akhq.repositories.SchemaRegistryRepositoryTest###register:###assertEquals(SCHEMA_1_V2,repository.getLatestVersion(KafkaTestCluster.CLUSTER_ID,SUBJECT_1).getAvroSchema());###subject1Schema###repository.getLatestVersion(KafkaTestCluster.CLUSTER_ID,SUBJECT_1)###147:9:147:120
0c559c7e169a90951c451fb924ba7aff621fec9e###/tchiotludo_akhq/src/main/java/org/akhq/repositories/RecordRepository.java###/RecordRepository.java###org.akhq.repositories.RecordRepository###newRecord:ConsumerRecord<byte[],byte[]> BaseOptions ###returnnewRecord(record,this.schemaRegistryRepository.getSchemaRegistryType(options.clusterId),this.schemaRegistryRepository.getKafkaAvroDeserializer(options.clusterId),this.customDeserializerRepository.getProtobufToJsonDeserializer(options.clusterId),avroWireFormatConverter.convertValueToWireFormat(record,this.kafkaModule.getRegistryClient(options.clusterId),this.schemaRegistryRepository.getSchemaRegistryType(options.clusterId)));###client###this.kafkaModule.getRegistryClient(options.clusterId)###431:9:438:11
