73becb9d2dd061031025c0e69798f0196253bd40###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###442:8:442:76
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onError:Throwable ###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###525:6:525:42
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###onSuccessOrErrorForEmpty:###StepVerifier.create(Mono.<String>empty().doOnSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})).expectComplete().verify();###mono###Mono.<String>empty().doOnSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})###574:3:581:25
a7bce5593e654d59a446e48b144ffe4fb2237038###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap###trySubscribeScalarMap:Publisher<? extends T> CoreSubscriber<? super R> Function<? super T,? extends Publisher<? extends R>> boolean ###Operators.error(s,Operators.onOperatorError(null,e,t,s.currentContext()));###ctx###s.currentContext()###145:5:145:83
d95e1962b1a57a6bac2c52c489a44b4c4a3ea38d###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java###/EmitterProcessorTest.java###reactor.core.publisher.EmitterProcessorTest###state:###assertThat(tp.inners()).isEmpty();###inners###tp.inners()###269:3:269:37
41a47ee0b31277dac5a6e7b80adf408244cd6192###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxPublishOn.java###/FluxPublishOn.java###reactor.core.publisher.FluxPublishOn.PublishOnSubscriber###runBackfused:###if(done)###d###done###477:5:486:6
7429b7ec9e59c4a5648fcd500310d59f3bcac279###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/ParallelScheduler.java###/ParallelScheduler.java###reactor.core.scheduler.ParallelScheduler###init:int ###a[i]=Schedulers.decorateExecutorService(this,this.get());###exec###this.get()###86:13:86:73
cb5f67d9f4d69d29f35343823783d3c6767c1393###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainSync:###t=queue.poll();###q###queue###486:6:486:23
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoPublishMulticast.java###/MonoPublishMulticast.java###reactor.core.publisher.MonoPublishMulticast.MonoPublishMulticaster###drain:###a=SUBSCRIBERS.getAndSet(this,TERMINATED);###castedArray###SUBSCRIBERS.getAndSet(this,TERMINATED)###247:8:247:52
3fbf3823685b84ffd6a88e88d9d9fff67d057fc9###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoDelayUntilTest.java###/MonoDelayUntilTest.java###reactor.core.publisher.MonoDelayUntilTest###scanCoordinator:###MonoDelayUntil.DelayUntilCoordinator<String>test=newMonoDelayUntil.DelayUntilCoordinator<>(actual,true,newFunction[3]);###otherGenerators###newFunction[3]###317:3:318:36
f614b1ab483d08a06d28224c460df2446b2eb09e###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java###/MonoStreamCollector.java###reactor.core.publisher.MonoStreamCollector.StreamCollectorSubscriber###onNext:T ###onError(Operators.onOperatorError(s,ex,t,actual.currentContext()));###ctx###actual.currentContext()###125:5:125:75
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onSubscribe:Subscription ###parent.onSubscribeCall().accept(s);###subscribeHook###parent.onSubscribeCall()###154:7:155:24
f48dcc5673879469e1b7578c2b8286fad79c1309###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxZip.java###/FluxZip.java###reactor.core.publisher.FluxZip.ZipCoordinator###subscribe:Publisher<? extends T>[] int ###sources[i].subscribe(a[i]);###s###a[i]###579:5:579:32
c4dbbb90eef97871d5ed8d3909dde04202ae51a5###/reactor_reactor-core/src/main/java/reactor/core/util/ReactiveStateUtils.java###/ReactiveStateUtils.java###reactor.core.util.ReactiveStateUtils.Node###toPrettyString:int ###indent(property("cancelled",isCancelled()),res,i,false);###cancelled###isCancelled()###904:5:904:65
41a47ee0b31277dac5a6e7b80adf408244cd6192###/reactor_reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java###/UnicastProcessor.java###reactor.core.publisher.UnicastProcessor###drainFused:Subscriber<? super T> ###if(done)###d###done###208:4:218:5
b46f7dccf1a4dc2ca3518777f21ee8df52d4b42d###/reactor_reactor-core/src/test/java/reactor/core/publisher/scenarios/ScatterGatherTests.java###/ScatterGatherTests.java###reactor.core.publisher.scenarios.ScatterGatherTests###testTrace2:###Mono.just(1).useTraceAssembly(true).map(d->{thrownewRuntimeException();}).map(d->d).map(d->d).map(d->d).block();###m###Mono.just(1).useTraceAssembly(true).map(d->{thrownewRuntimeException();}).map(d->d).map(d->d).map(d->d)###91:4:97:17
6dfd26baff048656d2b2ea2e865ca5e391ea7f71###/reactor_reactor-core/src/main/java/reactor/core/converter/DependencyUtils.java###/DependencyUtils.java###reactor.core.converter.DependencyUtils###convertToPublisher:Object ###thrownewUnsupportedOperationException("ConversiontoPublisherfrom"+source.getClass());###cls###source.getClass()###172:9:172:102
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###388:8:388:76
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoPublishMulticast.java###/MonoPublishMulticast.java###reactor.core.publisher.MonoPublishMulticast.MonoPublishMulticaster###drain:###a=SUBSCRIBERS.getAndSet(this,TERMINATED);###castedArray###SUBSCRIBERS.getAndSet(this,TERMINATED)###238:8:238:52
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onError:Throwable ###parent.onErrorCall().accept(t);###errorHook###parent.onErrorCall()###212:6:212:37
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###afterSuccessOrErrorCallbackFailureInterruptsOnNextAndThrows:###StepVerifier.create(Mono.just("foo").doAfterSuccessOrError((v,t)->{invoked.increment();thrownewIllegalArgumentException(v);})).expectNext("bar").expectErrorMessage("baz").verify();###mono###Mono.just("foo").doAfterSuccessOrError((v,t)->{invoked.increment();thrownewIllegalArgumentException(v);})###440:4:447:26
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###single:###returnMono.onAssembly(newMonoCallable<>((Callable<T>)this));###thiz###(Callable<T>)this###4479:7:4479:69
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onError:Throwable ###parent.onErrorCall().accept(t);###errorHook###parent.onErrorCall()###504:6:504:37
9fe70130beb23b0e277168474d5d7f8e181fbd4c###/reactor_reactor-core/src/main/java/reactor/core/publisher/BlockingSingleSubscriber.java###/BlockingSingleSubscriber.java###reactor.core.publisher.BlockingSingleSubscriber###blockingGet:###throwExceptions.propagate(e);###re###Exceptions.propagate(e)###90:13:90:43
5786b4e9aeb77b1fcb6693a216cdfae36a14f7b6###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###onNext:T ###onError(Operators.onOperatorError(s,Exceptions.failWithOverflow(Exceptions.BACKPRESSURE_ERROR_QUEUE_FULL),actual.currentContext()));###ctx###actual.currentContext()###233:6:234:34
7ee8e614739c9c81c0ad0f00dbd39858a897fdff###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###transformDeferred:Function<? super Flux<T>,? extends Publisher<V>> ###@SuppressWarnings({"rawtypes","unchecked"})CorePublisher<V>result=newContextTrackingFunctionWrapper<T,V>((Function)transformer).apply(this);###wrapper###newContextTrackingFunctionWrapper<T,V>((Function)transformer)###8786:5:8787:108
214da086359beb70c9ae38283255e5c58f2036b2###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoPeekTerminal.java###/MonoPeekTerminal.java###reactor.core.publisher.MonoPeekTerminal.MonoTerminalPeekSubscriber###onError:Throwable ###parent.onTerminateCall.accept(null,t);###onTerminate###parent.onTerminateCall###262:6:262:45
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainSync:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###560:8:560:80
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onError:Throwable ###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###219:6:219:42
49a70828413ec7da4c7b73f4e1ebacdd3100d591###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxLatest.java###/FluxLatest.java###reactor.core.publisher.FluxLatest.LatestSubscriber###drain:###while(r!=0L)###e###0L###161:5:182:6
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###request:long ###parent.onRequestCall().accept(n);###requestHook###parent.onRequestCall()###401:6:402:23
8684a735f101295d663b92212dbfa7213034d213###/reactor_reactor-core/src/main/java/reactor/core/scheduler/SingleScheduler.java###/SingleScheduler.java###reactor.core.scheduler.SingleScheduler.SingleWorker.SingleWorkerTask###run:###parent.remove(this);###o###parent###270:8:270:28
44e01266835ff7426e0868a68cdc1e68935a5021###/reactor_reactor-core/src/main/java/reactor/core/publisher/ReplayProcessor.java###/ReplayProcessor.java###reactor.core.publisher.ReplayProcessor.ReplaySubscription###cancel:###parent.remove(this);###p###parent###1393:5:1393:25
350d457e65580f031652a56fd170e24d7f859d6d###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxOnAssembly.java###/FluxOnAssembly.java###reactor.core.publisher.FluxOnAssembly.OnAssemblySubscriber###fail:Throwable ###if(snapshotStack.isLight())###lightCheckpoint###snapshotStack.isLight()###378:4:391:5
e5e8fc69b7f0fb5b1dd22b5277b9d6d70b7eb357###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/Schedulers.java###/Schedulers.java###reactor.core.scheduler.Schedulers###onSchedule:Runnable ###returnhook.apply(runnable,Context.empty());###context###Context.empty()###858:4:858:49
c4480e9ca75407c56601b7e4cf736badc39bd7a9###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###concatMapDelayError:Function<? super T,? extends Publisher<? extends V>> boolean int ###returnonAssembly(newFluxConcatMap<>(this,mapper,Queues.get(prefetch),prefetch,delayUntilEnd?FluxConcatMap.ErrorMode.END:FluxConcatMap.ErrorMode.BOUNDARY));###errorMode###delayUntilEnd?FluxConcatMap.ErrorMode.END:FluxConcatMap.ErrorMode.BOUNDARY###3793:3:3795:19
c4480e9ca75407c56601b7e4cf736badc39bd7a9###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxConcatMapTest.java###/FluxConcatMapTest.java###reactor.core.publisher.FluxConcatMapTest###concatDelayErrorWithMonoError:###StepVerifier.create(Flux.concatDelayError(Flux.just(Flux.just(1,2),Mono.error(newException("test")),Flux.just(3,4)))).expectNext(1,2,3,4).verifyErrorMessage("test");###sources###Flux.just(Flux.just(1,2),Mono.error(newException("test")),Flux.just(3,4))###830:3:837:43
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###afterSuccessOrErrorForEmpty:###StepVerifier.create(Mono.<String>empty().doAfterSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})).expectComplete().verify();###mono###Mono.<String>empty().doAfterSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})###594:3:601:25
8219e52b1fb139f5909cec54b4cf3c1aef0681da###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###subscribeOn:Scheduler ###returnonAssembly(newFluxSubscribeOnCallable<T>((Callable<T>)this,scheduler));###c###(Callable<T>)this###4548:4:4548:84
dbff854e82ef8fa9173c0c715aaf559598664ecf###/reactor_reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java###/UnicastProcessor.java###reactor.core.publisher.UnicastProcessor###drain:###if(actual!=null)###a###actual###231:3:242:4
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###singleOrEmpty:###returnconvertToMono((Callable<T>)this);###thiz###(Callable<T>)this###4524:10:4524:50
2922bb0f6ee083a1e4e37b4727738e4a62ae68eb###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/Scannable.java###/Scannable.java###reactor.core.Scannable###stepName:###name=name.substring(0,name.indexOf('$')).substring(name.lastIndexOf('.')+1);###stripPackageIndex###name.lastIndexOf('.')###449:4:451:43
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###380:8:380:76
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###onSuccessOrErrorCallbackFailureInterruptsOnNext:###StepVerifier.create(Mono.just("foo").doOnSuccessOrError((v,t)->{invoked.increment();thrownewIllegalArgumentException(v);})).expectErrorMessage("foo").verify();###mono###Mono.just("foo").doOnSuccessOrError((v,t)->{invoked.increment();thrownewIllegalArgumentException(v);})###425:3:431:25
5786b4e9aeb77b1fcb6693a216cdfae36a14f7b6###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap.FlatMapMain###onNext:T ###Throwablee_=Operators.onNextPollError(t,e,actual.currentContext());###ctx###actual.currentContext()###368:6:368:78
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxNameFuseableTest.java###/FluxNameFuseableTest.java###reactor.core.publisher.FluxNameFuseableTest###scanOperator:###assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1,tag2);###scannedTags###test.scan(Scannable.Attr.TAGS)###48:3:48:84
741f0eb72d806dcba589b6636f6bbd333643dcfa###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java###/FluxCancelOnTest.java###reactor.core.publisher.FluxCancelOnTest###scanSubscriber:###FluxCancelOn.CancelSubscriber<String>test=newFluxCancelOn.CancelSubscriber<>(actual,Schedulers.single());###scheduler###Schedulers.single()###67:3:67:113
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"));###scannedTags1###Scannable.from(tagged1).tags()###209:3:210:55
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onComplete:###parent.onCompleteCall().run();###completeHook###parent.onCompleteCall()###547:7:548:20
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###thenMany:Publisher<V> ###returnFlux.onAssembly((Flux<V>)newFluxConcatArray<>(false,ignoreElement(),other));###then###(Flux<V>)newFluxConcatArray<>(false,ignoreElement(),other)###2458:3:2459:13
9fe70130beb23b0e277168474d5d7f8e181fbd4c###/reactor_reactor-core/src/main/java/reactor/core/publisher/BlockingSingleSubscriber.java###/BlockingSingleSubscriber.java###reactor.core.publisher.BlockingSingleSubscriber###blockingGet:long TimeUnit ###throwExceptions.propagate(ex);###re###Exceptions.propagate(ex)###111:17:111:48
741f0eb72d806dcba589b6636f6bbd333643dcfa###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java###/FluxCancelOnTest.java###reactor.core.publisher.FluxCancelOnTest###scanOperator:###finalFlux<Integer>flux=Flux.just(1).cancelOn(Schedulers.boundedElastic());###scheduler###Schedulers.boundedElastic()###58:3:58:81
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###request:long ###parent.onRequestCall().accept(n);###requestHook###parent.onRequestCall()###721:6:722:23
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoNameTest.java###/MonoNameTest.java###reactor.core.publisher.MonoNameTest###scanOperator:###assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1,tag2);###scannedTags###test.scan(Scannable.Attr.TAGS)###48:3:48:84
8684a735f101295d663b92212dbfa7213034d213###/reactor_reactor-core/src/test/java/reactor/core/scheduler/SingleTimedSchedulerTest.java###/SingleTimedSchedulerTest.java###reactor.core.scheduler.SingleTimedSchedulerTest###unsupportedStart:###Schedulers.timer().start();###scheduler###Schedulers.timer()###39:3:40:22
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###784:6:785:23
756c71a0c42e39fd7b55f15d1377245139eb0ae5###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap###trySubscribeScalarMap:Publisher<? extends T> CoreSubscriber<? super R> Function<? super T,? extends Publisher<? extends R>> boolean ###Operators.error(s,Operators.onOperatorError(null,e,t,s.currentContext()));###ctx###s.currentContext()###155:6:155:84
741f0eb72d806dcba589b6636f6bbd333643dcfa###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoCallableOnAssemblyTest.java###/MonoCallableOnAssemblyTest.java###reactor.core.publisher.MonoCallableOnAssemblyTest###scanOperator:###MonoCallableOnAssembly<?>test=newMonoCallableOnAssembly<>(Mono.empty(),stacktrace);###source###Mono.empty()###46:3:46:91
9126ec7783290613f79a921e9a30a8822e07f213###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###from:Publisher<? extends T> ###return(Mono<T>)source;###casted###(Mono<T>)source###316:4:316:28
8c2f38458734c29c06486ebd918adc0ba6a3e7e9###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###collectSortedList:Comparator<? super T> ###Collections.sort((List<Comparable>)list);###l###(List<Comparable>)list###2196:5:2196:46
6ab518681f42b4e3b683d4d1200b048a5c450784###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoProcessor.java###/MonoProcessor.java###reactor.core.publisher.MonoProcessor###onNext:O ###if(s!=null&&!(sourceinstanceofMono))###parent###source###320:4:322:5
9126ec7783290613f79a921e9a30a8822e07f213###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###from:Publisher<? extends T> ###return(Flux<T>)source;###casted###(Flux<T>)source###671:4:671:28
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onSubscribe:Subscription ###parent.onSubscribeCall().accept(s);###subscribeHook###parent.onSubscribeCall()###164:7:164:42
41a47ee0b31277dac5a6e7b80adf408244cd6192###/reactor_reactor-core/src/main/java/reactor/core/publisher/ReplayProcessor.java###/ReplayProcessor.java###reactor.core.publisher.ReplayProcessor.UnboundedBuffer###drainFused:ReplaySubscription<T> ###if(done)###d###done###509:5:517:6
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###176:6:176:36
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCacheTime.java###/MonoCacheTime.java###reactor.core.publisher.MonoCacheTime###MonoCacheTime:Mono<? extends T> Duration Scheduler ###this.state=(Signal<T>)EMPTY;###state###(Signal<T>)EMPTY###58:3:58:34
aadabec0004261efce80eda9b8504df4c8da5185###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxSubscribeOnCallable.java###/FluxSubscribeOnCallable.java###reactor.core.publisher.FluxSubscribeOnCallable.CallableSubscribeOnSubscription###emitValue:###actual.onNext(value);###v###value###271:4:271:25
fdf89c19bfb283e8c9efca5b045450cfa2ea7a75###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxPublish.java###/FluxPublish.java###reactor.core.publisher.FluxPublish.State###disconnectAction:###inner.actual.onError(Exceptions.CancelException.INSTANCE);###ex###Exceptions.CancelException.INSTANCE###291:5:291:63
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekTest.java###/MonoPeekTest.java###reactor.core.publisher.MonoPeekTest###onMonoSuccessDoOnSuccessOrError:###mp.doOnSuccessOrError((s,f)->ref.set(s)).subscribe();###mono###mp.doOnSuccessOrError((s,f)->ref.set(s))###47:3:48:18
f8786d7112b14ee23b5aa348e153081dc1634d46###/reactor_reactor-core/src/test/java/reactor/core/publisher/MonoUntilOtherTest.java###/MonoUntilOtherTest.java###reactor.core.publisher.MonoUntilOtherTest###testAPIchainingCombines:###Mono<String>until2=until1.untilOther(Mono.delay(Duration.ofMillis(800)));###trigger2###Mono.delay(Duration.ofMillis(800))###174:3:175:41
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedFluxTest:###assertThat(Scannable.from(tagged2).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags2###Scannable.from(tagged2).tags()###212:3:213:79
c8557525dd4d1e1c73608348d50e66a3a257f21b###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###concatWith:Publisher<? extends T> ###returnonAssembly(newFluxConcatArray<>(false,this,other));###concat###newFluxConcatArray<>(false,this,other)###2534:3:2534:64
bb36afed42eb2d815de6a584e38b8d7df8869fcb###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoFromPublisher.java###/MonoFromPublisher.java###reactor.core.publisher.MonoFromPublisher###subscribe:CoreSubscriber<? super T> ###source.subscribe(subscribeOrReturn(actual));###subscriber###subscribeOrReturn(actual)###44:3:44:47
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxDoFirstTest.java###/FluxDoFirstTest.java###reactor.core.publisher.FluxDoFirstTest###orderIsReversed_NoFusion:###StepVerifier.create(Flux.just(1).map(i->i/0).hide().doFirst(()->order.add("one")).doFirst(()->order.add("two")).doFirst(()->order.add("three"))).expectNoFusionSupport().verifyError(ArithmeticException.class);###divZero###i->i/0###49:3:58:55
04894c4dcfafdec24e1a709b3111c0aa4880178d###/reactor_reactor-core/src/main/java/reactor/core/util/Exceptions.java###/Exceptions.java###reactor.core.util.Exceptions###unwrap:Throwable ###returnt;###_t###t###221:3:221:12
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/ParallelFluxNameTest.java###/ParallelFluxNameTest.java###reactor.core.publisher.ParallelFluxNameTest###scanOperator:###assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1,tag2);###scannedTags###test.scan(Scannable.Attr.TAGS)###60:3:60:84
da64d2f0afc135b3d0044829e2722d0d69f95290###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/DelegateServiceScheduler.java###/DelegateServiceScheduler.java###reactor.core.scheduler.DelegateServiceScheduler###scanUnsafe:Attr ###returnSchedulers.scanExecutor(executor,key);###e###executor###107:3:107:49
a03d3c58bb93f7aa5d3514ac529369d3a09ba876###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###subscriber###Operators.toCoreSubscriber(actual)###7922:3:7922:80
d95e1962b1a57a6bac2c52c489a44b4c4a3ea38d###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxFlatMapTest.java###/FluxFlatMapTest.java###reactor.core.publisher.FluxFlatMapTest###assertAfterOnSubscribeInnerState:InnerProducer ###assertThat(s.inners()).hasSize(1);###inners###s.inners()###957:3:957:37
46ea79b121d2809853c5865f06c435dc5181138d###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxCreate.java###/FluxCreate.java###reactor.core.publisher.FluxCreate.SerializedSink###error:Throwable ###Operators.onOperatorError(t,sink.currentContext());###ctx###sink.currentContext()###183:5:183:57
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoDoFirstTest.java###/MonoDoFirstTest.java###reactor.core.publisher.MonoDoFirstTest###orderIsReversed_Fused:###StepVerifier.create(Mono.just(1).map(i->i/0).doFirst(()->order.add("one")).doFirst(()->order.add("two")).doFirst(()->order.add("three"))).expectFusion().verifyError(ArithmeticException.class);###divZero###i->i/0###68:3:76:55
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onComplete:###parent.onCompleteCall().run();###completeHook###parent.onCompleteCall()###235:6:235:36
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxMergeOrdered.java###/FluxMergeOrdered.java###reactor.core.publisher.FluxMergeOrdered.MergeOrderedMainProducer###drain:###smaller=min==null||comparator.compare(min,(T)o)>0;###t###(T)o###280:9:280:69
43f3a4c4aef74cfe066af15f75344ad9ac478a17###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/NextProcessorTest.java###/NextProcessorTest.java###reactor.core.publisher.NextProcessorTest###successDoOnSuccessOrError:###mp.doOnSuccessOrError((s,f)->ref.set(s)).subscribe();###mono###mp.doOnSuccessOrError((s,f)->ref.set(s))###202:3:202:59
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedAppendedParallelFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags###Scannable.from(tagged1).tags()###453:3:454:79
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxMergeOrdered.java###/FluxMergeOrdered.java###reactor.core.publisher.FluxMergeOrdered.MergeOrderedMainProducer###drain:###min=(T)o;###t###(T)o###289:9:289:21
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###tryOnNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###805:6:806:23
4881e39ab0e659580c03617aa7f4a858a5fb8a53###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###zip:Function<? super Object[],? extends O> int Publisher<? extends I>[] ###returnnewFluxMap<>(sources[0],v->combinator.apply(newObject[]{v}));###source###sources[0]###1408:7:1408:83
1e433834d6a35e04fd40739f89e4594dacfc84a5###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxDistinct.java###/FluxDistinct.java###reactor.core.publisher.FluxDistinct.DistinctFuseableSubscriber###poll:###if(v==null||collection.add(keyExtractor.apply(v)))###r###keyExtractor.apply(v)###535:6:537:7
73becb9d2dd061031025c0e69798f0196253bd40###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###399:8:399:76
3e31271fa5af9c7ff9d194d755d88ef617475696###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxOnAssembly.java###/FluxOnAssembly.java###reactor.core.publisher.FluxOnAssembly.OnAssemblySubscriber###fail:Throwable ###sb.append(snapshotStack.toAssemblyInformation());###assemblyInformation###snapshotStack.toAssemblyInformation()###386:5:386:54
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###460:7:461:24
472a55e5da510be602512109b315d52d2f3c333b###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java###/SchedulersTest.java###reactor.core.scheduler.SchedulersTest###testOverride:###Assert.assertEquals(ts.elastic,Schedulers.newElastic("unused"));###elastic###Schedulers.newElastic("unused")###539:3:539:68
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###189:7:190:24
4881e39ab0e659580c03617aa7f4a858a5fb8a53###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###combineLatest:Function<Object[],V> int Publisher<? extends T>[] ###returnnewFluxMap<>(sources[0],v->combinator.apply(newObject[]{v}));###source###sources[0]###186:4:186:80
a9eb446a28c5d11806e69af9acaf576efb8bfb1a###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCollect.java###/MonoCollect.java###reactor.core.publisher.MonoCollect.CollectSubscriber###onNext:T ###onError(Operators.onOperatorError(this,e,t,actual.currentContext()));###ctx###actual.currentContext()###122:5:122:77
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onComplete:###parent.onCompleteCall().run();###completeHook###parent.onCompleteCall()###256:7:257:20
f8786d7112b14ee23b5aa348e153081dc1634d46###/reactor_reactor-core/src/test/java/reactor/core/publisher/MonoUntilOtherTest.java###/MonoUntilOtherTest.java###reactor.core.publisher.MonoUntilOtherTest###testAPIchainingCombinesWithFirstDelayErrorParameter:###Mono<String>until1=source.untilOtherDelayError(Mono.error(newIllegalArgumentException("boom")));###trigger1###Mono.error(newIllegalArgumentException("boom"))###191:3:192:55
9126ec7783290613f79a921e9a30a8822e07f213###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###collectList:###returnMono.onAssembly(newMonoCallable<>((Callable<T>)this).map(u->{List<T>list=(List<T>)LIST_SUPPLIER.get();list.add(u);returnlist;}));###thiz###(Callable<T>)this###2155:4:2159:8
c7b837d928cc4b29d328d12a3b2bb7561f0d4a0f###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###shareNext:###returnMono.onAssembly(newNextProcessor<>(this));###nextProcessor###newNextProcessor<>(this)###7578:3:7578:53
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###poll:###parent.onErrorCall().accept(e);###errorHook###parent.onErrorCall()###587:7:588:24
b8a5b8132f72b8816f6e819d5198b175df18183e###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###publisher###Operators.onLastAssembly(this)###7947:3:7947:80
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCacheTime.java###/MonoCacheTime.java###reactor.core.publisher.MonoCacheTime###MonoCacheTime:Mono<? extends T> Duration Scheduler ###this.state=(Signal<T>)EMPTY;###emptyState###(Signal<T>)EMPTY###55:3:55:34
56e5c0ddf8e9485b9117c75795db0afcd64eef6e###/reactor_reactor-core/reactor-test/src/test/java/reactor/test/scheduler/VirtualTimeSchedulerTests.java###/VirtualTimeSchedulerTests.java###reactor.test.scheduler.VirtualTimeSchedulerTests###allEnabled:###assertThat(Schedulers.newElastic("")).isNotInstanceOf(VirtualTimeScheduler.class);###elastic1###Schedulers.newElastic("")###58:3:58:85
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###singleOrDefault:Supplier<? extends T> ###returnMono.onAssembly(newMonoCallable<>((Callable<T>)this));###thiz###(Callable<T>)this###4508:10:4508:72
dcc36e52230b5c2b6fab87d4ab7d0fb72d9dff7c###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxIntervalTest.java###/FluxIntervalTest.java###reactor.core.publisher.FluxIntervalTest###scanIntervalRunnable:###FluxInterval.IntervalRunnabletest=newFluxInterval.IntervalRunnable(actual,Schedulers.single().createWorker());###worker###Schedulers.single().createWorker()###148:9:148:124
b573812b03b41114b69d588bcfd3e246c3eb6183###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPublishOn.java###/FluxPublishOn.java###reactor.core.publisher.FluxPublishOn.PublishOnSubscriber###cancel:###worker.dispose();###w###worker###273:4:273:21
c7b837d928cc4b29d328d12a3b2bb7561f0d4a0f###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSourceTest.java###/FluxSourceTest.java###reactor.core.publisher.FluxSourceTest###wrapToFlux:###StepVerifier.create(Flux.from(mp)).expectNext("test").verifyComplete();###fromMonoProcessor###Flux.from(mp)###35:3:37:33
5786b4e9aeb77b1fcb6693a216cdfae36a14f7b6###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable###subscribe:CoreSubscriber<? super R> ###Operators.error(actual,Operators.onOperatorError(ex,actual.currentContext()));###ctx###actual.currentContext()###98:5:99:33
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/Scannable.java###/Scannable.java###reactor.core.Scannable.Attr###tryConvert:Object ###return(T)o;###t###(T)o###230:5:230:18
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###empty:Publisher<T> ###returnonAssembly((Mono<Void>)newMonoIgnoreThen<>(source));###then###(Mono<Void>)newMonoIgnoreThen<>(source)###254:3:254:63
18fc5a634edc7d25c665ceda4c8fe5e043110c3c###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java###/UnicastManySinkNoBackpressure.java###reactor.core.publisher.UnicastManySinkNoBackpressure###emitNext:T ###switch(tryEmitNext(value))###emission###tryEmitNext(value)###110:3:128:4
060c5fdd955a3b10fec6cc7ffcb02d4b7ff50955###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxDrop.java###/FluxDrop.java###reactor.core.publisher.FluxDrop.DropSubscriber###onNext:T ###if(requested!=Long.MAX_VALUE)###r###requested###128:5:130:6
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###clear:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###656:4:656:76
7429b7ec9e59c4a5648fcd500310d59f3bcac279###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/ElasticScheduler.java###/ElasticScheduler.java###reactor.core.scheduler.ElasticScheduler.CachedService###CachedService:ElasticScheduler ###this.exec=Schedulers.decorateExecutorService(parent,parent.get());###exec###parent.get()###244:5:244:74
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###452:8:452:76
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###request:long ###parent.onRequestCall().accept(n);###requestHook###parent.onRequestCall()###131:6:132:23
472b1698ee29c9fcf5f3a23fc044f9b9b01e5679###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java###/SinkEmptyMulticast.java###reactor.core.publisher.SinkEmptyMulticast###tryEmitError:Throwable ###for(as:SUBSCRIBERS.getAndSet(this,TERMINATED))###prevSubscribers###SUBSCRIBERS.getAndSet(this,TERMINATED)###86:3:88:4
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###cancel:###parent.onCancelCall().run();###cancelHook###parent.onCancelCall()###416:6:417:19
2aff052b59eab8fe1b34f873603ed88f79efdade###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###last:###returnconvertToMono((Callable<T>)this);###thiz###(Callable<T>)this###3280:10:3280:50
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onError:Throwable ###parent.onErrorCall().accept(t);###errorHook###parent.onErrorCall()###827:6:827:37
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedAppendedFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags###Scannable.from(tagged1).tags()###242:3:243:79
83007c54da9c7e355eeb8eec6653fdf05a5e0827###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/SerializedSubscriberTest.java###/SerializedSubscriberTest.java###reactor.core.publisher.SerializedSubscriberTest###testLeakWithRetryWhenImmediatelyCancelled:###assertThat(counter.get()-1).withFailMessage("counternotequaltoseen+discarded:Expected<%s>,got<%s+%s>=<%s>",counter,seen,discarded,seen.get()+discarded.get()).isEqualTo(seen.get()+discarded.get());###snn###seen.get()###121:10:124:53
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###poll:###parent.onNextCall().accept(v);###nextHook###parent.onNextCall()###599:6:600:23
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedMonoTest:###assertThat(Scannable.from(tagged2).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags2###Scannable.from(tagged2).tags()###343:3:344:79
8219e52b1fb139f5909cec54b4cf3c1aef0681da###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###subscribeOn:Scheduler ###returnonAssembly(newMonoSubscribeOnCallable<T>((Callable<T>)this,scheduler));###c###(Callable<T>)this###2272:4:2273:18
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekTest.java###/MonoPeekTest.java###reactor.core.publisher.MonoPeekTest###onMonoRejectedDoOnSuccessOrError:###mp.doOnSuccessOrError((s,f)->ref.set(f)).subscribe();###mono###mp.doOnSuccessOrError((s,f)->ref.set(f))###36:3:37:18
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoDoFirstTest.java###/MonoDoFirstTest.java###reactor.core.publisher.MonoDoFirstTest###orderIsReversed_NoFusion:###StepVerifier.create(Mono.just(1).map(i->i/0).hide().doFirst(()->order.add("one")).doFirst(()->order.add("two")).doFirst(()->order.add("three"))).expectNoFusionSupport().verifyError(ArithmeticException.class);###divZero###i->i/0###49:3:58:55
fe479a92c08d0d39f5157ed84d6e58d4df60b9be###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/scheduler/DelegateServiceSchedulerTest.java###/DelegateServiceSchedulerTest.java###reactor.core.scheduler.DelegateServiceSchedulerTest###scanName:###SchedulercachedThreadPool=Schedulers.fromExecutorService(Executors.newCachedThreadPool());###cachedExecutor###Executors.newCachedThreadPool()###148:3:148:96
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###request:long ###parent.onRequestCall().accept(n);###requestHook###parent.onRequestCall()###124:6:124:39
84e921fbfd84754d519b5e3c78262495dcf48b87###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxSwitchOnFirst.java###/FluxSwitchOnFirst.java###reactor.core.publisher.FluxSwitchOnFirst.SwitchOnFirstConditionalMain###tryOnNext:T ###result=Objects.requireNonNull(this.transformer.apply(Signal.next(t,o.currentContext()),this),"Thetransformerreturnedanullvalue");###signal###Signal.next(t,o.currentContext())###415:21:418:23
43f3a4c4aef74cfe066af15f75344ad9ac478a17###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/NextProcessorTest.java###/NextProcessorTest.java###reactor.core.publisher.NextProcessorTest###rejectedDoOnSuccessOrError:###mp.doOnSuccessOrError((s,f)->ref.set(f)).subscribe(v->{},e->{});###mono###mp.doOnSuccessOrError((s,f)->ref.set(f))###162:3:162:75
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###doOnError:Class<E> Consumer<? super E> ###returndoOnError(exceptionType::isInstance,(Consumer<Throwable>)onError);###handler###(Consumer<Throwable>)onError###1363:3:1363:77
fe479a92c08d0d39f5157ed84d6e58d4df60b9be###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/scheduler/DelegateServiceSchedulerTest.java###/DelegateServiceSchedulerTest.java###reactor.core.scheduler.DelegateServiceSchedulerTest###scanName:###SchedulersingleThread=Schedulers.fromExecutorService(Executors.newSingleThreadExecutor());###singleExecutor###Executors.newSingleThreadExecutor()###149:3:149:96
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedHideMonoTest:###assertThat(Scannable.from(tagged2).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags2###Scannable.from(tagged2).tags()###362:3:363:79
1e433834d6a35e04fd40739f89e4594dacfc84a5###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxDistinct.java###/FluxDistinct.java###reactor.core.publisher.FluxDistinct.DistinctFuseableSubscriber###poll:###if(v==null||collection.add(keyExtractor.apply(v)))###r###keyExtractor.apply(v)###522:6:527:7
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###currentContext:###parent.onCurrentContextCall().accept(c);###contextHook###parent.onCurrentContextCall()###382:5:382:45
a03d3c58bb93f7aa5d3514ac529369d3a09ba876###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###publisher###Operators.onLastAssembly(this)###7922:3:7922:80
bfa688cad35cc6179812e4d352a3d0667ffdfd23###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/Scannable.java###/Scannable.java###reactor.core.Scannable###operatorName:###Stringstripped=toString().replaceAll("Parallel|Flux|Mono|Publisher","").replaceAll("Fuseable|Operator","");###name###toString()###389:3:391:42
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onComplete:###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###249:6:249:42
86ad8e4f465d491dccddf90b8fde689679e7a871###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxMetricsTest.java###/FluxMetricsTest.java###reactor.core.publisher.FluxMetricsTest###ensureFuseablePropagateOnComplete_inCaseOfAsyncFusion:###Flux.fromIterable(Arrays.asList(1,2,3)).metrics().flatMapIterable(Arrays::asList).as(StepVerifier::create).expectNext(1,2,3).expectComplete().verify(Duration.ofMillis(500));###source###Flux.fromIterable(Arrays.asList(1,2,3))###465:3:471:39
fe479a92c08d0d39f5157ed84d6e58d4df60b9be###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/scheduler/DelegateServiceSchedulerTest.java###/DelegateServiceSchedulerTest.java###reactor.core.scheduler.DelegateServiceSchedulerTest###scanName:###SchedulerfixedThreadPool=Schedulers.fromExecutorService(Executors.newFixedThreadPool(3));###fixedExecutor###Executors.newFixedThreadPool(3)###147:3:147:95
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onComplete:###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###561:7:562:20
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###cancel:###parent.onCancelCall().run();###cancelHook###parent.onCancelCall()###736:6:737:19
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedAppendedHideMonoTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags###Scannable.from(tagged1).tags()###385:3:386:79
b8a5b8132f72b8816f6e819d5198b175df18183e###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###publisher###Operators.onLastAssembly(this)###3874:3:3874:80
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###poll:###parent.onNextCall().accept(v);###nextHook###parent.onNextCall()###309:6:310:23
6ab518681f42b4e3b683d4d1200b048a5c450784###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoProcessor.java###/MonoProcessor.java###reactor.core.publisher.MonoProcessor###connect:###source.subscribe(this);###parent###source###465:5:465:28
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSwitchOnFirstTest.java###/FluxSwitchOnFirstTest.java###reactor.core.publisher.FluxSwitchOnFirstTest###cancelAndRequestRacingWithOnCompleteAfterTest:###FluxSwitchOnFirst.AbstractSwitchOnFirstMain<Object,Object>switchOnFirstMain=factory.apply(Operators.toConditionalSubscriber(assertSubscriber));###assertConditional###Operators.toConditionalSubscriber(assertSubscriber)###1724:17:1724:164
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onError:Throwable ###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###848:6:849:19
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSwitchOnFirstTest.java###/FluxSwitchOnFirstTest.java###reactor.core.publisher.FluxSwitchOnFirstTest###cancelAndRequestRacingOnErrorAfterTest:###FluxSwitchOnFirst.AbstractSwitchOnFirstMain<Object,Object>switchOnFirstMain=factory.apply(Operators.toConditionalSubscriber(assertSubscriber));###conditionalAssert###Operators.toConditionalSubscriber(assertSubscriber)###1764:17:1764:164
d734ad8aab602a636141292cfe3ad9fd7046d458###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCacheTime.java###/MonoCacheTime.java###reactor.core.publisher.MonoCacheTime.CoordinatorSubscriber###signalCached:Signal<T> ###inner.complete(signal.get());###signalToPropagate###signal###242:6:242:35
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###afterSuccessOrErrorForOnError:###StepVerifier.create(Mono.<String>error(err).doAfterSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})).expectErrorMessage("boom").verify();###mono###Mono.<String>error(err).doAfterSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})###523:3:530:25
d18da5a674eda33a7ea86ea69c87fa6d330743cb###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxUsing.java###/FluxUsing.java###reactor.core.publisher.FluxUsing###subscribe:CoreSubscriber<? super T> ###Operators.error(actual,Operators.onOperatorError(e,actual.currentContext()));###_e###Operators.onOperatorError(e,actual.currentContext())###97:4:97:83
2fa38f01aef400f759a57d1269727431938d5dc9###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/Scannable.java###/Scannable.java###reactor.core.Scannable###stepName:###name=name.substring(0,name.indexOf('$')).substring(name.lastIndexOf('.')+1);###stripPackageIndex###name.lastIndexOf('.')###420:4:422:43
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedParallelFluxTest:###assertThat(Scannable.from(tagged2).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags2###Scannable.from(tagged2).tags()###442:3:443:79
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxIndexFuseable.java###/FluxIndexFuseable.java###reactor.core.publisher.FluxIndexFuseable.IndexFuseableConditionalSubscriber###onSubscribe:Subscription ###this.s=(QueueSubscription<T>)s;###qs###(QueueSubscription<T>)s###243:5:243:39
83007c54da9c7e355eeb8eec6653fdf05a5e0827###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/SerializedSubscriberTest.java###/SerializedSubscriberTest.java###reactor.core.publisher.SerializedSubscriberTest###testLeakWithRetryWhenImmediatelyCancelled:###assertThat(counter.get()-1).withFailMessage("counternotequaltoseen+discarded:Expected<%s>,got<%s+%s>=<%s>",counter,seen,discarded,seen.get()+discarded.get()).isEqualTo(seen.get()+discarded.get());###discrdd###discarded.get()###121:10:124:53
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onError:Throwable ###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###233:6:234:19
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedHideMonoTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"));###scannedTags1###Scannable.from(tagged1).tags()###359:3:360:55
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###currentContext:###parent.onCurrentContextCall().accept(c);###contextHook###parent.onCurrentContextCall()###121:5:121:45
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###flux:###returnFlux.onAssembly(newFluxCallable<>((Callable<T>)this));###thiz###(Callable<T>)this###1565:10:1565:72
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainSync:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###607:8:607:80
3eba502100d575a04eb31b4e8850d2527ec011aa###/reactor_reactor-core/src/main/java/reactor/core/scheduler/Schedulers.java###/Schedulers.java###reactor.core.scheduler.Schedulers###handleError:Throwable ###Thread.UncaughtExceptionHandlerx=Thread.currentThread().getUncaughtExceptionHandler();###thread###Thread.currentThread()###607:3:608:76
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###Operators.onDiscardQueueWithClear(q,actual.currentContext(),null);###context###actual.currentContext()###409:8:409:76
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxNameTest.java###/FluxNameTest.java###reactor.core.publisher.FluxNameTest###scanOperator:###assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1,tag2);###scannedTags###test.scan(Scannable.Attr.TAGS)###48:3:48:84
74b94a4eadabf67140d394a4fb9fb3cff267b26a###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxRefCount.java###/FluxRefCount.java###reactor.core.publisher.FluxRefCount.RefCountMonitor###subscribe:CoreSubscriber<? super T> ###if(SUBSCRIBERS.incrementAndGet(this)==n)###subCount###SUBSCRIBERS.incrementAndGet(this)###118:4:120:5
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###cancel:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###285:6:285:78
84e921fbfd84754d519b5e3c78262495dcf48b87###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxSwitchOnFirst.java###/FluxSwitchOnFirst.java###reactor.core.publisher.FluxSwitchOnFirst.AbstractSwitchOnFirstMain###onComplete:###result=Objects.requireNonNull(this.transformer.apply(Signal.complete(o.currentContext()),this),"Thetransformerreturnedanullvalue");###signal###Signal.complete(o.currentContext())###219:21:222:23
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedMonoTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"));###scannedTags1###Scannable.from(tagged1).tags()###340:3:341:55
b573812b03b41114b69d588bcfd3e246c3eb6183###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPublishOn.java###/FluxPublishOn.java###reactor.core.publisher.FluxPublishOn.PublishOnSubscriber###trySchedule:Subscription Throwable Object ###worker.schedule(this);###w###worker###289:5:289:27
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoNameFuseableTest.java###/MonoNameFuseableTest.java###reactor.core.publisher.MonoNameFuseableTest###scanOperator:###assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1,tag2);###scannedTags###test.scan(Scannable.Attr.TAGS)###48:3:48:84
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxWindowWhen.java###/FluxWindowWhen.java###reactor.core.publisher.FluxWindowWhen.WindowWhenMainSubscriber###drainLoop:###w.onNext((T)o);###t###(T)o###305:7:305:23
f8786d7112b14ee23b5aa348e153081dc1634d46###/reactor_reactor-core/src/test/java/reactor/core/publisher/MonoUntilOtherTest.java###/MonoUntilOtherTest.java###reactor.core.publisher.MonoUntilOtherTest###testAPIchainingCombines:###Mono<String>until1=source.untilOther(Flux.just(1,2,3));###trigger1###Flux.just(1,2,3)###171:3:172:25
1ca12b457600bf5bb19ea09d7a8e40b7e7edb630###/reactor_reactor-core/src/main/java/reactor/core/publisher/Operators.java###/Operators.java###reactor.core.publisher.Operators.MonoSubscriber###request:long ###a.onNext(value);###v###value###823:8:823:24
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onComplete:###parent.onCompleteCall().run();###completeHook###parent.onCompleteCall()###865:6:866:19
756c71a0c42e39fd7b55f15d1377245139eb0ae5###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap###trySubscribeScalarMap:Publisher<? extends T> CoreSubscriber<? super R> Function<? super T,? extends Publisher<? extends R>> boolean ###Operators.error(s,Operators.onOperatorError(null,e,t,s.currentContext()));###ctx###s.currentContext()###144:5:144:83
1ca12b457600bf5bb19ea09d7a8e40b7e7edb630###/reactor_reactor-core/src/main/java/reactor/core/publisher/Operators.java###/Operators.java###reactor.core.publisher.Operators.MonoSubscriber###poll:###returnvalue;###v###value###941:5:941:18
202fc5726f4ae55bfd9c13a235e518645c768f01###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxConcatMap.java###/FluxConcatMap.java###reactor.core.publisher.FluxConcatMap.ConcatMapDelayed###drain:###Throwablee_=Operators.onNextPollError(v,e,actual.currentContext());###ctx###actual.currentContext()###763:10:764:37
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedHideFluxTest:###assertThat(Scannable.from(tagged2).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags2###Scannable.from(tagged2).tags()###231:3:232:79
84e921fbfd84754d519b5e3c78262495dcf48b87###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxSwitchOnFirst.java###/FluxSwitchOnFirst.java###reactor.core.publisher.FluxSwitchOnFirst.AbstractSwitchOnFirstMain###onError:Throwable ###result=Objects.requireNonNull(this.transformer.apply(Signal.error(t,o.currentContext()),this),"Thetransformerreturnedanullvalue");###signal###Signal.error(t,o.currentContext())###183:21:186:23
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###then:###returnMono.onAssembly((Mono<Void>)newMonoIgnoreThen<>(this));###then###(Mono<Void>)newMonoIgnoreThen<>(this)###5159:3:5159:67
0abfe1148d87324b26057e72764932f5f00ee3c9###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap.FlatMapMain###checkTerminated:boolean boolean Subscriber<?> ###Operators.onDiscardQueueWithClear(scalarQueue,actual.currentContext(),null);###ctx###actual.currentContext()###787:5:787:83
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxIndexFuseable.java###/FluxIndexFuseable.java###reactor.core.publisher.FluxIndexFuseable.IndexFuseableSubscriber###onSubscribe:Subscription ###this.s=(QueueSubscription<T>)s;###qs###(QueueSubscription<T>)s###98:5:98:39
bffc0424fb71563d6ced09df15b9cf966ceb1ca8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPaging.java###/FluxPaging.java###reactor.core.publisher.FluxPaging.PageMain###request:long ###longcontentToRequest=CONTENT_REQUESTED.get(this)==Long.MAX_VALUE?Long.MAX_VALUE:n;###currentRequest###CONTENT_REQUESTED.get(this)###150:6:150:97
b8a5b8132f72b8816f6e819d5198b175df18183e###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###subscriber###Operators.toCoreSubscriber(actual)###3874:3:3874:80
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedParallelFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"));###scannedTags1###Scannable.from(tagged1).tags()###439:3:440:55
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCacheTime.java###/MonoCacheTime.java###reactor.core.publisher.MonoCacheTime###MonoCacheTime:Mono<? extends T> Function<? super Signal<T>,Duration> Scheduler ###this.state=(Signal<T>)EMPTY;###state###(Signal<T>)EMPTY###67:3:67:34
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxDoFirstTest.java###/FluxDoFirstTest.java###reactor.core.publisher.FluxDoFirstTest###orderIsReversed_Fused:###StepVerifier.create(Flux.just(1).map(i->i/0).doFirst(()->order.add("one")).doFirst(()->order.add("two")).doFirst(()->order.add("three"))).expectFusion().verifyError(ArithmeticException.class);###divZero###i->i/0###68:3:76:55
f9c799374e7406e472cc6c6307b9650c5cb79684###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/Schedulers.java###/Schedulers.java###reactor.core.scheduler.Schedulers###handleError:Throwable ###onHandleErrorHook.accept(thread,t);###hook###onHandleErrorHook###1091:4:1091:40
350d457e65580f031652a56fd170e24d7f859d6d###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxOnAssembly.java###/FluxOnAssembly.java###reactor.core.publisher.FluxOnAssembly.OnAssemblySubscriber###fail:Throwable ###returnExceptions.addSuppressed(t,newOnAssemblyException(parent,snapshotStack,description));###onAssemblyException###newOnAssemblyException(parent,snapshotStack,description)###399:4:399:100
71a8106fcfde21576d16d60af48436bbc5e0fff1###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxBufferTimeOrSize.java###/FluxBufferTimeOrSize.java###reactor.core.publisher.FluxBufferTimeOrSize.BufferAction###checkedError:Throwable ###values.clear();###v###values###61:5:61:20
2aff052b59eab8fe1b34f873603ed88f79efdade###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###mapError:Class<E> Function<? super E,? extends Throwable> ###returnmapError(type::isInstance,(Function<Throwable,Throwable>)mapper);###handler###(Function<Throwable,Throwable>)mapper###3433:3:3433:77
8684a735f101295d663b92212dbfa7213034d213###/reactor_reactor-core/src/main/java/reactor/core/scheduler/SingleScheduler.java###/SingleScheduler.java###reactor.core.scheduler.SingleScheduler.SingleWorker.SingleWorkerTask###dispose:###parent.remove(this);###o###parent###296:8:296:28
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedAppendedMonoTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags###Scannable.from(tagged1).tags()###373:3:374:79
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###mapError:Class<E> Function<? super E,? extends Throwable> ###returnmapError(type::isInstance,(Function<Throwable,Throwable>)mapper);###handler###(Function<Throwable,Throwable>)mapper###1776:3:1776:77
5254299a5ac16ba012f1f788171c82cf6c8f791f###/reactor_reactor-core/src/test/java/reactor/core/publisher/FluxTakeLastOneTest.java###/FluxTakeLastOneTest.java###reactor.core.publisher.FluxTakeLastOneTest###empty:###StepVerifier.create(Flux.empty().takeLast(1)).verifyComplete();###f###Flux.empty().takeLast(1)###25:3:27:36
41a47ee0b31277dac5a6e7b80adf408244cd6192###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxPublishOn.java###/FluxPublishOn.java###reactor.core.publisher.FluxPublishOn.PublishOnConditionalSubscriber###runBackfused:###if(done)###d###done###1012:5:1021:6
5786b4e9aeb77b1fcb6693a216cdfae36a14f7b6###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainSync:###a.onError(Operators.onOperatorError(s,exc,t,actual.currentContext()));###ctx###actual.currentContext()###523:8:524:36
dcc36e52230b5c2b6fab87d4ab7d0fb72d9dff7c###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoSubscribeOnTest.java###/MonoSubscribeOnTest.java###reactor.core.publisher.MonoSubscribeOnTest###scanSubscribeOnSubscriber:###MonoSubscribeOn.SubscribeOnSubscriber<String>test=newMonoSubscribeOn.SubscribeOnSubscriber<>(source,actual,Schedulers.single().createWorker());###worker###Schedulers.single().createWorker()###200:3:201:57
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedHideFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"));###scannedTags1###Scannable.from(tagged1).tags()###228:3:229:55
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###onSubscribe:Subscription ###parent.onSubscribeCall().accept(s);###subscribeHook###parent.onSubscribeCall()###434:7:435:24
da64d2f0afc135b3d0044829e2722d0d69f95290###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/DelegateServiceScheduler.java###/DelegateServiceScheduler.java###reactor.core.scheduler.DelegateServiceScheduler###dispose:###executor.shutdownNow();###e###executor###91:3:91:26
a7bce5593e654d59a446e48b144ffe4fb2237038###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlatMap.java###/FluxFlatMap.java###reactor.core.publisher.FluxFlatMap###trySubscribeScalarMap:Publisher<? extends T> CoreSubscriber<? super R> Function<? super T,? extends Publisher<? extends R>> boolean ###Operators.error(s,Operators.onOperatorError(null,e,t,s.currentContext()));###ctx###s.currentContext()###156:6:156:84
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###cancel:###parent.onCancelCall().run();###cancelHook###parent.onCancelCall()###146:6:147:19
43f3a4c4aef74cfe066af15f75344ad9ac478a17###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java###/SchedulersTest.java###reactor.core.scheduler.SchedulersTest###testDefaultMethods:###Schedulers.elastic().dispose();###elastic###Schedulers.elastic()###1185:3:1185:34
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###onError:Throwable ###parent.onErrorCall().accept(t);###errorHook###parent.onErrorCall()###197:6:197:37
a0b752a92d049d35af08aec265c0740f6abb5789###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/WorkerTask.java###/WorkerTask.java###reactor.core.scheduler.WorkerTask###dispose:###f.cancel(thread!=Thread.currentThread());###async###thread!=Thread.currentThread()###129:6:129:49
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###tryOnNext:T ###parent.onNextCall().accept(t);###nextHook###parent.onNextCall()###482:6:483:23
56e5c0ddf8e9485b9117c75795db0afcd64eef6e###/reactor_reactor-core/reactor-test/src/test/java/reactor/test/scheduler/VirtualTimeSchedulerTests.java###/VirtualTimeSchedulerTests.java###reactor.test.scheduler.VirtualTimeSchedulerTests###allEnabled:###assertThat(Schedulers.newElastic("")).isInstanceOf(VirtualTimeScheduler.class);###elastic2###Schedulers.newElastic("")###65:3:65:82
7511eb7d9b12b8d5d6df0e7d2bca5647db48be92###/reactor_reactor-core/src/main/java/reactor/core/publisher/MonoDelay.java###/MonoDelay.java###reactor.core.publisher.MonoDelay###subscribe:Subscriber<? super Long> ###r.setCancel(timedScheduler.schedule(r,delay,unit));###f###timedScheduler.schedule(r,delay,unit)###54:3:54:56
8787b340e69d2c24394ef4f18cea03822e05a174###/reactor_reactor-core/src/main/java/reactor/core/publisher/ReplayProcessor.java###/ReplayProcessor.java###reactor.core.publisher.ReplayProcessor.BoundedBuffer###drainFused:ReplaySubscription<T> ###if(done)###d###done###732:5:740:6
56e5c0ddf8e9485b9117c75795db0afcd64eef6e###/reactor_reactor-core/reactor-test/src/test/java/reactor/test/scheduler/VirtualTimeSchedulerTests.java###/VirtualTimeSchedulerTests.java###reactor.test.scheduler.VirtualTimeSchedulerTests###allEnabled:###Assert.assertSame(Schedulers.newElastic(""),t);###elastic3###Schedulers.newElastic("")###72:3:72:51
b753987d11f5c6359c8ee65e4492fe84310da498###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxGroupBy.java###/FluxGroupBy.java###reactor.core.publisher.FluxGroupBy.GroupByMain###groupTerminated:K ###if(GROUP_COUNT.decrementAndGet(this)==0)###groupRemaining###GROUP_COUNT.decrementAndGet(this)###309:4:311:5
93088212fe2f4ecea9b10fd187b6d6421485f001###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxGroupBy.java###/FluxGroupBy.java###reactor.core.publisher.FluxGroupBy.GroupByMain###groupTerminated:K ###if(GROUP_COUNT.decrementAndGet(this)==0)###groupRemaining###GROUP_COUNT.decrementAndGet(this)###302:4:304:5
741f0eb72d806dcba589b6636f6bbd333643dcfa###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSubscribeOnTest.java###/FluxSubscribeOnTest.java###reactor.core.publisher.FluxSubscribeOnTest###scanMainSubscriber:###FluxSubscribeOn.SubscribeOnSubscriber<Integer>test=newFluxSubscribeOn.SubscribeOnSubscriber<>(Flux.just(1),actual,Schedulers.single().createWorker(),true);###worker###Schedulers.single().createWorker()###174:9:175:119
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onComplete:###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###880:6:881:19
4a1355774678df9eca2f339157a1e13d6411b054###/reactor_reactor-core/src/test/java/reactor/core/publisher/FluxCreateTest.java###/FluxCreateTest.java###reactor.core.publisher.FluxCreateTest###createStreamFromFluxCreate:###StepVerifier.create(Flux.create(s->{s.next("test1");s.next("test2");s.next("test3");s.complete();})).expectNext("test1","test2","test3").verifyComplete();###created###Flux.create(s->{s.next("test1");s.next("test2");s.next("test3");s.complete();})###46:3:53:33
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSwitchOnFirstTest.java###/FluxSwitchOnFirstTest.java###reactor.core.publisher.FluxSwitchOnFirstTest###onErrorAndRequestRacingTest:###FluxSwitchOnFirst.AbstractSwitchOnFirstMain<Object,Object>switchOnFirstMain=factory.apply(Operators.toConditionalSubscriber(assertSubscriber));###conditionalAssert###Operators.toConditionalSubscriber(assertSubscriber)###1693:17:1693:164
73becb9d2dd061031025c0e69798f0196253bd40###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###cancel:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###278:6:278:78
f8786d7112b14ee23b5aa348e153081dc1634d46###/reactor_reactor-core/src/test/java/reactor/core/publisher/MonoUntilOtherTest.java###/MonoUntilOtherTest.java###reactor.core.publisher.MonoUntilOtherTest###testAPIchainingCombinesWithFirstDelayErrorParameter:###Mono<String>until2=until1.untilOther(Mono.delay(Duration.ofMillis(800)));###trigger2###Mono.delay(Duration.ofMillis(800))###194:3:195:41
de15bc6f76342a1a1715ec94e16d63a8f787f973###/reactor_reactor-core/src/main/java/reactor/core/publisher/MonoDelayElement.java###/MonoDelayElement.java###reactor.core.publisher.MonoDelayElement.MonoDelayElementSubscriber###onNext:T ###this.task=scheduler.schedule(()->complete(t),delay,unit);###task###scheduler.schedule(()->complete(t),delay,unit)###107:4:107:67
7429b7ec9e59c4a5648fcd500310d59f3bcac279###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/scheduler/ParallelScheduler.java###/ParallelScheduler.java###reactor.core.scheduler.ParallelScheduler###start:###b[i]=Schedulers.decorateExecutorService(this,this.get());###exec###this.get()###113:21:113:81
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Mono.java###/Mono.java###reactor.core.publisher.Mono###otherwise:Class<E> Function<? super E,? extends Mono<? extends T>> ###returnotherwise(type::isInstance,(Function<?superThrowable,Mono<?extendsT>>)fallback);###handler###(Function<?superThrowable,Mono<?extendsT>>)fallback###1893:3:1894:63
e6798f682f6713f79d527568c16b7f8b7aeefa1b###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainSync:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###580:8:580:80
63debe7f0cdfcfa3ff77e42d9463134690fb5c07###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/ScannableTest.java###/ScannableTest.java###reactor.core.ScannableTest###taggedAppendedHideFluxTest:###assertThat(Scannable.from(tagged1).tags()).containsExactlyInAnyOrder(Tuples.of("1","One"),Tuples.of("2","Two"));###scannedTags###Scannable.from(tagged1).tags()###254:3:255:79
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoPeekAfterTest.java###/MonoPeekAfterTest.java###reactor.core.publisher.MonoPeekAfterTest###onSuccessOrErrorForOnError:###StepVerifier.create(Mono.<String>error(err).doOnSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})).expectErrorMessage("boom").verify();###test###Mono.<String>error(err).doOnSuccessOrError((v,t)->{invoked.increment();value.set(v);error.set(t);})###501:3:508:25
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###poll:###parent.onErrorCall().accept(e);###errorHook###parent.onErrorCall()###297:7:298:24
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###onErrorResumeWith:Class<E> Function<? super E,? extends Publisher<? extends T>> ###returnonErrorResumeWith(type::isInstance,(Function<?superThrowable,Publisher<?extendsT>>)fallback);###handler###(Function<?superThrowable,Publisher<?extendsT>>)fallback###3608:3:3609:68
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekConditionalSubscriber###onSubscribe:Subscription ###parent.onSubscribeCall().accept(s);###subscribeHook###parent.onSubscribeCall()###753:7:754:24
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeek.java###/FluxPeek.java###reactor.core.publisher.FluxPeek.PeekSubscriber###cancel:###parent.onCancelCall().run();###cancelHook###parent.onCancelCall()###138:6:138:34
5d5872ece9312e99efd32588d0d6834b010402b8###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableSubscriber###onComplete:###parent.onAfterTerminateCall().run();###afterTerminateHook###parent.onAfterTerminateCall()###271:7:272:20
7b53aed556f7cc79f346c497eaace1a7fd7776f0###/reactor_reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java###/EmitterProcessor.java###reactor.core.publisher.EmitterProcessor###drainLoop:###if(q.getCursor()>=cursor)###max###q.getCursor()###442:8:447:9
f5dae366aae1cd8dcc7fbb031ebc4f3c553921ee###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoSubscribeOnTest.java###/MonoSubscribeOnTest.java###reactor.core.publisher.MonoSubscribeOnTest###classicWithTimeout:###Mono.fromCallable(()->{try{TimeUnit.SECONDS.sleep(2L);}catch(InterruptedExceptionignore){}return0;}).timeout(Duration.ofMillis(100L)).onErrorResume(t->Mono.fromCallable(()->1)).subscribeOn(afterTest.autoDispose(Schedulers.newBoundedElastic(4,100,"timeout"))).subscribe(ts);###timeoutScheduler###afterTest.autoDispose(Schedulers.newBoundedElastic(4,100,"timeout"))###167:3:178:22
73becb9d2dd061031025c0e69798f0196253bd40###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###clear:###Operators.onDiscardQueueWithClear(queue,actual.currentContext(),null);###context###actual.currentContext()###645:4:645:76
7f6ff8637f85a9c50426a12b75b1c68a4b336b61###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java###/DirectProcessor.java###reactor.core.publisher.DirectProcessor###onNext:T ###for(s:subscribers)###inners###subscribers###98:3:100:4
a05195d7492f8eadc99baed554ae17ae5dcd4cc1###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoDoOnEachTest.java###/MonoDoOnEachTest.java###reactor.core.publisher.MonoDoOnEachTest###usesFluxDoOnEachConditionalSubscriber:###assertThat(ref.get().actuals().map(Object::getClass)).contains(expected);###streamOfClasses###ref.get().actuals().map(Object::getClass)###92:3:96:25
c7b837d928cc4b29d328d12a3b2bb7561f0d4a0f###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java###/SinksSpecs.java###reactor.core.publisher.SinksSpecs.RootSpecImpl###one:###returnwrapOne(newNextProcessor<>(null));###original###newNextProcessor<>(null)###95:4:95:46
3fbf3823685b84ffd6a88e88d9d9fff67d057fc9###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/MonoDelayUntilTest.java###/MonoDelayUntilTest.java###reactor.core.publisher.MonoDelayUntilTest###scanTrigger:###MonoDelayUntil.DelayUntilCoordinator<String>main=newMonoDelayUntil.DelayUntilCoordinator<>(actual,false,newFunction[3]);###otherGenerators###newFunction[3]###342:3:343:37
b8a5b8132f72b8816f6e819d5198b175df18183e###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###subscribe:Subscriber<? super T> ###Operators.onLastAssembly(this).subscribe(Operators.toCoreSubscriber(actual));###subscriber###Operators.toCoreSubscriber(actual)###7947:3:7947:80
dcc36e52230b5c2b6fab87d4ab7d0fb72d9dff7c###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxBufferTimeoutTest.java###/FluxBufferTimeoutTest.java###reactor.core.publisher.FluxBufferTimeoutTest###scanSubscriber:###FluxBufferTimeout.BufferTimeoutSubscriber<String,List<String>>test=newFluxBufferTimeout.BufferTimeoutSubscriber<String,List<String>>(actual,123,1000,Schedulers.elastic().createWorker(),ArrayList::new);###worker###Schedulers.elastic().createWorker()###92:3:93:79
2e9f9e066f2a48637b6dd48e023163e0443eac63###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoCacheTime.java###/MonoCacheTime.java###reactor.core.publisher.MonoCacheTime###run:###state=(Signal<T>)EMPTY;###emptyState###(Signal<T>)EMPTY###61:3:61:29
8a61c1e4ea018ce68ff9d695d0e087bbb1f85adf###/reactor_reactor-core/reactor-core/src/test/java/reactor/core/publisher/FluxSwitchOnFirstTest.java###/FluxSwitchOnFirstTest.java###reactor.core.publisher.FluxSwitchOnFirstTest###onCompleteAndRequestRacingTest:###FluxSwitchOnFirst.AbstractSwitchOnFirstMain<Object,Object>switchOnFirstMain=factory.apply(Operators.toConditionalSubscriber(assertSubscriber));###conditionalAssert###Operators.toConditionalSubscriber(assertSubscriber)###1662:17:1662:164
fe51acad0128a865374c214510bb90b46d302828###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxPage.java###/FluxPage.java###reactor.core.publisher.FluxPage.PageMain###prepareNextPage:Mono<P> ###pageMono.subscribe(newPageSubscriber<>(this));###next###newPageSubscriber<>(this)###89:5:89:52
5786b4e9aeb77b1fcb6693a216cdfae36a14f7b6###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java###/FluxFlattenIterable.java###reactor.core.publisher.FluxFlattenIterable.FlattenIterableSubscriber###drainAsync:###onError(Operators.onOperatorError(s,exc,t,actual.currentContext()));###ctx###actual.currentContext()###339:8:340:36
a5f6bef6823b5071d033afc7bd08243080860571###/reactor_reactor-core/src/main/java/reactor/core/publisher/Flux.java###/Flux.java###reactor.core.publisher.Flux###reduce:BiFunction<T,T,T> ###returnconvertToMono((Callable<T>)this);###thiz###(Callable<T>)this###3989:7:3989:47
faea67ebf37e405c8b7bc6a40694861e87b68c2a###/reactor_reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java###/SchedulersTest.java###reactor.core.scheduler.SchedulersTest###testShutdownOldOnSetFactory:###Assert.assertEquals(cachedTimerOld.schedule(()->{}),Scheduler.REJECTED);###disposable###cachedTimerOld.schedule(()->{})###120:3:120:78
71a8106fcfde21576d16d60af48436bbc5e0fff1###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxBufferTimeOrSize.java###/FluxBufferTimeOrSize.java###reactor.core.publisher.FluxBufferTimeOrSize.BufferAction###nextCallback:T ###values.add(value);###v###values###69:5:69:23
5792cf970568bf7d8494b024758095cfa503b5f6###/reactor_reactor-core/src/main/java/reactor/core/publisher/FluxPeekFuseable.java###/FluxPeekFuseable.java###reactor.core.publisher.FluxPeekFuseable.PeekFuseableConditionalSubscriber###poll:###parent.onCompleteCall().run();###call###parent.onCompleteCall()###472:5:472:35
a9eb446a28c5d11806e69af9acaf576efb8bfb1a###/reactor_reactor-core/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java###/MonoStreamCollector.java###reactor.core.publisher.MonoStreamCollector.StreamCollectorSubscriber###onNext:T ###onError(Operators.onOperatorError(s,ex,t,actual.currentContext()));###ctx###actual.currentContext()###128:5:128:75
