f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/math/src/main/java/smile/stat/distribution/HyperGeometricDistribution.java###/HyperGeometricDistribution.java###smile.stat.distribution.HyperGeometricDistribution###cdf:double ###if(k<Math.max(0,m+n-N))###L###Math.max(0,m+n-N)###124:9:128:10
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/manifold/LLE.java###/LLE.java###smile.manifold.LLE###LLE:double[][] int int ###C.add(p,q,(data[i][l]-data[N[i][p]][l])*(data[i][l]-data[N[i][q]][l]));###xi###data[i]###165:25:165:104
180e65bb8131caf18cb67c62a3d3a50655b80ed5###/haifengl_smile/core/src/main/java/smile/feature/Scaler.java###/Scaler.java###smile.feature.Scaler###fit:DataFrame ###double[]lo=newdouble[schema.length()];###p###schema.length()###110:9:110:51
0a1bff0f6f301fc81ab123737d02823ab8e44da5###/haifengl_smile/math/src/main/java/smile/math/AbstractDifferentiableMultivariateFunction.java###/AbstractDifferentiableMultivariateFunction.java###smile.math.AbstractDifferentiableMultivariateFunction###g:double[] double[] ###for(intj=0;j<x.length;j++)###n###x.length###35:9:46:10
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/manifold/LLE.java###/LLE.java###smile.manifold.LLE###LLE:double[][] int int ###rowIndex[m*k+p]=newIndex[N[i][p]];###ni###N[i]###185:17:185:57
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###classification:int Formula DataFrame BiFunction<Formula,DataFrame,M> ###returnClassificationValidation.of(of(data.size(),k),formula,data,trainer);###bags###of(data.size(),k)###299:9:299:88
180e65bb8131caf18cb67c62a3d3a50655b80ed5###/haifengl_smile/core/src/main/java/smile/feature/MaxAbsScaler.java###/MaxAbsScaler.java###smile.feature.MaxAbsScaler###fit:DataFrame ###double[]scale=newdouble[schema.length()];###p###schema.length()###90:9:90:54
0e2ebb59c94214449e680028e24119f70c45e335###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###group:int[] int ###for(i:group)###y###group###147:9:147:37
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/feature/RobustStandardizer.java###/RobustStandardizer.java###smile.feature.RobustStandardizer###fit:DataFrame ###double[]median=newdouble[schema.length()];###p###schema.length()###55:9:55:55
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###stratify:int Formula DataFrame BiFunction<Formula,DataFrame,M> ###returnClassificationValidation.of(stratify(y,k),formula,data,trainer);###bags###stratify(y,k)###327:9:327:84
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/data/src/main/java/smile/data/AttributeDataset.java###/AttributeDataset.java###smile.data.AttributeDataset###summary:###s[0]=Math.min(x);###k###0###489:13:489:32
df74f9410e750f08b275233c3319461102298fbd###/haifengl_smile/math/src/main/java/smile/stat/distribution/HyperGeometricDistribution.java###/HyperGeometricDistribution.java###smile.stat.distribution.HyperGeometricDistribution###cdf:double ###if(k<Math.max(0,m+n-N))###L###Math.max(0,m+n-N)###128:9:132:10
8a15eff1623ea34d954990bdb669a6dcef9fe8db###/haifengl_smile/core/src/main/java/smile/classification/RandomForest.java###/RandomForest.java###smile.classification.RandomForest###fit:Formula DataFrame int int SplitRule int int int double int[] LongStream ###oob[j]=tree.predict(x.get(i),posteriori[j]);###p###tree.predict(x.get(i),posteriori[j])###387:21:387:68
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/feature/MaxAbsScaler.java###/MaxAbsScaler.java###smile.feature.MaxAbsScaler###fit:DataFrame ###double[]scale=newdouble[schema.length()];###p###schema.length()###82:9:82:54
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/math/src/main/java/smile/math/matrix/SVD.java###/SVD.java###smile.math.matrix.SVD###range:###DenseMatrixrnge=Matrix.zeros(m,rank());###r###rank()###206:9:206:52
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###classification:int Formula DataFrame BiFunction<Formula,DataFrame,M> ###returnClassificationValidation.of(of(data.size(),k),formula,data,trainer);###bags###of(data.size(),k)###293:9:293:88
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###regression:int Formula DataFrame BiFunction<Formula,DataFrame,M> ###returnRegressionValidation.of(of(data.size(),k),formula,data,trainer);###bags###of(data.size(),k)###320:9:320:84
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###stratify:int T[] int[] BiFunction<T[],int[],M> ###returnClassificationValidation.of(stratify(y,k),x,y,trainer);###bags###stratify(y,k)###313:9:313:75
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###regression:int Formula DataFrame BiFunction<Formula,DataFrame,M> ###returnRegressionValidation.of(of(data.size(),k),formula,data,trainer);###bags###of(data.size(),k)###354:9:354:84
180e65bb8131caf18cb67c62a3d3a50655b80ed5###/haifengl_smile/core/src/main/java/smile/feature/RobustStandardizer.java###/RobustStandardizer.java###smile.feature.RobustStandardizer###fit:DataFrame ###double[]median=newdouble[schema.length()];###p###schema.length()###63:9:63:55
180e65bb8131caf18cb67c62a3d3a50655b80ed5###/haifengl_smile/core/src/main/java/smile/feature/WinsorScaler.java###/WinsorScaler.java###smile.feature.WinsorScaler###fit:DataFrame double double ###double[]lo=newdouble[schema.length()];###p###schema.length()###95:9:95:51
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/manifold/LLE.java###/LLE.java###smile.manifold.LLE###LLE:double[][] int int ###C.add(p,q,(data[i][l]-data[N[i][p]][l])*(data[i][l]-data[N[i][q]][l]));###xip###data[N[i][p]]###165:25:165:104
bc5e5066ccc29ff36c3c1deac86d7821d4177732###/haifengl_smile/core/src/main/java/smile/regression/DataFrameRegression.java###/DataFrameRegression.java###smile.regression.DataFrameRegression.of.new DataFrameRegression###predict:Tuple ###returnmodel.predict(formula.x(x).toArray());###vector###formula.x(x).toArray()###86:17:86:62
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/math/src/main/java/smile/math/matrix/SVD.java###/SVD.java###smile.math.matrix.SVD###nullspace:###DenseMatrixnullsp=Matrix.zeros(n,nullity());###nr###nullity()###227:9:227:57
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/clustering/GMeans.java###/GMeans.java###smile.clustering.GMeans###AndersonDarling:double[] ###x[i]=GaussianDistribution.getInstance().cdf(x[i]);###gaussian###GaussianDistribution.getInstance()###188:13:188:65
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###regression:int T[] double[] BiFunction<T[],double[],M> ###returnRegressionValidation.of(of(x.length,k),x,y,trainer);###bags###of(x.length,k)###341:9:341:72
180e65bb8131caf18cb67c62a3d3a50655b80ed5###/haifengl_smile/core/src/main/java/smile/feature/Standardizer.java###/Standardizer.java###smile.feature.Standardizer###fit:DataFrame ###double[]mu=newdouble[schema.length()];###p###schema.length()###101:9:101:51
2c768a0b0a1d6a4b49df5af4079f9a5c0aefffa2###/haifengl_smile/core/src/main/java/smile/feature/Normalizer.java###/Normalizer.java###smile.feature.Normalizer###transform:double[] ###double[]y=newdouble[x.length];###p###x.length###107:9:107:43
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/clustering/GMeans.java###/GMeans.java###smile.clustering.GMeans###GMeans:double[][] int ###logger.info("Cluster{}toosmalltosplit:{}samples",i,size[i]);###ni###size[i]###93:21:93:90
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/math/src/main/java/smile/math/matrix/SparseMatrix.java###/SparseMatrix.java###smile.math.matrix.SparseMatrix###abmm:SparseMatrix ###intn=B.ncols;###n###B.n###507:9:507:25
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/neighbor/KDTree.java###/KDTree.java###smile.neighbor.KDTree###search:double[] Node HeapSelect<Neighbor<double[],E>> ###datum.index=index[idx];###i###index[idx]###317:21:317:46
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###classification:int T[] int[] BiFunction<T[],int[],M> ###returnClassificationValidation.of(of(x.length,k),x,y,trainer);###bags###of(x.length,k)###280:9:280:76
41a1037ae524c5045a657b1e40087a3c27233c04###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###classification:int T[] int[] BiFunction<T[],int[],M> ###returnClassificationValidation.of(of(x.length,k),x,y,trainer);###bags###of(x.length,k)###286:9:286:76
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/feature/WinsorScaler.java###/WinsorScaler.java###smile.feature.WinsorScaler###fit:DataFrame double double ###double[]lo=newdouble[schema.length()];###p###schema.length()###86:9:86:51
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/validation/CrossValidation.java###/CrossValidation.java###smile.validation.CrossValidation###regression:int T[] double[] BiFunction<T[],double[],M> ###returnRegressionValidation.of(of(x.length,k),x,y,trainer);###bags###of(x.length,k)###307:9:307:72
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/plot/src/main/java/smile/plot/BoxPlot.java###/BoxPlot.java###smile.plot.BoxPlot###plot:double[][] String[] ###double[]locations=newdouble[labels.length];###k###labels.length###251:9:251:56
4d27fd49a9dc6b5183d12e2579be20c3e5382971###/haifengl_smile/core/src/main/java/smile/feature/Scaler.java###/Scaler.java###smile.feature.Scaler###fit:DataFrame ###double[]lo=newdouble[schema.length()];###p###schema.length()###93:9:93:51
e84c4d47de736ca050552e541fbd91558c0e9d16###/haifengl_smile/math/src/main/java/smile/math/matrix/Matrix.java###/Matrix.java###smile.math.matrix.Matrix###adb:Transpose Matrix double[] Transpose Matrix ###C=newMatrix(A.m,A.n);###n###A.n###1715:13:1715:38
f0e2c074304f2f1ed658d70c043e8255d29bf8bc###/haifengl_smile/core/src/main/java/smile/manifold/LLE.java###/LLE.java###smile.manifold.LLE###LLE:double[][] int int ###C.add(p,q,(data[i][l]-data[N[i][p]][l])*(data[i][l]-data[N[i][q]][l]));###xiq###data[N[i][q]]###165:25:165:104
e84c4d47de736ca050552e541fbd91558c0e9d16###/haifengl_smile/math/src/main/java/smile/math/matrix/Matrix.java###/Matrix.java###smile.math.matrix.Matrix###adb:Transpose Matrix double[] Transpose Matrix ###C=newMatrix(A.m,A.n);###m###A.m###1715:13:1715:38
