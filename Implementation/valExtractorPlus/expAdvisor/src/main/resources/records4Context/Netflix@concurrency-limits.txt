b10f42e5eba7191227e05f5f9e25ceaeb1650ef0###/Netflix_concurrency-limits/concurrency-limits-core/src/main/java/com/netflix/concurrency/limits/strategy/SimpleStrategy.java###/SimpleStrategy.java###com.netflix.concurrency.limits.strategy.SimpleStrategy###tryAcquire:T ###if(busy.get()>=limit)###currentBusy###busy.get()###33:9:35:10
c422c2f20aa3a0d960b966f0b9473167ec7d928a###/Netflix_concurrency-limits/concurrency-limits-core/src/main/java/com/netflix/concurrency/limits/limit/AIMDLimit.java###/AIMDLimit.java###com.netflix.concurrency.limits.limit.AIMDLimit###_update:long long int boolean ###returnMath.max(1,Math.min(getLimit()-1,(int)(getLimit()*backoffRatio)));###currentLimit###getLimit()###59:13:59:93
22fc4cdebc194e5f93e4ea64492aa01540f822ca###/Netflix_concurrency-limits/concurrency-limits-core/src/main/java/com/netflix/concurrency/limits/limiter/DefaultLimiter.java###/DefaultLimiter.java###com.netflix.concurrency.limits.limiter.DefaultLimiter.acquire.of.new Listener###onSuccess:###nextUpdateTime=endTime+Math.min(Math.max(current.getCandidateRttNanos()*2,minWindowTime),maxWindowTime);###delta###Math.min(Math.max(current.getCandidateRttNanos()*2,minWindowTime),maxWindowTime)###184:33:184:145
1e8aaf0be07f4b5da67913b6fbdeb6d532a2b482###/Netflix_concurrency-limits/concurrency-limits-grpc/src/test/java/com/netflix/concurrency/limits/grpc/server/example/TestServer.java###/TestServer.java###com.netflix.concurrency.limits.grpc.server.example.TestServer.TestServer.handler.asyncUnaryCall.new UnaryMethod<String,String>###invoke:String StreamObserver<String> ###TimeUnit.MILLISECONDS.sleep(builder.segments.get(0).latency());###delay###builder.segments.get(0).latency()###129:21:129:84
33d1dfd5a2cf89782afad09b4517e2385be164dc###/Netflix_concurrency-limits/concurrency-limits-spectator/src/main/java/com/netflix/concurrency/limits/spectator/SpectatorMetricRegistry.java###/SpectatorMetricRegistry.java###com.netflix.concurrency.limits.spectator.SpectatorMetricRegistry###registerGauge:String Supplier<Number> String[] ###PolledMeter.using(registry).withId(suffixBaseId(id).withTags(tagNameValuePairs)).monitorValue(supplier,ignore->supplier.get().doubleValue());###metricId###suffixBaseId(id).withTags(tagNameValuePairs)###28:9:30:77
89bba59e1aed1c7ab4cda363e89e5e06da65820d###/Netflix_concurrency-limits/concurrency-limits-core/src/main/java/com/netflix/concurrency/limits/limiter/SimpleLimiter.java###/SimpleLimiter.java###com.netflix.concurrency.limits.limiter.SimpleLimiter###acquire:ContextT ###if(getInflight()>=getLimit())###currentInFlight###getInflight()###42:9:44:10
