15d86c54856310a00ca9c965d7092082dee61b3d###/resilience4j_resilience4j/resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/Resilience4jModule.java###/Resilience4jModule.java###io.github.resilience4j.ratpack.Resilience4jModule.Resilience4jService###onStart:StartEvent ###EndpointsConfigendpointsConfig=event.getRegistry().get(Resilience4jConfig.class).getEndpoints();###registry###event.getRegistry()###175:13:175:112
8afd7644a1c8338fcc7499102cf16ed041851eff###/resilience4j_resilience4j/resilience4j-bulkhead/src/main/java/io/github/resilience4j/bulkhead/adaptive/internal/MovingAverageLimitAdapter.java###/MovingAverageLimitAdapter.java###io.github.resilience4j.bulkhead.adaptive.internal.MovingAverageLimitAdapter###adaptConcurrencyLevel:Bulkhead ###finalBulkheadConfigupdatedConfig=BulkheadConfig.custom().maxConcurrentCalls(max((int)(bulkhead.getBulkheadConfig().getMaxConcurrentCalls()*CONCURRENCY_DROP_MUL),1)).maxWaitDuration(Duration.ofMillis(waitTimeMillis)).build();###newMaxConcurrentCalls###max((int)(bulkhead.getBulkheadConfig().getMaxConcurrentCalls()*CONCURRENCY_DROP_MUL),1)###116:4:119:15
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateSupplierAndReturnWithSuccess:###assertThat(supplier.get()).isEqualTo("Helloworld");###result###supplier.get()###67:9:67:61
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getWaitDurationInOpenState()).isEqualByComparingTo(Duration.ofSeconds(10L));###defaultWaitDuration###Duration.ofSeconds(10L)###140:3:140:124
2f71963df0b5c9a4ccb1103ef57b12aa43d0fa3d###/resilience4j_resilience4j/resilience4j-retry/src/test/java/io/github/resilience4j/retry/transformer/RetryTransformerTest.java###/RetryTransformerTest.java###io.github.resilience4j.retry.transformer.RetryTransformerTest###shouldReturnOnErrorUsingSingle:###Single.fromCallable(()->{thrownewIOException("BAM!");}).compose(RetryTransformer.of(retry)).test().assertError(IOException.class).assertNotComplete().assertSubscribed();###retryTransformer###RetryTransformer.of(retry)###61:9:66:37
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testTimeLimiterCommonConfig:###assertThat(timeLimiterConfigurationOnMissingBean.timeLimiterAspect(newTimeLimiterConfigurationProperties(),TimeLimiterRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()),null)).isNotNull();###spelResolver###newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext())###152:9:157:36
2f71963df0b5c9a4ccb1103ef57b12aa43d0fa3d###/resilience4j_resilience4j/resilience4j-retry/src/test/java/io/github/resilience4j/retry/transformer/RetryTransformerTest.java###/RetryTransformerTest.java###io.github.resilience4j.retry.transformer.RetryTransformerTest###shouldReturnOnErrorUsingFlowable:###Flowable.fromCallable(()->{thrownewIOException("BAM!");}).compose(RetryTransformer.of(retry)).test().assertError(IOException.class).assertNotComplete().assertSubscribed();###retryTransformer###RetryTransformer.of(retry)###291:9:296:37
348456f6c59cd75a17f789ef58a7d82b56763fcf###/resilience4j_resilience4j/src/test/java/io/github/robwin/cache/CacheTest.java###/CacheTest.java###io.github.robwin.cache.CacheTest###shouldInvokeDecoratedSupplier:###Function<String,String>cachedFunction=Cache.decorateSupplier(Cache.of(cache),()->"Helloworld");###cacheContext###Cache.of(cache)###61:9:61:112
1ca0416b8be3d39e91aa3f098092c6891f5fae76###/resilience4j_resilience4j/resilience4j-spring/src/main/java/io/github/resilience4j/fallback/FallbackMethod.java###/FallbackMethod.java###io.github.resilience4j.fallback.FallbackMethod###extractMethods:String Class<?>[] Class<?> Class<?> ###thrownewIllegalStateException("Youhavemorethatonefallbackmethodthatcoverthesameexceptiontype"+recoveryParams[recoveryParams.length-1].getName());###exception###recoveryParams[recoveryParams.length-1]###180:17:180:181
99f4eda52a2f683dc45b0ad757b32ac835d0d4be###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/internal/OpenState.java###/OpenState.java###io.github.resilience4j.circuitbreaker.internal.OpenState###OpenState:CircuitBreakerStateMachine CircuitBreakerMetrics ###this.retryAfterWaitDuration=Instant.now().plus(stateMachine.getCircuitBreakerConfig().getWaitDurationInOpenState());###waitDurationInOpenState###stateMachine.getCircuitBreakerConfig().getWaitDurationInOpenState()###32:9:32:127
2f71963df0b5c9a4ccb1103ef57b12aa43d0fa3d###/resilience4j_resilience4j/resilience4j-retry/src/test/java/io/github/resilience4j/retry/transformer/RetryTransformerTest.java###/RetryTransformerTest.java###io.github.resilience4j.retry.transformer.RetryTransformerTest###shouldReturnOnErrorUsingObservable:###Observable.fromCallable(()->{thrownewIOException("BAM!");}).compose(RetryTransformer.of(retry)).test().assertError(IOException.class).assertNotComplete().assertSubscribed();###retryTransformer###RetryTransformer.of(retry)###176:9:181:37
64073d9b63c0ba34cd78acce04568015a79a9e10###/resilience4j_resilience4j/resilience4j-feign/src/main/java/io/github/resilience4j/feign/DecoratorInvocationHandler.java###/DecoratorInvocationHandler.java###io.github.resilience4j.feign.DecoratorInvocationHandler###decorateMethodHandlers:Map<Method,MethodHandler> FeignDecorator Target<?> ###map.put(method,invocationDecorator.decorate(methodHandler::invoke,method,methodHandler,target));###decorated###invocationDecorator.decorate(methodHandler::invoke,method,methodHandler,target)###69:13:70:101
65b9122b708c68314bab24fc8e70f708fcfc4c75###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/internal/AdaptiveBulkheadTest.java###/AdaptiveBulkheadTest.java###io.github.resilience4j.bulkhead.internal.AdaptiveBulkheadTest###shouldDecorateCallableAndReturnWithSuccess:###assertThat(callable.call()).isEqualTo("Helloworld");###result###callable.call()###219:3:219:56
2f71963df0b5c9a4ccb1103ef57b12aa43d0fa3d###/resilience4j_resilience4j/resilience4j-retry/src/test/java/io/github/resilience4j/retry/transformer/RetryTransformerTest.java###/RetryTransformerTest.java###io.github.resilience4j.retry.transformer.RetryTransformerTest###shouldReturnOnCompleteUsingSingle:###Single.just(1).compose(RetryTransformer.of(retry)).test().assertValueCount(1).assertValues(1).assertComplete();###retryTransformer###RetryTransformer.of(retry)###41:9:46:35
257230d2fd8c9ca4985e968828a3af061f9b46e1###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/monitoring/events/CircuitBreakerHystrixStreamEventsTest.java###/CircuitBreakerHystrixStreamEventsTest.java###io.github.resilience4j.circuitbreaker.monitoring.events.CircuitBreakerHystrixStreamEventsTest###streamAllEvents:###assertThat(events.size()).isEqualTo(2);###noOfEvents###2###80:9:80:49
4115e13f27e02bc599a735482e5e8696c41f0cfc###/resilience4j_resilience4j/src/main/java/io/github/robwin/cache/CacheContext.java###/CacheContext.java###io.github.robwin.cache.CacheContext###getValueFromCache:K ###returnOption.of(cache.get(cacheKey));###result###cache.get(cacheKey)###65:17:65:55
d774e15c8a5c23b8c67076b1fbd0839aa577ad29###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java###/CircuitBreakerConfig.java###io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.Builder###waitDurationInOpenState:Duration ###if(waitDurationInOpenState.toMillis()<1)###waitDurationInMillis###waitDurationInOpenState.toMillis()###246:13:248:14
4387316387ba6e1776688ad0a212be90edd68fe4###/resilience4j_resilience4j/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/RateLimiter.java###/RateLimiter.java###io.github.resilience4j.ratelimiter.RateLimiter###decorateEitherSupplier:RateLimiter int Supplier<Either<? extends Exception,T>> ###returnEither.narrow(supplier.get());###result###supplier.get()###393:17:393:54
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateCheckedSupplierAndReturnWithSuccess:###assertThat(checkedSupplier.apply()).isEqualTo("Helloworld");###result###checkedSupplier.apply()###134:9:134:70
257230d2fd8c9ca4985e968828a3af061f9b46e1###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/monitoring/events/CircuitBreakerStreamEventsTest.java###/CircuitBreakerStreamEventsTest.java###io.github.resilience4j.circuitbreaker.monitoring.events.CircuitBreakerStreamEventsTest###streamEventsbyNameAndType:###assertThat(events.size()).isEqualTo(1);###noOfSuccessfulEvents###1###99:9:99:48
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testTimeLimiterCommonConfig:###assertThat(timeLimiterConfigurationOnMissingBean.timeLimiterAspect(newTimeLimiterConfigurationProperties(),TimeLimiterRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()),null)).isNotNull();###fallbackDecorators###newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator()))###152:9:157:36
f8f9d2299a1ffa02334b7f91661969a05236b397###/resilience4j_resilience4j/resilience4j-framework-common/src/main/java/io/github/resilience4j/common/ratelimiter/configuration/RateLimiterConfigurationProperties.java###/RateLimiterConfigurationProperties.java###io.github.resilience4j.common.ratelimiter.configuration.RateLimiterConfigurationProperties###findRateLimiterProperties:String ###returnOptional.ofNullable(instances.get(name));###instanceProperties###instances.get(name)###36:3:36:51
8afd7644a1c8338fcc7499102cf16ed041851eff###/resilience4j_resilience4j/resilience4j-bulkhead/src/main/java/io/github/resilience4j/bulkhead/adaptive/internal/MovingAverageLimitAdapter.java###/MovingAverageLimitAdapter.java###io.github.resilience4j.bulkhead.adaptive.internal.MovingAverageLimitAdapter###adaptConcurrencyLevel:Bulkhead ###finalBulkheadConfigupdatedConfig=BulkheadConfig.custom().maxConcurrentCalls(bulkhead.getBulkheadConfig().getMaxConcurrentCalls()+1).maxWaitDuration(Duration.ofMillis(waitTimeMillis)).build();###newMaxConcurrentCalls###bulkhead.getBulkheadConfig().getMaxConcurrentCalls()+1###110:4:113:15
14dce96ddb904b7f43945d95468f69414a70e5a9###/resilience4j_resilience4j/resilience4j-spring/src/main/java/io/github/resilience4j/fallback/FallbackMethod.java###/FallbackMethod.java###io.github.resilience4j.fallback.FallbackMethod###extractMethods:String Class<?>[] Class<?> Class<?> ###methods.put(recoveryParams[recoveryParams.length-1],method);###exception###recoveryParams[recoveryParams.length-1]###182:13:182:76
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadTest.java###/BulkheadTest.java###io.github.resilience4j.bulkhead.BulkheadTest###shouldDecorateCallableAndReturnWithSuccess:###assertThat(callable.call()).isEqualTo("Helloworld");###result###callable.call()###154:9:154:62
65b9122b708c68314bab24fc8e70f708fcfc4c75###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/internal/AdaptiveBulkheadTest.java###/AdaptiveBulkheadTest.java###io.github.resilience4j.bulkhead.internal.AdaptiveBulkheadTest###shouldDecorateCheckedSupplierAndReturnWithSuccess:###assertThat(checkedSupplier.apply()).isEqualTo("Helloworld");###result###checkedSupplier.apply()###164:3:164:64
5942bb245c8c32882337270f4d7c43552e4ae93b###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CallNotPermittedExceptionTest.java###/CallNotPermittedExceptionTest.java###io.github.resilience4j.circuitbreaker.CallNotPermittedExceptionTest###shouldReturnCorrectMessageWhenStateIsForcedOpen:###assertThat(createCallNotPermittedException(circuitBreaker).getMessage()).isEqualTo("CircuitBreaker'testName'isFORCED_OPENanddoesnotpermitfurthercalls");###callNotPermittedException###createCallNotPermittedException(circuitBreaker)###22:9:23:91
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testRateLimiterCommonConfig:###assertThat(rateLimiterConfigurationOnMissingBean.rateLimiterAspect(newRateLimiterConfigurationProperties(),RateLimiterRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()))).isNotNull();###spelResolver###newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext())###131:9:135:165
614f826cedec982f138b1f5913334c115ef2c648###/resilience4j_resilience4j/resilience4j-spring/src/test/java/io/github/resilience4j/timelimiter/configure/TimeLimiterRecoveryTest.java###/TimeLimiterRecoveryTest.java###io.github.resilience4j.timelimiter.configure.TimeLimiterRecoveryTest###testAsyncRecovery:###assertThat(testDummyService.async().toCompletableFuture().get(5,TimeUnit.SECONDS)).isEqualTo("recovered");###result###testDummyService.async().toCompletableFuture().get(5,TimeUnit.SECONDS)###25:9:25:116
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateCheckedFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###480:9:480:72
6e4cb8792be445e52b8f602681e59a53d007634e###/resilience4j_resilience4j/resilience4j-core/src/test/java/io/github/resilience4j/core/EventProcessorTest.java###/EventProcessorTest.java###io.github.resilience4j.core.EventProcessorTest###testOnEventConsumer:###eventProcessor.onEvent(event->logger.info(event.toString()));###eventConsumer###event->logger.info(event.toString())###42:9:42:72
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getFailureRateThreshold()).isEqualTo(60f);###defaultFailureRate###60f###139:3:139:90
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadTest.java###/BulkheadTest.java###io.github.resilience4j.bulkhead.BulkheadTest###shouldDecorateCheckedSupplierAndReturnWithSuccess:###assertThat(checkedSupplier.apply()).isEqualTo("Helloworld");###result###checkedSupplier.apply()###120:9:120:70
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testRetryCommonConfig:###assertThat(retryConfigurationOnMissingBean.retryAspect(newRetryConfigurationProperties(),RetryRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()),null)).isNotNull();###spelResolver###newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext())###113:9:117:171
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testBulkHeadCommonConfig:###assertThat(bulkheadConfigurationOnMissingBean.bulkheadAspect(newBulkheadConfigurationProperties(),ThreadPoolBulkheadRegistry.ofDefaults(),BulkheadRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()))).isNotNull();###spelResolver###newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext())###78:9:83:161
65b9122b708c68314bab24fc8e70f708fcfc4c75###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/internal/AdaptiveBulkheadTest.java###/AdaptiveBulkheadTest.java###io.github.resilience4j.bulkhead.internal.AdaptiveBulkheadTest###shouldDecorateFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###501:3:501:66
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testCircuitBreakerCommonConfig:###assertThat(circuitBreakerConfig.circuitBreakerAspect(CircuitBreakerRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()))).isNotNull();###spelResolver###newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext())###97:9:100:161
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-metrics/src/test/java/io/github/resilience4j/metrics/TimerTest.java###/TimerTest.java###io.github.resilience4j.metrics.TimerTest###shouldDecorateFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###297:9:297:72
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getWaitDurationInOpenState()).isEqualByComparingTo(Duration.ofSeconds(10L));###defaultWaitDuration###Duration.ofSeconds(10L)###147:3:147:124
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-all/src/test/java/io/github/resilience4j/decorators/DecoratorsTest.java###/DecoratorsTest.java###io.github.resilience4j.decorators.DecoratorsTest###testExecuteConsumer:###Decorators.ofConsumer((Stringinput)->helloWorldService.sayHelloWorldWithName(input)).withCircuitBreaker(circuitBreaker).withBulkhead(Bulkhead.ofDefaults("testName")).withRateLimiter(RateLimiter.ofDefaults("testName")).accept("test");###decoratedConsumer###Decorators.ofConsumer((Stringinput)->helloWorldService.sayHelloWorldWithName(input)).withCircuitBreaker(circuitBreaker).withBulkhead(Bulkhead.ofDefaults("testName")).withRateLimiter(RateLimiter.ofDefaults("testName"))###206:9:210:33
4bd36863b63a2fe476971aa415b486625fe019f5###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java###/CircuitBreakerConfig.java###io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.Builder###waitDurationInOpenState:Duration ###if(waitDurationInOpenState.toMillis()<1)###waitDurationInMillis###waitDurationInOpenState.toMillis()###252:13:254:14
5fadd467da8da4b2276dcccefc1ef9c4e0263533###/resilience4j_resilience4j/resilience4j-spring-boot/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java###/BulkheadEventsEndpoint.java###io.github.resilience4j.bulkhead.monitoring.endpoint.BulkheadEventsEndpoint###getBulkheadEvent:String ###returneventConsumerRegistry.getEventConsumer(bulkheadName).getBufferedEvents().filter(event->event.getBulkheadName().equals(bulkheadName));###eventConsumer###eventConsumerRegistry.getEventConsumer(bulkheadName)###119:9:121:80
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadTest.java###/BulkheadTest.java###io.github.resilience4j.bulkhead.BulkheadTest###shouldDecorateSupplierAndReturnWithSuccess:###assertThat(supplier.get()).isEqualTo("Helloworld");###result###supplier.get()###70:9:70:61
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadTest.java###/BulkheadTest.java###io.github.resilience4j.bulkhead.BulkheadTest###shouldDecorateFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###350:9:350:72
257230d2fd8c9ca4985e968828a3af061f9b46e1###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/monitoring/events/CircuitBreakerHystrixStreamEventsTest.java###/CircuitBreakerHystrixStreamEventsTest.java###io.github.resilience4j.circuitbreaker.monitoring.events.CircuitBreakerHystrixStreamEventsTest###streamEventsbyNameAndType:###assertThat(events.size()).isEqualTo(1);###noOfSuccessfulEvents###1###103:9:103:49
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getRingBufferSizeInHalfOpenState()).isEqualTo(10);###defaultRingBufferSizeInHalfOpenState###10###145:3:145:98
5942bb245c8c32882337270f4d7c43552e4ae93b###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CallNotPermittedExceptionTest.java###/CallNotPermittedExceptionTest.java###io.github.resilience4j.circuitbreaker.CallNotPermittedExceptionTest###shouldReturnCorrectMessageWhenStateIsOpen:###assertThat(createCallNotPermittedException(circuitBreaker).getMessage()).isEqualTo("CircuitBreaker'testName'isOPENanddoesnotpermitfurthercalls");###callNotPermittedException###createCallNotPermittedException(circuitBreaker)###14:9:15:95
b95643a5e74361f91cdb3baede267d0dd2969c34###/resilience4j_resilience4j/resilience4j-feign/src/main/java/io/github/resilience4j/feign/DecoratorInvocationHandler.java###/DecoratorInvocationHandler.java###io.github.resilience4j.feign.DecoratorInvocationHandler###decorateMethodHandlers:Map<Method,MethodHandler> FeignDecorator Target<?> ###map.put(method,invocationDecorator.decorate(methodHandler::invoke,method,methodHandler,target));###decorated###invocationDecorator.decorate(methodHandler::invoke,method,methodHandler,target)###67:13:67:113
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateCheckedConsumerAndReturnWithException:###assertThat(metrics.getNumberOfBufferedCalls()).isEqualTo(0);###numberOfBufferedCallsBefore###metrics.getNumberOfBufferedCalls()###406:9:406:69
f8f9d2299a1ffa02334b7f91661969a05236b397###/resilience4j_resilience4j/resilience4j-framework-common/src/main/java/io/github/resilience4j/common/circuitbreaker/configuration/CircuitBreakerConfigurationProperties.java###/CircuitBreakerConfigurationProperties.java###io.github.resilience4j.common.circuitbreaker.configuration.CircuitBreakerConfigurationProperties###findCircuitBreakerProperties:String ###returnOptional.ofNullable(instances.get(name));###instanceProperties###instances.get(name)###44:3:44:51
6e4cb8792be445e52b8f602681e59a53d007634e###/resilience4j_resilience4j/resilience4j-core/src/test/java/io/github/resilience4j/core/EventProcessorTest.java###/EventProcessorTest.java###io.github.resilience4j.core.EventProcessorTest###testOnEventAndRegisterConsumer:###eventProcessor.registerConsumer(Integer.class,event->logger.info(event.toString()));###eventConsumer###event->logger.info(event.toString())###64:9:64:96
348456f6c59cd75a17f789ef58a7d82b56763fcf###/resilience4j_resilience4j/src/test/java/io/github/robwin/cache/CacheTest.java###/CacheTest.java###io.github.robwin.cache.CacheTest###shouldInvokeDecoratedCheckedSupplier:###Try.CheckedFunction<String,String>cachedFunction=Cache.decorateCheckedSupplier(Cache.of(cache),()->"Helloworld");###cacheContext###Cache.of(cache)###51:9:51:130
dbb8b75f4c6d641dee27e495c21bd9ae09734c14###/resilience4j_resilience4j/resilience4j-vavr/src/main/java/io/github/resilience4j/ratelimiter/VavrRateLimiter.java###/VavrRateLimiter.java###io.github.resilience4j.ratelimiter.VavrRateLimiter###decorateEitherSupplier:RateLimiter int Supplier<Either<? extends Exception,T>> ###returnEither.narrow(supplier.get());###result###supplier.get()###205:17:205:54
bf6fed8d21e734155a85a8b8347a3eda5d52e81b###/resilience4j_resilience4j/resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/internal/AbstractTransformer.java###/AbstractTransformer.java###io.github.resilience4j.ratpack.internal.AbstractTransformer###handleRecovery:Downstream<? super T> Throwable ###down.success(recoverer.apply(throwable));###result###recoverer.apply(throwable)###32:17:32:58
257230d2fd8c9ca4985e968828a3af061f9b46e1###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/monitoring/events/CircuitBreakerHystrixStreamEventsTest.java###/CircuitBreakerHystrixStreamEventsTest.java###io.github.resilience4j.circuitbreaker.monitoring.events.CircuitBreakerHystrixStreamEventsTest###streamEventsbyName:###assertThat(events.size()).isEqualTo(2);###noOfEvents###2###92:9:92:49
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadEventPublisherTest.java###/BulkheadEventPublisherTest.java###io.github.resilience4j.bulkhead.BulkheadEventPublisherTest###shouldConsumeOnCallRejectedEvent:###Try.ofSupplier(Bulkhead.decorateSupplier(bulkhead,helloWorldService::returnHelloWorld));###supplier###Bulkhead.decorateSupplier(bulkhead,helloWorldService::returnHelloWorld)###91:9:91:97
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###436:9:436:72
5fadd467da8da4b2276dcccefc1ef9c4e0263533###/resilience4j_resilience4j/resilience4j-spring-boot2/src/main/java/io/github/resilience4j/bulkhead/monitoring/endpoint/BulkheadEventsEndpoint.java###/BulkheadEventsEndpoint.java###io.github.resilience4j.bulkhead.monitoring.endpoint.BulkheadEventsEndpoint###getBulkheadEvent:String ###returneventConsumerRegistry.getEventConsumer(bulkheadName).getBufferedEvents().filter(event->event.getBulkheadName().equals(bulkheadName));###eventConsumer###eventConsumerRegistry.getEventConsumer(bulkheadName)###67:9:69:80
49219fca21cd02b05cf3fc80ad9b9690ccd96009###/resilience4j_resilience4j/resilience4j-framework-common/src/test/java/io/github/resilience4j/common/retry/configuration/RetryConfigurationPropertiesTest.java###/RetryConfigurationPropertiesTest.java###io.github.resilience4j.common.retry.configuration.RetryConfigurationPropertiesTest###testCreatePropertiesWithUnknownConfig:###retryConfigurationProperties.createRetryConfig("backend",compositeRetryCustomizer())###customizer###compositeRetryCustomizer()###170:34:171:70
5a77b1d35192ba0ab56967dbaacee65289ffb0d4###/resilience4j_resilience4j/resilience4j-framework-common/src/main/java/io/github/resilience4j/common/circuitbreaker/configuration/CircuitBreakerConfigurationProperties.java###/CircuitBreakerConfigurationProperties.java###io.github.resilience4j.common.circuitbreaker.configuration.CircuitBreakerConfigurationProperties###configureEnableExponentialBackoff:InstanceProperties Builder Duration ###if(properties.getExponentialBackoffMultiplier()!=null)###backoffMultiplier###properties.getExponentialBackoffMultiplier()###191:9:197:10
aa0a19d0f12ccfeb4c6d30d24abef681f772bf5f###/resilience4j_resilience4j/resilience4j-ratpack/src/main/java/io/github/resilience4j/ratpack/Resilience4jModule.java###/Resilience4jModule.java###io.github.resilience4j.ratpack.Resilience4jModule.Resilience4jService###onStart:StartEvent ###EndpointsConfigendpointsConfig=event.getRegistry().get(Resilience4jConfig.class).getEndpoints();###registry###event.getRegistry()###170:13:170:112
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerTest.java###/CircuitBreakerTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerTest###shouldDecorateCallableAndReturnWithSuccess:###assertThat(callable.call()).isEqualTo("Helloworld");###result###callable.call()###181:9:181:62
beac782ba92b6db2e84e3d7f25348743dfd47883###/resilience4j_resilience4j/resilience4j-feign/src/test/java/io/github/resilience4j/feign/Resilience4jFeignCircuitBreakerTest.java###/Resilience4jFeignCircuitBreakerTest.java###io.github.resilience4j.feign.Resilience4jFeignCircuitBreakerTest###testFailedCalls:###assertTrue("ExpectedservicetothrowFeignException!",false);###exceptionThrown###false###83:13:83:76
6e4cb8792be445e52b8f602681e59a53d007634e###/resilience4j_resilience4j/resilience4j-core/src/test/java/io/github/resilience4j/core/EventProcessorTest.java###/EventProcessorTest.java###io.github.resilience4j.core.EventProcessorTest###testRegisterConsumer:###eventProcessor.registerConsumer(Integer.class,event->logger.info(event.toString()));###eventConsumer###event->logger.info(event.toString())###53:9:53:96
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getRingBufferSizeInHalfOpenState()).isEqualTo(10);###defaultRingBufferSizeInHalfOpenState###10###138:3:138:98
8777b5508a5a64820adfdaad35f33e6e381f33ab###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachineTest.java###/CircuitBreakerStateMachineTest.java###io.github.resilience4j.circuitbreaker.internal.CircuitBreakerStateMachineTest###testCircuitBreakerStateMachine:###assertThat(circuitBreaker.getMetrics().getFailureRate()).isEqualTo(-1f);###metrics###circuitBreaker.getMetrics()###56:9:56:81
aafaac4961ed329f91c4d249af51effc33928eff###/resilience4j_resilience4j/resilience4j-metrics/src/main/java/io/github/resilience4j/metrics/CircuitBreakerMetrics.java###/CircuitBreakerMetrics.java###io.github.resilience4j.metrics.CircuitBreakerMetrics###CircuitBreakerMetrics:Seq<CircuitBreaker> ###metricRegistry.register(name("resilience4j.circuitbreaker",circuitBreaker.getName(),"successful"),(Gauge<Integer>)()->circuitBreaker.getMetrics().getNumberOfSuccessfulCalls());###name###circuitBreaker.getName()###44:13:45:102
8f7d57318af39ea6af21bdc914a8825331e59527###/resilience4j_resilience4j/resilience4j-spring-boot/src/test/java/io/github/resilience4j/bulkhead/BulkheadAutoConfigurationTest.java###/BulkheadAutoConfigurationTest.java###io.github.resilience4j.bulkhead.BulkheadAutoConfigurationTest###testBulkheadAutoConfiguration:###await().atMost(2,TimeUnit.SECONDS).until(()->bulkhead.getMetrics().getAvailableConcurrentCalls()==1);###booleanCallable###()->bulkhead.getMetrics().getAvailableConcurrentCalls()==1###90:9:92:88
b5fbe81b4790f13f8094d2a3c6bc8a09f3132a0f###/resilience4j_resilience4j/src/main/java/io/github/robwin/retry/RetryContext.java###/RetryContext.java###io.github.robwin.retry.RetryContext###throwOrSleepAfterException:###throwlastException.get();###throwable###lastException.get()###54:13:54:39
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-bulkhead/src/test/java/io/github/resilience4j/bulkhead/BulkheadEventPublisherTest.java###/BulkheadEventPublisherTest.java###io.github.resilience4j.bulkhead.BulkheadEventPublisherTest###shouldConsumeOnCallFinishedEventWhenExecutionIsFinished:###Try.ofSupplier(Bulkhead.decorateSupplier(bulkhead,helloWorldService::returnHelloWorld));###supplier###Bulkhead.decorateSupplier(bulkhead,helloWorldService::returnHelloWorld)###107:9:107:97
c9a6fa2d036b41f17e300aa5d43885ea7e3fc9ab###/resilience4j_resilience4j/resilience4j-metrics/src/test/java/io/github/resilience4j/metrics/TimerTest.java###/TimerTest.java###io.github.resilience4j.metrics.TimerTest###shouldDecorateCheckedFunctionAndReturnWithSuccess:###assertThat(function.apply("Tom")).isEqualTo("HelloworldTom");###result###function.apply("Tom")###316:9:316:72
5fbc8aad4a40be63a4d0c15c755f0c47844324e9###/resilience4j_resilience4j/resilience4j-feign/src/main/java/io/github/resilience4j/feign/DecoratorInvocationHandler.java###/DecoratorInvocationHandler.java###io.github.resilience4j.feign.DecoratorInvocationHandler###decorateMethodHandlers:Map<Method,MethodHandler> FeignDecorator ###map.put(entry.getKey(),invocationDecorator.decorate(methodHandler::invoke));###method###entry.getKey()###51:13:51:90
b5fbe81b4790f13f8094d2a3c6bc8a09f3132a0f###/resilience4j_resilience4j/src/main/java/io/github/robwin/retry/RetryContext.java###/RetryContext.java###io.github.robwin.retry.RetryContext###throwOrSleepAfterRuntimeException:###throwlastRuntimeException.get();###throwable###lastRuntimeException.get()###63:13:63:46
c76354e6d2e30cca7e8af520ef94e05433178329###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/SpringBootCommonTest.java###/SpringBootCommonTest.java###io.github.resilience4j.SpringBootCommonTest###testRateLimiterCommonConfig:###assertThat(rateLimiterConfigurationOnMissingBean.rateLimiterAspect(newRateLimiterConfigurationProperties(),RateLimiterRegistry.ofDefaults(),Collections.emptyList(),newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator())),newDefaultSpelResolver(newSpelExpressionParser(),newStandardReflectionParameterNameDiscoverer(),newGenericApplicationContext()))).isNotNull();###fallbackDecorators###newFallbackDecorators(Arrays.asList(newCompletionStageFallbackDecorator()))###131:9:135:165
a55d9359951a7b24b3ef33b368d00c7cfcd5a85d###/resilience4j_resilience4j/resilience4j-spring-boot2/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerAutoConfigurationTest.java###/CircuitBreakerAutoConfigurationTest.java###io.github.resilience4j.circuitbreaker.CircuitBreakerAutoConfigurationTest###testCircuitBreakerAutoConfiguration:###assertThat(sharedA.getCircuitBreakerConfig().getFailureRateThreshold()).isEqualTo(60f);###defaultFailureRate###60f###146:3:146:90
a206bb9e19044c759162bdeaf374afeb43e192db###/resilience4j_resilience4j/resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/internal/CircuitBreakerStateMachineTest.java###/CircuitBreakerStateMachineTest.java###io.github.resilience4j.circuitbreaker.internal.CircuitBreakerStateMachineTest###testCircuitBreakerStateMachine:###assertThat(circuitBreaker.getMetrics().getFailureRate()).isEqualTo(-1f);###metrics###circuitBreaker.getMetrics()###151:9:151:81
133ee1ac7d84e0110663a8f944f82fbc3e4a1e9b###/resilience4j_resilience4j/resilience4j-feign/src/main/java/io/github/resilience4j/feign/DecoratorInvocationHandler.java###/DecoratorInvocationHandler.java###io.github.resilience4j.feign.DecoratorInvocationHandler###equals:Object ###obj=Proxy.getInvocationHandler(obj);###compareTo###obj###82:13:82:51
