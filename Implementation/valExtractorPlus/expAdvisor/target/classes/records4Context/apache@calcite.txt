d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreter.java###/EnumerableInterpreter.java###org.apache.calcite.adapter.enumerable.EnumerableInterpreter###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(factor);###cost###super.computeSelfCost(planner,mq)###78:5:78:66
fb8961528ff559e109612465cdef3e62eee852e2###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java###/DruidAdapterIT.java###org.apache.calcite.test.DruidAdapterIT###testFilterTimestamp:###sql(sql).returnsUnordered("C=13500").explainContains(explain);###q###sql(sql).returnsUnordered("C=13500")###1384:5:1386:35
b2e9e6cba1e2ce28368d1281f527a9e53f4628ca###/apache_calcite/core/src/main/java/org/apache/calcite/interpreter/TableFunctionScanNode.java###/TableFunctionScanNode.java###org.apache.calcite.interpreter.TableFunctionScanNode###TableFunctionScanNode:Compiler TableFunctionScan ###this.scalar=compiler.compile(ImmutableList.of(rel.getCall()),rel.getRowType());###rowType###rel.getRowType()###42:5:43:77
dff28d1ce49871a451c7ff3e740259441da7c72a###/apache_calcite/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java###/RelToSqlConverterTest.java###org.apache.calcite.rel.rel2sql.RelToSqlConverterTest###checkLiteral2:String String ###sql("VALUES"+expression).withHsqldb().ok("SELECT*\n"+"FROM(VALUES("+expected+"))ASt(EXPR$0)");###expectedHsqldb###"SELECT*\n"+"FROM(VALUES("+expected+"))ASt(EXPR$0)"###3200:5:3203:65
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java###/RexToLixTranslator.java###org.apache.calcite.adapter.enumerable.RexToLixTranslator###translateCondition:RexProgram JavaTypeFactory BlockBuilder InputGetter Function1<String,InputGetter> SqlConformance ###returntranslator.translate(program.getCondition(),RexImpTable.NullAs.FALSE);###condition###program.getCondition()###898:5:900:35
74e97780add051cb71a122075e5bcbceb40e889c###/apache_calcite/core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java###/SubstitutionVisitor.java###org.apache.calcite.plan.SubstitutionVisitor###unifyAggregates:MutableAggregate RexNode MutableAggregate ###aggregateCalls.add(AggregateCall.create(aggregateCall.getAggregation(),aggregateCall.isDistinct(),aggregateCall.isApproximate(),aggregateCall.ignoreNulls(),ImmutableList.of(newIndex),-1,aggregateCall.distinctKeys,aggregateCall.collation,aggregateCall.type,aggregateCall.name));###aggregation###aggregateCall.getAggregation()###1942:13:1948:42
fb8961528ff559e109612465cdef3e62eee852e2###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java###/DruidAdapterIT.java###org.apache.calcite.test.DruidAdapterIT###testFilterClauseWithMetricRefAndAggregates:###sql(sql).explainContains(expectedSubExplain).queryContains(newDruidChecker("\"queryType\":\"groupBy\"","{\"type\":\"bound\","+"\"dimension\":\"store_cost\",\"lower\":\"5\",\"lowerStrict\":true,"+"\"ordering\":\"numeric\"}")).returnsUnordered("EXPR$0=10.16;product_id=1554\n"+"EXPR$0=45.05;product_id=1556\n"+"EXPR$0=88.5;product_id=1555");###q###sql(sql).explainContains(expectedSubExplain).queryContains(newDruidChecker("\"queryType\":\"groupBy\"","{\"type\":\"bound\","+"\"dimension\":\"store_cost\",\"lower\":\"5\",\"lowerStrict\":true,"+"\"ordering\":\"numeric\"}"))###2677:5:2685:47
084d608c6adbbb82bcbdc2778439dfbeb6d6afdd###/apache_calcite/core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java###/TableFunctionImpl.java###org.apache.calcite.schema.impl.TableFunctionImpl###apply:List<? extends @Nullable Object> ###return(Table)requireNonNull(method.invoke(o,arguments.toArray()),()->"gotnullfrom"+method+"witharguments"+arguments);###table###method.invoke(o,arguments.toArray())###155:7:157:77
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java###/ArrayTable.java###org.apache.calcite.adapter.clone.ArrayTable.ObjectDictionary###freeze:ColumnLoader.ValueSet int[] ###Arrays.sort(codeValues,0,n);###nonNullCodeValues###codeValues###431:7:431:37
8b62f889cd6879af5c123b3a9a496b833aaca570###/apache_calcite/core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewRule.java###/MaterializedViewRule.java###org.apache.calcite.rel.rules.materialize.MaterializedViewRule###generateSwapTableColumnReferencesLineage:RexBuilder RelMetadataQuery RelNode BiMap<RelTableRef,RelTableRef> EquivalenceClasses List<RexNode> ###finalSet<RexNode>s=mq.getExpressionLineage(node,nodeExprs.get(i));###expr###nodeExprs.get(i)###1039:7:1039:78
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java###/AggregateNode.java###org.apache.calcite.interpreter.AggregateNode###AggregateNode:Compiler Aggregate ###builder.add(getAccumulator(aggregateCall,false));###accumulator###getAccumulator(aggregateCall,false)###88:7:88:57
fb8961528ff559e109612465cdef3e62eee852e2###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java###/DruidAdapter2IT.java###org.apache.calcite.test.DruidAdapter2IT###testFilterClauseWithMetricRefAndAggregates:###sql(sql).explainContains(expectedSubExplain).queryContains(newDruidChecker("\"queryType\":\"groupBy\"","{\"type\":\"bound\","+"\"dimension\":\"store_cost\",\"lower\":\"5\",\"lowerStrict\":true,"+"\"ordering\":\"numeric\"}")).returnsUnordered("EXPR$0=10.16;product_id=1554\n"+"EXPR$0=45.05;product_id=1556\n"+"EXPR$0=88.5;product_id=1555");###q###sql(sql).explainContains(expectedSubExplain).queryContains(newDruidChecker("\"queryType\":\"groupBy\"","{\"type\":\"bound\","+"\"dimension\":\"store_cost\",\"lower\":\"5\",\"lowerStrict\":true,"+"\"ordering\":\"numeric\"}"))###2405:5:2413:47
fb8961528ff559e109612465cdef3e62eee852e2###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java###/DruidAdapter2IT.java###org.apache.calcite.test.DruidAdapter2IT###testAggSameColumnMultipleTimes:###sql(sql,FOODMART).explainContains("BindableProject(PROD_ID1=[$0],PROD_ID2=[$0],S1=[$1],S2=[$1])\n"+"DruidQuery(table=[[foodmart,foodmart]],intervals=[[1900-01-09T00:00:00.000Z/"+"2992-01-10T00:00:00.000Z]],projects=[[$1,$90]],groups=[{0}],aggs=[[SUM($1)]],"+"sort0=[0],dir0=[ASC],fetch=[1])").queryContains(newDruidChecker("\"queryType\":\"groupBy\"")).returnsOrdered("PROD_ID1=1;PROD_ID2=1;S1=236.55;S2=236.55");###q###sql(sql,FOODMART).explainContains("BindableProject(PROD_ID1=[$0],PROD_ID2=[$0],S1=[$1],S2=[$1])\n"+"DruidQuery(table=[[foodmart,foodmart]],intervals=[[1900-01-09T00:00:00.000Z/"+"2992-01-10T00:00:00.000Z]],projects=[[$1,$90]],groups=[{0}],aggs=[[SUM($1)]],"+"sort0=[0],dir0=[ASC],fetch=[1])").queryContains(newDruidChecker("\"queryType\":\"groupBy\""))###3721:5:3728:73
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/materialize/Lattice.java###/Lattice.java###org.apache.calcite.materialize.Lattice###sql:ImmutableBitSet boolean List<Measure> ###dialect.quoteIdentifier(buf,node.alias);###alias###node.alias###329:7:329:48
61f8faf590aa2b832d8e11b7fa24fd1bd0c4a7a9###/apache_calcite/core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java###/SqlTypeFactoryImpl.java###org.apache.calcite.sql.type.SqlTypeFactoryImpl###leastRestrictiveSqlType:List<RelDataType> ###if(resultType.getSqlTypeName()==SqlTypeName.ROW)###sqlTypeName###resultType.getSqlTypeName()###290:9:292:10
b2e9e6cba1e2ce28368d1281f527a9e53f4628ca###/apache_calcite/core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java###/AggregateNode.java###org.apache.calcite.interpreter.AggregateNode###getAccumulator:AggregateCall boolean ###returnnewScalarAccumulatorDef(castNonNull(null),addScalar,castNonNull(null),rel.getInput().getRowType().getFieldCount(),stateSize,dataContext);###endScalar###castNonNull(null)###260:7:261:80
1f57bd4614ee0160de4f37bf6f000345dc194f85###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java###/ReflectiveSchema.java###org.apache.calcite.adapter.java.ReflectiveSchema###createTableMap:###table.statistic=Statistics.of(ImmutableList.copyOf(Iterables.concat(table.getStatistic().getReferentialConstraints(),Collections.singleton(rc))));###referentialConstraints###table.getStatistic().getReferentialConstraints()###132:9:136:50
3c7e2e3f3edbf60d93ebf7c8946d1177a02d3e87###/apache_calcite/core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java###/RelDecorrelator.java###org.apache.calcite.sql2rel.RelDecorrelator###decorrelate:RelNode ###finalHepProgramprogram2=HepProgram.builder().addRuleInstance(CoreRules.FILTER_INTO_JOIN.config.withRelBuilderFactory(f).toRule()).addRuleInstance(CoreRules.JOIN_CONDITION_PUSH.config.withRelBuilderFactory(f).toRule()).build();###builder###HepProgram.builder().addRuleInstance(CoreRules.FILTER_INTO_JOIN.config.withRelBuilderFactory(f).toRule()).addRuleInstance(CoreRules.JOIN_CONDITION_PUSH.config.withRelBuilderFactory(f).toRule())###283:7:292:20
60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4###/apache_calcite/core/src/main/java/org/apache/calcite/rex/RexSimplify.java###/RexSimplify.java###org.apache.calcite.rex.RexSimplify.SargCollector###accept_:RexNode List<RexNode> ###returnaccept1(((RexCall)e).operands.get(0),e.getKind(),rexBuilder.makeNullLiteral(e.getType()),newTerms);###arg###((RexCall)e).operands.get(0)###2546:9:2547:64
39d477d96b90eca05e5af1cec0f8ae0617226b5d###/apache_calcite/core/src/main/java/org/apache/calcite/sql/SqlSnapshot.java###/SqlSnapshot.java###org.apache.calcite.sql.SqlSnapshot.SqlSnapshotOperator###unparse:SqlWriter SqlCall int int ###snapshot.tableRef.unparse(writer,0,0);###tableRef###snapshot.tableRef###131:7:131:47
885a3da76cfd59171624dc569e83e93a5bdaffe3###/apache_calcite/core/src/test/java/org/apache/calcite/test/CalciteAssert.java###/CalciteAssert.java###org.apache.calcite.test.CalciteAssert###addSchema:SchemaPlus SchemaSpec ###ModelHandler.addFunctions(rootSchema,null,ImmutableList.of(),GeoFunctions.class.getName(),"*",true);###emptyPath###ImmutableList.of()###796:7:797:52
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/AggImpState.java###/AggImpState.java###org.apache.calcite.adapter.enumerable.AggImpState###AggImpState:int AggregateCall boolean ###this.implementor=RexImpTable.INSTANCE.get(call.getAggregation(),windowContext);###implementor###RexImpTable.INSTANCE.get(call.getAggregation(),windowContext)###39:5:40:72
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java###/EnumUtils.java###org.apache.calcite.adapter.enumerable.EnumUtils###generateCollatorExpression:SqlCollation ###finalintstrength=collation.getCollator().getStrength();###collator###collation.getCollator()###1113:5:1113:64
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java###/JdbcRules.java###org.apache.calcite.adapter.jdbc.JdbcRules.JdbcTableModify###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(.1);###cost###super.computeSelfCost(planner,mq)###1041:7:1041:64
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java###/StrictAggImplementor.java###org.apache.calcite.adapter.enumerable.StrictAggImplementor###implementAdd:AggContext AggAddContext ###conditions.add(translator.translate(add.rexFilterArgument(),RexImpTable.NullAs.FALSE));###filterArgument###add.rexFilterArgument()###123:7:125:42
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java###/JdbcRules.java###org.apache.calcite.adapter.jdbc.JdbcRules.JdbcProject###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(JdbcConvention.COST_MULTIPLIER);###cost###super.computeSelfCost(planner,mq)###575:7:576:55
8b62f889cd6879af5c123b3a9a496b833aaca570###/apache_calcite/core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewRule.java###/MaterializedViewRule.java###org.apache.calcite.rel.rules.materialize.MaterializedViewRule###generateSwapColumnTableReferencesLineage:RexBuilder RelMetadataQuery RelNode BiMap<RelTableRef,RelTableRef> EquivalenceClasses List<RexNode> ###finalSet<RexNode>s=mq.getExpressionLineage(node,nodeExprs.get(i));###expr###nodeExprs.get(i)###1073:7:1073:78
58adcae950666bde29687eab401a0d4b479a2071###/apache_calcite/core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java###/SqlValidatorUtil.java###org.apache.calcite.sql.validate.SqlValidatorUtil###containsMonotonic:SqlValidatorScope ###if(!ns.getMonotonicity(field).mayRepeat())###monotonicity###ns.getMonotonicity(field)###1077:9:1079:10
ec5b75a9f87d0380db8202d0201d5e5225206c84###/apache_calcite/core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java###/RelOptTableImpl.java###org.apache.calcite.prepare.RelOptTableImpl###getMonotonicity:String ###for(collation:table.getStatistic().getCollations())###collations###table.getStatistic().getCollations()###344:5:352:6
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java###/JdbcRules.java###org.apache.calcite.adapter.jdbc.JdbcRules.JdbcSort###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(0.9);###cost###super.computeSelfCost(planner,mq)###811:7:811:65
f277a2468805999a446e5bcd0ef70aa1e9550562###/apache_calcite/core/src/main/java/org/apache/calcite/sql/fun/SqlBasicAggFunction.java###/SqlBasicAggFunction.java###org.apache.calcite.sql.fun.SqlBasicAggFunction###deriveType:SqlValidator SqlValidatorScope SqlCall ###call=ReturnTypes.stripOrderBy(call);###strippedCall###call###94:7:94:45
836202c3f5aa04d56fa2fd2debc3c2024f92357e###/apache_calcite/core/src/main/java/org/apache/calcite/sql/SqlBinaryOperator.java###/SqlBinaryOperator.java###org.apache.calcite.sql.SqlBinaryOperator###getMonotonicity:SqlOperatorBinding ###switch(call.getOperandLiteralValue(1,BigDecimal.class).signum())###value###call.getOperandLiteralValue(1,BigDecimal.class)###161:11:174:12
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java###/EnumerableTableFunctionScan.java###org.apache.calcite.adapter.enumerable.EnumerableTableFunctionScan###defaultTableFunctionImplement:EnumerableRelImplementor Prefer ###if(getElementType()instanceofClass&&Object[].class.isAssignableFrom((Class)getElementType()))###elementType###getElementType()###113:12:118:6
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/materialize/Lattice.java###/Lattice.java###org.apache.calcite.materialize.Lattice.Builder###Builder:LatticeSpace CalciteSchema String ###populateAliases(((SqlSelect)parsed.sqlNode).getFrom(),aliases,null);###from###((SqlSelect)parsed.sqlNode).getFrom()###800:7:800:78
88d18185e6177c9df587bdd23dd4049f59adc2e4###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java###/EnumerableMergeJoin.java###org.apache.calcite.adapter.enumerable.EnumerableMergeJoin###passThroughTraits:RelTraitSet ###ImmutableBitSetrightKeySet=ImmutableBitSet.of(joinInfo.rightKeys).shift(left.getRowType().getFieldCount());###leftInputFieldCount###left.getRowType().getFieldCount()###141:5:142:51
b2e9e6cba1e2ce28368d1281f527a9e53f4628ca###/apache_calcite/core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java###/AggregateNode.java###org.apache.calcite.interpreter.AggregateNode###getAccumulator:AggregateCall boolean ###returnnewScalarAccumulatorDef(castNonNull(null),addScalar,castNonNull(null),rel.getInput().getRowType().getFieldCount(),stateSize,dataContext);###initScalar###castNonNull(null)###260:7:261:80
1721825eabfc4a0f82b33711b159359ee3c4341a###/apache_calcite/core/src/test/java/org/apache/calcite/test/InterpreterTest.java###/InterpreterTest.java###org.apache.calcite.test.InterpreterTest###assertInterpret:RelNode DataContext boolean String[] ###assertRows(interpreter,EnumUtils.toExternal(fieldTypes,DateTimeUtils.DEFAULT_ZONE),unordered,rows);###converter###EnumUtils.toExternal(fieldTypes,DateTimeUtils.DEFAULT_ZONE)###208:5:210:15
a5801bed0d0d74ad12b6742d64ffb07b4a05f674###/apache_calcite/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java###/SqlToRelConverter.java###org.apache.calcite.sql2rel.SqlToRelConverter.AggConverter###translateAgg:SqlCall SqlNode SqlNodeList boolean SqlCall ###finalSqlCallcall2=SqlStdOperatorTable.LISTAGG.createCall(call.getFunctionQuantifier(),call.getParserPosition(),operands2);###pos###call.getParserPosition()###5470:9:5473:28
1667b5197a69b818225180028874bb726c776e4b###/apache_calcite/testkit/src/main/java/org/apache/calcite/test/CalciteAssert.java###/CalciteAssert.java###org.apache.calcite.test.CalciteAssert.consistentResult.new Consumer<ResultSet>###accept:ResultSet ###if(!expected.equals(result))###matches###expected.equals(result)###387:13:391:14
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java###/EnumerableWindow.java###org.apache.calcite.adapter.enumerable.EnumerableWindow###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(EnumerableConvention.COST_MULTIPLIER);###cost###super.computeSelfCost(planner,mq)###82:5:83:59
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/interpreter/Bindables.java###/Bindables.java###org.apache.calcite.interpreter.Bindables.BindableWindow###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(BindableConvention.COST_MULTIPLIER);###cost###super.computeSelfCost(planner,mq)###826:7:827:59
5e9943aa1f51a97068fc37d53dea1d447570becc###/apache_calcite/core/src/main/java/org/apache/calcite/rex/RexSimplify.java###/RexSimplify.java###org.apache.calcite.rex.RexSimplify.SargCollector###fix:RexBuilder RexNode ###returnrexBuilder.makeCall(SqlStdOperatorTable.SEARCH,sargBuilder.ref,rexBuilder.makeSearchArgumentLiteral(sargBuilder.build(),term.getType()));###sarg###sargBuilder.build()###2718:9:2720:34
fb8961528ff559e109612465cdef3e62eee852e2###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java###/DruidAdapter2IT.java###org.apache.calcite.test.DruidAdapter2IT###testFilterTimestamp:###sql(sql).returnsUnordered("C=13500").explainContains(explain);###q###sql(sql).returnsUnordered("C=13500")###1124:5:1126:35
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java###/JdbcSchema.java###org.apache.calcite.adapter.jdbc.JdbcSchema###computeTables:###tableDefs=THREAD_METADATA.get().apply(catalog,schema);###threadMetadata###THREAD_METADATA.get()###252:9:252:66
3170c3f21687cf75045572844dcd51e19f41d40a###/apache_calcite/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java###/VolcanoPlannerTest.java###org.apache.calcite.plan.volcano.VolcanoPlannerTest###testSetMergeMatchSubsetRule:###planner.addRule(PhysSingleSubsetRule.config(buf).toRule());###config###PhysSingleSubsetRule.config(buf)###359:5:359:64
425f170a9b0589cb7f693e93cbcd044e9ab98c75###/apache_calcite/core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java###/SqlCastFunction.java###org.apache.calcite.sql.fun.SqlCastFunction###getMonotonicity:SqlOperatorBinding ###RelDataTypeFamilycastTo=call.getOperandType(1).getFamily();###castToType###call.getOperandType(1)###192:5:192:67
7353fa94bad8d5db48a217799d8c9567c9639a2f###/apache_calcite/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java###/RelMdUtil.java###org.apache.calcite.rel.metadata.RelMdUtil###getJoinRowCount:RelMetadataQuery Join RexNode ###returnNumberUtil.multiply(mq.getSelectivity(join.getLeft(),semiJoinSelectivity),mq.getRowCount(join.getLeft()));###selectivity###mq.getSelectivity(join.getLeft(),semiJoinSelectivity)###717:7:719:43
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java###/JdbcToEnumerableConverter.java###org.apache.calcite.adapter.jdbc.JdbcToEnumerableConverter###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(.1);###cost###super.computeSelfCost(planner,mq)###82:5:82:62
3170c3f21687cf75045572844dcd51e19f41d40a###/apache_calcite/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java###/VolcanoPlannerTest.java###org.apache.calcite.plan.volcano.VolcanoPlannerTest###testSubsetRule:###planner.addRule(SubsetRule.config(buf).toRule());###config###SubsetRule.config(buf)###276:5:276:54
93a2263f7af23be34171a6a1e4f5864a85691650###/apache_calcite/core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java###/ReduceExpressionsRule.java###org.apache.calcite.rel.rules.ReduceExpressionsRule.ReducibleExprLocator###addResult:RexNode ###addCasts.add(isUdf(parentCallTypeStack.peek()));###op###parentCallTypeStack.peek()###1031:9:1031:57
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/materialize/LatticeSpace.java###/LatticeSpace.java###org.apache.calcite.materialize.LatticeSpace###fieldName:LatticeTable int ###returntableExpressions.get(table).get(field-fieldCount).toString();###rexNodes###tableExpressions.get(table)###167:7:167:77
f813298b67923e665fffee7bf4d388dcad994cb1###/apache_calcite/core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java###/RelToSqlConverter.java###org.apache.calcite.rel.rel2sql.RelToSqlConverter###visit:Project ###sqlExpr=castNullType(sqlExpr,e.getRowType().getFieldList().get(selectList.size()));###field###e.getRowType().getFieldList().get(selectList.size())###342:11:343:69
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java###/JdbcRules.java###org.apache.calcite.adapter.jdbc.JdbcRules.JdbcUnion###computeSelfCost:RelOptPlanner RelMetadataQuery ###returnsuper.computeSelfCost(planner,mq).multiplyBy(.1);###cost###super.computeSelfCost(planner,mq)###863:7:863:64
425f170a9b0589cb7f693e93cbcd044e9ab98c75###/apache_calcite/core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java###/SqlCastFunction.java###org.apache.calcite.sql.fun.SqlCastFunction###getMonotonicity:SqlOperatorBinding ###RelDataTypeFamilycastFrom=call.getOperandType(0).getFamily();###castFromType###call.getOperandType(0)###191:5:191:69
d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a###/apache_calcite/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java###/RexImpTable.java###org.apache.calcite.adapter.enumerable.RexImpTable.CastImplementor###nullifyType:JavaTypeFactory RelDataType boolean ###finalPrimitiveprimitive=Primitive.ofBox(((RelDataTypeFactoryImpl.JavaType)type).getJavaClass());###javaClass###((RelDataTypeFactoryImpl.JavaType)type).getJavaClass()###2484:9:2485:70
ab19f98172848fe303a18173946c2def0b0d0312###/apache_calcite/druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java###/DruidAdapterIT.java###org.apache.calcite.test.DruidAdapterIT###testAggSameColumnMultipleTimes:###sql(sql,FOODMART).explainContains("BindableProject(PROD_ID1=[$0],PROD_ID2=[$0],S1=[$1],S2=[$1])\n"+"DruidQuery(table=[[foodmart,foodmart]],intervals=[[1900-01-09T00:00:00.000Z/"+"2992-01-10T00:00:00.000Z]],projects=[[$1,$90]],groups=[{0}],aggs=[[SUM($1)]],"+"sort0=[0],dir0=[ASC],fetch=[1])").queryContains(newDruidChecker("\"queryType\":\"groupBy\"")).returnsOrdered("PROD_ID1=1;PROD_ID2=1;S1=236.55;S2=236.55");###q###sql(sql,FOODMART).explainContains("BindableProject(PROD_ID1=[$0],PROD_ID2=[$0],S1=[$1],S2=[$1])\n"+"DruidQuery(table=[[foodmart,foodmart]],intervals=[[1900-01-09T00:00:00.000Z/"+"2992-01-10T00:00:00.000Z]],projects=[[$1,$90]],groups=[{0}],aggs=[[SUM($1)]],"+"sort0=[0],dir0=[ASC],fetch=[1])").queryContains(newDruidChecker("\"queryType\":\"groupBy\""))###4352:5:4359:73
8d21c3f2f0b75d788e70bbeea9746695f2fde552###/apache_calcite/core/src/main/java/org/apache/calcite/sql/fun/SqlRowOperator.java###/SqlRowOperator.java###org.apache.calcite.sql.fun.SqlRowOperator###inferReturnType:SqlOperatorBinding ###returnopBinding.getTypeFactory().createStructType(newAbstractList<Map.Entry<String,RelDataType>>(){@OverridepublicMap.Entry<String,RelDataType>get(intindex){returnPair.of(SqlUtil.deriveAliasFromOrdinal(index),opBinding.getOperandType(index));}@Overridepublicintsize(){returnopBinding.getOperandCount();}});###typeFactory###opBinding.getTypeFactory()###58:5:69:12
0c5bb1a345f39cab3eaa3b95a77c1e8831e667e1###/apache_calcite/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java###/SqlParserTest.java###org.apache.calcite.sql.parser.SqlParserTest.TesterImpl###parseStmtAndHandleEx:String UnaryOperator<SqlParser.ConfigBuilder> Consumer<SqlParser> ###finalSqlParserparser=getSqlParser(newSourceStringReader(sql),transform);###reader###newSourceStringReader(sql)###9104:7:9105:64
dc7bcc550caa5232b51200640c208769fb22787c###/apache_calcite/core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewRule.java###/MaterializedViewRule.java###org.apache.calcite.rel.rules.materialize.MaterializedViewRule###compensatePartial:Set<RelTableRef> EquivalenceClasses Set<RelTableRef> Multimap<RexTableInputRef,RexTableInputRef> ###RelDataTypeforeignKeyColumnType=tRef.getTable().getRowType().getFieldList().get(foreignKeyPos).getType();###foreignFields###tRef.getTable().getRowType().getFieldList()###726:13:727:90
