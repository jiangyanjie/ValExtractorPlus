9ffcabcee3d9c5466259fd780593c4f821811ca3###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp/AMQPObservableQueue.java###/AMQPObservableQueue.java###com.netflix.conductor.contribs.queue.amqp.AMQPObservableQueue###getOrCreateQueue:ConnectionType String boolean boolean boolean Map<String,Object> ###returnamqpConnection.getOrCreateChannel(connectionType,getSettings().getQueueOrExchangeName()).queueDeclare(name,isDurable,isExclusive,autoDelete,arguments);###chn###amqpConnection.getOrCreateChannel(connectionType,getSettings().getQueueOrExchangeName())###441:13:443:88
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/JoinTaskMapperTest.java###/JoinTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.JoinTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withRetryCount(0).withTaskId(taskId).build();###wd###newWorkflowDef()###30:9:37:26
926fbd6e9974410e2796b653503b4e0c5b8777a5###/Netflix_conductor/test-harness/src/test/java/com/netflix/conductor/tests/integration/End2EndGrpcTests.java###/End2EndGrpcTests.java###com.netflix.conductor.tests.integration.End2EndGrpcTests###testEphemeralWorkflowsWithEphemeralAndStoredTasks:###assertEquals(storedTaskDefinition,tasks.get(1).getTaskDefinition());###currentStoredTaskDefinition###tasks.get(1).getTaskDefinition()###313:9:313:78
4365eae554ab174e0ab5b7dc8ef37076941f3e67###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###retry:String ###taskToBeRescheduled(workflow,task)###finalWorkflow###workflow###606:26:606:61
609c4227ecf5dd313ec96b43a4f21dcf17eb56bc###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/TestWorkflowRepairService.java###/TestWorkflowRepairService.java###com.netflix.conductor.core.execution.TestWorkflowRepairService###verifyAndRepairSystemTask:###task.setTaskType("TEST_SYS_TASK");###taskType###"TEST_SYS_TASK"###87:9:87:43
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/SimpleTaskMapperTest.java###/SimpleTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.SimpleTaskMapperTest###getMappedTasksException:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withRetryTaskId(retriedTaskId).withTaskId(taskId).build();###wd###newWorkflowDef()###77:9:86:26
7f9f0fd105fabed238910d9aa351f6eb1dfadf77###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###updateTask:TaskResult ###workflowInstance.setOutput(task.getOutputData());###outputData###task.getOutputData()###468:17:468:66
d9e4c2bb7563d9792e0c1904c52f6329eb75e1fb###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/index/ElasticSearchDAO.java###/ElasticSearchDAO.java###com.netflix.conductor.dao.index.ElasticSearchDAO###update:String String Object ###client.update(request).actionGet();###response###client.update(request)###361:3:361:38
0871ef8d5d8f40db7a20fd6fbede3cc75fb9958a###/Netflix_conductor/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/MetadataServiceImpl.java###/MetadataServiceImpl.java###com.netflix.conductor.grpc.server.service.MetadataServiceImpl###getTask:MetadataServicePb.GetTaskRequest StreamObserver<TaskDefPb.TaskDef> ###response.onNext(protoMapper.toProto(def));###task###protoMapper.toProto(def)###88:13:88:55
21a4d0686e4adb6572dc718348ff01f8ec772a7b###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###insertOrUpdateWorkflow:Workflow boolean ###dynoClient.set(nsKey(WORKFLOW,workflow.getWorkflowId()),toJson(workflow));###payload###toJson(workflow)###479:3:479:79
aac937f42029ffc96e279d154da608f2d6b57641###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java###/Event.java###com.netflix.conductor.core.execution.tasks.Event###cancel:Workflow Task WorkflowExecutor ###getQueue(workflow,task).ack(Collections.singletonList(message));###queue###getQueue(workflow,task)###97:9:97:74
15f30e9475c303ceb5995bd1b31548ae5ea27d10###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/TestWorkflowExecutor.java###/TestWorkflowExecutor.java###com.netflix.conductor.core.execution.TestWorkflowExecutor###testScheduleTask:###doAnswer(invocation->{StringqueueName=invocation.getArgumentAt(0,String.class);System.out.println(queueName);queuedTaskCount.incrementAndGet();returnnull;}).when(queueDAO).push(any(),any(),anyInt());###answer###invocation->{StringqueueName=invocation.getArgumentAt(0,String.class);System.out.println(queueName);queuedTaskCount.incrementAndGet();returnnull;}###233:9:239:47
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/UserDefinedTaskMapperTest.java###/UserDefinedTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.UserDefinedTaskMapperTest###getMappedTasksException:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withRetryTaskId(retriedTaskId).withTaskId(taskId).build();###workflowDef###newWorkflowDef()###81:9:89:26
68af6dcbc01543ff814e5fde42758ab2bede545e###/Netflix_conductor/cassandra-persistence/src/main/java/com/netflix/conductor/dao/cassandra/CassandraExecutionDAO.java###/CassandraExecutionDAO.java###com.netflix.conductor.dao.cassandra.CassandraExecutionDAO###updateTask:Task ###session.execute(insertTaskStatement.bind(UUID.fromString(task.getWorkflowInstanceId()),shardId,task.getTaskId(),toJson(task)));###taskPayload###toJson(task)###153:13:153:143
f3d7aa8b93eaa0bc28f502d1c43a565a6dfb0ac2###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/json/JsonTransform.java###/JsonTransform.java###com.netflix.conductor.contribs.json.JsonTransform###start:Workflow Task WorkflowExecutor ###task.getOutputData().put("result",result);###taskOutput###task.getOutputData()###70:4:70:47
17abc493893bf6cf1066c25a9d61fa2f64ca1535###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###createTasks:List<Task> ###dynoClient.sadd(nsKey(WORKFLOW_TO_TASKS,task.getWorkflowInstanceId()),task.getTaskId());###workflowToTaskKey###nsKey(WORKFLOW_TO_TASKS,task.getWorkflowInstanceId())###149:4:149:94
68af6dcbc01543ff814e5fde42758ab2bede545e###/Netflix_conductor/cassandra-persistence/src/main/java/com/netflix/conductor/dao/cassandra/CassandraExecutionDAO.java###/CassandraExecutionDAO.java###com.netflix.conductor.dao.cassandra.CassandraExecutionDAO###updateWorkflow:Workflow ###session.execute(updateWorkflowStatement.bind(toJson(workflow),UUID.fromString(workflow.getWorkflowId())));###payload###toJson(workflow)###265:13:265:120
9ffcabcee3d9c5466259fd780593c4f821811ca3###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp/AMQPObservableQueue.java###/AMQPObservableQueue.java###com.netflix.conductor.contribs.queue.amqp.AMQPObservableQueue###publishMessage:Message String String ###amqpConnection.getOrCreateChannel(ConnectionType.PUBLISHER,getSettings().getQueueOrExchangeName()).basicPublish(exchange,routingKey,buildBasicProperties(message,settings),payload.getBytes(settings.getContentEncoding()));###chn###amqpConnection.getOrCreateChannel(ConnectionType.PUBLISHER,getSettings().getQueueOrExchangeName())###202:13:209:78
0fac73240774e8307a145c5f98d6d8fab5c97cfb###/Netflix_conductor/common/src/test/java/com/netflix/conductor/common/tasks/TaskTest.java###/TaskTest.java###com.netflix.conductor.common.tasks.TaskTest###testTaskQueueWaitTime:###task.setScheduledTime(System.currentTimeMillis()-30_000);###currentTimeMillis###System.currentTimeMillis()###81:9:81:68
0871ef8d5d8f40db7a20fd6fbede3cc75fb9958a###/Netflix_conductor/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/MetadataServiceImpl.java###/MetadataServiceImpl.java###com.netflix.conductor.grpc.server.service.MetadataServiceImpl###getWorkflow:MetadataServicePb.GetWorkflowRequest StreamObserver<WorkflowDefPb.WorkflowDef> ###response.onNext(protoMapper.toProto(def));###workflow###protoMapper.toProto(def)###60:13:60:55
68af6dcbc01543ff814e5fde42758ab2bede545e###/Netflix_conductor/cassandra-persistence/src/main/java/com/netflix/conductor/dao/cassandra/CassandraExecutionDAO.java###/CassandraExecutionDAO.java###com.netflix.conductor.dao.cassandra.CassandraExecutionDAO###getWorkflow:String boolean ###if(ENTITY_TYPE_TASK.equals(row.getString(ENTITY_KEY)))###entityKey###row.getString(ENTITY_KEY)###320:28:325:22
ae403c9a0a43b7a525dcf0012fc9b080cf44ba8e###/Netflix_conductor/jersey/src/main/java/com/netflix/conductor/server/resources/ApplicationExceptionMapper.java###/ApplicationExceptionMapper.java###com.netflix.conductor.server.resources.ApplicationExceptionMapper###toResponse:ApplicationException ###returnResponse.status(e.getHttpStatusCode()).entity(entity).type(mediaType).build();###responseBuilder###Response.status(e.getHttpStatusCode())###81:3:81:88
6e6195b4b8bfc5788a66f0a33de61a1eac46a470###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/ForkJoinTaskMapper.java###/ForkJoinTaskMapper.java###com.netflix.conductor.core.execution.mapper.ForkJoinTaskMapper###getMappedTasks:TaskMapperContext ###forkTask.setStartTime(System.currentTimeMillis());###epochMillis###System.currentTimeMillis()###76:9:76:59
586dc3e577869d49ad93709ca528feb9c4db3d70###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###executeSystemTask:WorkflowSystemTask String long ###if(task.getStatus()==SCHEDULED||!systemTask.isAsyncComplete(task))###isTaskAsyncComplete###systemTask.isAsyncComplete(task)###1436:13:1439:14
580b56a05f70f21d2371b2c2bc48cb4944fb96ce###/Netflix_conductor/es6-persistence/src/main/java/com/netflix/conductor/elasticsearch/ElasticSearchRestClientProvider.java###/ElasticSearchRestClientProvider.java###com.netflix.conductor.elasticsearch.ElasticSearchRestClientProvider###get:###returnRestClient.builder(convertToHttpHosts(configuration.getURIs())).build();###restClientBuilder###RestClient.builder(convertToHttpHosts(configuration.getURIs()))###35:9:35:88
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/es5-persistence/src/main/java/com/netflix/conductor/dao/es5/index/ElasticSearchDAOV5.java###/ElasticSearchDAOV5.java###com.netflix.conductor.dao.es5.index.ElasticSearchDAOV5###getTaskExecutionLogs:String ###finalSearchRequestBuildersrb=elasticSearchClient.prepareSearch(logIndexPrefix+"*").setQuery(fq).setTypes(LOG_DOC_TYPE).addSort(SortBuilders.fieldSort("createdTime").order(SortOrder.ASC));###sortBuilder###SortBuilders.fieldSort("createdTime").order(SortOrder.ASC)###322:4:322:197
c9aeffc470a7c973973e57af73b6149aac6015ff###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/events/ActionProcessor.java###/ActionProcessor.java###com.netflix.conductor.core.events.ActionProcessor###execute:Action String ###Map<String,Object>op=startWorkflow(action,payload);###jsonObj###payload###65:4:65:60
9ffcabcee3d9c5466259fd780593c4f821811ca3###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp/AMQPObservableQueue.java###/AMQPObservableQueue.java###com.netflix.conductor.contribs.queue.amqp.AMQPObservableQueue###getOrCreateExchange:ConnectionType String String boolean boolean Map<String,Object> ###returnamqpConnection.getOrCreateChannel(connectionType,getSettings().getQueueOrExchangeName()).exchangeDeclare(name,type,isDurable,autoDelete,arguments);###chn###amqpConnection.getOrCreateChannel(connectionType,getSettings().getQueueOrExchangeName())###407:13:409:84
4e0db4b8212f5d07bc71bb0d5b3a995389af6fc6###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/ParametersUtils.java###/ParametersUtils.java###com.netflix.conductor.core.execution.ParametersUtils###replace:Map<String,Object> Object ###DocumentContextio=JsonPath.parse(json,option);###doc###json###80:3:80:53
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/UserDefinedTaskMapperTest.java###/UserDefinedTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.UserDefinedTaskMapperTest###getMappedTasksException:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withRetryTaskId(retriedTaskId).withTaskId(taskId).build();###workflow###newWorkflow()###81:9:89:26
51ee7aa70ebcfb5954008e87b671e1f5a73b3e0b###/Netflix_conductor/test-harness/src/test/java/com/netflix/conductor/tests/integration/WorkflowServiceTest.java###/WorkflowServiceTest.java###com.netflix.conductor.tests.integration.WorkflowServiceTest###testForkJoin:###t3=workflowExecutionService.poll("junit_task_3","test");###task3###workflowExecutionService.poll("junit_task_3","test")###383:9:383:68
91adde7df786748788aa697ee931a3d7e4512626###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/mapper/ForkJoinTaskMapper.java###/ForkJoinTaskMapper.java###com.netflix.conductor.core.execution.mapper.ForkJoinTaskMapper###getMappedTasks:TaskMapperContext ###forkTask.setStartTime(System.currentTimeMillis());###epochMillis###System.currentTimeMillis()###83:9:83:59
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/WaitTaskMapperTest.java###/WaitTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.WaitTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withTaskId(taskId).build();###workflowDef###newWorkflowDef()###31:9:39:26
293adc37edb038067a10e044aa5673df873f0fe8###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###insertOrUpdateWorkflow:Workflow boolean ###dynoClient.set(nsKey(WORKFLOW,workflow.getWorkflowId()),toJson(workflow));###payload###toJson(workflow)###474:3:474:79
9ffcabcee3d9c5466259fd780593c4f821811ca3###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp/AMQPObservableQueue.java###/AMQPObservableQueue.java###com.netflix.conductor.contribs.queue.amqp.AMQPObservableQueue###ack:List<Message> ###amqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName()).basicAck(Long.parseLong(message.getReceipt()),false);###chn###amqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName())###169:17:172:80
95f331e6e5702e1c4e156685646b4fceeb319c0d###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###getTask:String ###returnOptional.ofNullable(dynoClient.get(nsKey(TASK,taskId))).map(jsonString->readValue(jsonString,Task.class)).orElse(null);###key###nsKey(TASK,taskId)###276:3:278:19
012f70e4c24b496aeb5f458d6687c956fc83c8d3###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacadeTest.java###/ExecutionDAOFacadeTest.java###com.netflix.conductor.core.orchestration.ExecutionDAOFacadeTest###testRemoveWorkflow:###when(executionDAO.getWorkflow(anyString(),anyBoolean())).thenReturn(newWorkflow());###workflow###newWorkflow()###101:9:101:94
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/SimpleTaskMapperTest.java###/SimpleTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.SimpleTaskMapperTest###getMappedTasksException:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withRetryTaskId(retriedTaskId).withTaskId(taskId).build();###w###newWorkflow()###77:9:86:26
21a4d0686e4adb6572dc718348ff01f8ec772a7b###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisMetadataDAO.java###/RedisMetadataDAO.java###com.netflix.conductor.dao.dynomite.RedisMetadataDAO###insertOrUpdateTaskDef:TaskDef ###dynoClient.hset(nsKey(ALL_TASK_DEFS),taskDef.getName(),toJson(taskDef));###payload###toJson(taskDef)###84:3:84:77
18b12c8a1d4c5c3e921c56deaf2f08d1b215501a###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/index/ElasticSearchDAO.java###/ElasticSearchDAO.java###com.netflix.conductor.dao.index.ElasticSearchDAO###update:String String Object ###client.update(request).actionGet();###response###client.update(request)###359:4:359:39
ce124b10aba761279f2fa73a6fec7f36f5aa2a93###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###executeSystemTask:WorkflowSystemTask String int ###queueDAO.remove(QueueUtils.getQueueName(task),task.getTaskId());###queueName###QueueUtils.getQueueName(task)###1174:17:1174:82
401df117725923af03ee7bc896882061afd3fe7c###/Netflix_conductor/server/src/main/java/com/netflix/conductor/server/Main.java###/Main.java###com.netflix.conductor.server.Main###main:String[] ###ConductorServerserver=newConductorServer(newConductorConfig());###config###newConductorConfig()###34:3:34:71
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/JoinTaskMapperTest.java###/JoinTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.JoinTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withRetryCount(0).withTaskId(taskId).build();###w###newWorkflow()###30:9:37:26
21a4d0686e4adb6572dc718348ff01f8ec772a7b###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###updateTask:Task ###dynoClient.set(nsKey(TASK,task.getTaskId()),toJson(task));###payload###toJson(task)###206:3:206:63
17abc493893bf6cf1066c25a9d61fa2f64ca1535###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###updateTask:TaskResult ###queue.remove(QueueUtils.getQueueName(task),result.getTaskId());###taskQueueName###QueueUtils.getQueueName(task)###423:13:423:77
93e8ac62c5c4ddc9f146c4bc2d379dbb2549d7f5###/Netflix_conductor/server/src/main/java/com/netflix/conductor/server/ConductorServer.java###/ConductorServer.java###com.netflix.conductor.server.ConductorServer###init:String List<Host> ###System.setProperty("workflow.elasticsearch.url","localhost:9300");###esUrl###"localhost:9300"###169:6:169:73
6161a51f646cb5bbd3490aeae314bfd9f0dc921d###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java###/DeciderService.java###com.netflix.conductor.core.execution.DeciderService###getTasksToBeScheduled:WorkflowDef Workflow WorkflowTask int long String String ###Taskst=SystemTask.decisionTask(workflow.getWorkflowId(),IDGenerator.generate(),workflow.getCorrelationId(),taskToSchedule.getTaskReferenceName(),input,caseValue,Arrays.asList(caseValue));###taskId###IDGenerator.generate()###384:5:385:119
5042bb085132ec1c5a6c7d60ce076421ee453948###/Netflix_conductor/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java###/TaskClient.java###com.netflix.conductor.client.grpc.TaskClient###ack:String String ###returnstub.ackTask(TaskServicePb.AckTaskRequest.newBuilder().setTaskId(taskId).setWorkerId(workerId).build()).getAck();###request###TaskServicePb.AckTaskRequest.newBuilder()###142:9:147:20
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/WaitTaskMapperTest.java###/WaitTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.WaitTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToSchedule).withTaskInput(newHashMap<>()).withRetryCount(0).withTaskId(taskId).build();###workflow###newWorkflow()###31:9:39:26
1ac4b15f14878e412bd80136b5fbe832b78ef948###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/events/EventQueues.java###/EventQueues.java###com.netflix.conductor.core.events.EventQueues###getQueue:String boolean ###Stringtype=event.substring(0,event.indexOf(':'));###index###event.indexOf(':')###60:3:60:56
528a33377c8f336c6cae8b8b35b8803afcd3d2ec###/Netflix_conductor/protogen/src/main/java/com/netflix/conductor/protogen/types/MessageType.java###/MessageType.java###com.netflix.conductor.protogen.types.MessageType###mapToProto:String MethodSpec.Builder ###method.addStatement("to.$L(toProto(from.$L()))",fieldMethod("set",field),fieldMethod("get",field));###getter###fieldMethod("get",field)###38:9:39:71
293285f58e60044ef0147622f7b8fe1939f1ba32###/Netflix_conductor/server/src/main/java/com/netflix/conductor/server/ServerModule.java###/ServerModule.java###com.netflix.conductor.server.ServerModule###configure:###DynoShardSupplierss=newDynoShardSupplier(hs,region,localRack);###localDC###localRack###78:3:78:71
5042bb085132ec1c5a6c7d60ce076421ee453948###/Netflix_conductor/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java###/MetadataClient.java###com.netflix.conductor.client.grpc.MetadataClient###getWorkflowDef:String Integer ###WorkflowDefPb.WorkflowDefworkflowDef=stub.getWorkflow(MetadataServicePb.GetWorkflowRequest.newBuilder().setName(name).setVersion(version).build());###request###MetadataServicePb.GetWorkflowRequest.newBuilder().setName(name)###58:9:63:11
95f331e6e5702e1c4e156685646b4fceeb319c0d###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###insertOrUpdateWorkflow:Workflow boolean ###dynoClient.set(nsKey(WORKFLOW,workflow.getWorkflowId()),toJson(workflow));###payload###toJson(workflow)###478:3:478:79
f08308124ae5ddd070df13eac69d7cc782748be0###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###updateTask:TaskResult ###workflowInstance.setOutput(task.getOutputData());###outputData###task.getOutputData()###465:17:465:66
21a4d0686e4adb6572dc718348ff01f8ec772a7b###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###getTask:String ###returnOptional.ofNullable(dynoClient.get(nsKey(TASK,taskId))).map(jsonString->readValue(jsonString,Task.class)).orElse(null);###key###nsKey(TASK,taskId)###277:3:279:19
f5e9e10d6c897057359a262f78b476ae9fefc099###/Netflix_conductor/es5-persistence/src/main/java/com/netflix/conductor/elasticsearch/ElasticSearchRestClientProvider.java###/ElasticSearchRestClientProvider.java###com.netflix.conductor.elasticsearch.ElasticSearchRestClientProvider###get:###returnRestClient.builder(convertToHttpHosts(configuration.getURIs())).build();###restClientBuilder###RestClient.builder(convertToHttpHosts(configuration.getURIs()))###33:9:33:88
3601347bdad965364c90387b16c0a379e0d2a6d1###/Netflix_conductor/es5-persistence/src/main/java/com/netflix/conductor/dao/es5/index/ElasticSearchDAOV5.java###/ElasticSearchDAOV5.java###com.netflix.conductor.dao.es5.index.ElasticSearchDAOV5###getTaskExecutionLogs:String ###finalSearchRequestBuildersrb=elasticSearchClient.prepareSearch(logIndexPrefix+"*").setQuery(fq).setTypes(LOG_DOC_TYPE).addSort(SortBuilders.fieldSort("createdTime").order(SortOrder.ASC));###sortBuilder###SortBuilders.fieldSort("createdTime").order(SortOrder.ASC)###327:13:330:52
4a07ab3307f8ded8bd9b0169063cfe6327e73b18###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/events/EventQueues.java###/EventQueues.java###com.netflix.conductor.core.events.EventQueues###getQueue:String boolean ###Stringtype=event.substring(0,event.indexOf(':'));###index###event.indexOf(':')###62:3:62:56
989a881b730e609c412ec4a9daec01b2c54d2008###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###retry:String ###taskToBeRescheduled(workflow,task)###finalWorkflow###workflow###594:30:594:65
9ffb733731d0304fee359ca043f08580e348a0c9###/Netflix_conductor/test-harness/src/test/java/com/netflix/conductor/tests/integration/WorkflowServiceTest.java###/WorkflowServiceTest.java###com.netflix.conductor.tests.integration.WorkflowServiceTest###testRetry:###input.put("param1","p1value");###inputParam1###"p1value"###2669:9:2669:41
0425b9c8c66512b207ef9f6945bbc4676ff253f7###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/events/EventProcessor.java###/EventProcessor.java###com.netflix.conductor.core.events.EventProcessor###handle:ObservableQueue Message ###logger.info("GotMessage:"+msg.getPayload());###payload###msg.getPayload()###111:4:111:52
e6f229da6321e418df5a575f59d27256a251a0b9###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/TestDeciderOutcomes.java###/TestDeciderOutcomes.java###com.netflix.conductor.core.execution.TestDeciderOutcomes###init:###when(metadataDAO.getTaskDef(anyString())).thenReturn(newTaskDef());###taskDef###newTaskDef()###84:9:84:77
fc3a2096e0c16cbcb051d387f1f2200461c74140###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/Event.java###/Event.java###com.netflix.conductor.core.execution.tasks.Event###start:Workflow Task WorkflowExecutor ###getQueue(workflow,task).publish(Arrays.asList(message));###queue###getQueue(workflow,task)###54:3:54:60
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/EventTaskMapperTest.java###/EventTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.EventTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToBeScheduled).withRetryCount(0).withTaskId(taskId).build();###wd###newWorkflowDef()###41:9:48:26
a1444ca90761794616a3abfb6b121459e63a769c###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###executeSystemTask:WorkflowSystemTask String long ###if(task.getStatus()==SCHEDULED||!systemTask.isAsyncComplete(task))###isTaskAsyncComplete###systemTask.isAsyncComplete(task)###1437:13:1440:14
17abc493893bf6cf1066c25a9d61fa2f64ca1535###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java###/WorkflowExecutor.java###com.netflix.conductor.core.execution.WorkflowExecutor###addTaskToQueue:Task ###queue.remove(QueueUtils.getQueueName(task),task.getTaskId());###taskQueueName###QueueUtils.getQueueName(task)###652:9:652:71
95f331e6e5702e1c4e156685646b4fceeb319c0d###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisExecutionDAO.java###/RedisExecutionDAO.java###com.netflix.conductor.dao.dynomite.RedisExecutionDAO###updateTask:Task ###dynoClient.set(nsKey(TASK,task.getTaskId()),toJson(task));###payload###toJson(task)###205:3:205:63
15f30e9475c303ceb5995bd1b31548ae5ea27d10###/Netflix_conductor/mysql-persistence/src/test/java/com/netflix/conductor/dao/mysql/MySQLQueueDAOTest.java###/MySQLQueueDAOTest.java###com.netflix.conductor.dao.mysql.MySQLQueueDAOTest###pollMessagesTest:###messages.add(newMessage("testmsg-"+i,payload,""));###m###newMessage("testmsg-"+i,payload,"")###134:4:134:59
09d31ed069e9e4858e6d0317b10039f5c3345b3e###/Netflix_conductor/protogen/src/main/java/com/netflix/conductor/protogen/ProtoGen.java###/ProtoGen.java###com.netflix.conductor.protogen.ProtoGen###writeMapper:String ###file.getMessage().generateJavaMapper(protoMapper);###elem###file.getMessage()###70:13:70:63
a21a282bfba3bbc93573c08a79f2b3da99fa0749###/Netflix_conductor/core/src/test/java/com/netflix/conductor/core/execution/mapper/EventTaskMapperTest.java###/EventTaskMapperTest.java###com.netflix.conductor.core.execution.mapper.EventTaskMapperTest###getMappedTasks:###TaskMapperContexttaskMapperContext=TaskMapperContext.newBuilder().withWorkflowDefinition(newWorkflowDef()).withWorkflowInstance(newWorkflow()).withTaskDefinition(newTaskDef()).withTaskToSchedule(taskToBeScheduled).withRetryCount(0).withTaskId(taskId).build();###w###newWorkflow()###41:9:48:26
70b1f603634fbcc0a31347099239dab20d5b621c###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/SystemTaskExecutor.java###/SystemTaskExecutor.java###com.netflix.conductor.core.execution.tasks.SystemTaskExecutor###pollAndExecute:String ###List<String>polledTaskIds=queueDAO.pop(queueName,1,200);###acquiredSlots###1###76:13:76:74
68af6dcbc01543ff814e5fde42758ab2bede545e###/Netflix_conductor/cassandra-persistence/src/main/java/com/netflix/conductor/dao/cassandra/CassandraExecutionDAO.java###/CassandraExecutionDAO.java###com.netflix.conductor.dao.cassandra.CassandraExecutionDAO###createWorkflow:Workflow ###session.execute(insertWorkflowStatement.bind(UUID.fromString(workflow.getWorkflowId()),1,"",toJson(workflow),0,1));###payload###toJson(workflow)###246:13:246:133
9ffcabcee3d9c5466259fd780593c4f821811ca3###/Netflix_conductor/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp/AMQPObservableQueue.java###/AMQPObservableQueue.java###com.netflix.conductor.contribs.queue.amqp.AMQPObservableQueue###size:###returnamqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName()).messageCount(settings.getQueueOrExchangeName());###chn###amqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName())###262:13:265:70
28ca81d6f6d702c28ed077eba3bacb174416b63e###/Netflix_conductor/core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java###/SubWorkflow.java###com.netflix.conductor.core.execution.tasks.SubWorkflow###start:Workflow Task WorkflowExecutor ###StringsubWorkflowId=provider.startWorkflow(name,version,wfInput,null,correlationId,workflow.getWorkflowId(),task.getTaskId(),null,workflow.getTaskToDomain());###taskToDomain###workflow.getTaskToDomain()###60:4:60:173
ff26cb2a428c5bc124ce82f2c972dbf8674ddffa###/Netflix_conductor/cassandra-persistence/src/test/java/com/netflix/conductor/cassandra/dao/CassandraDAOTest.java###/CassandraDAOTest.java###com.netflix.conductor.cassandra.dao.CassandraDAOTest###setUp:###when(properties.getCassandraKeyspace()).thenReturn("junit");###keyspaceName###"junit"###92:9:92:69
95f331e6e5702e1c4e156685646b4fceeb319c0d###/Netflix_conductor/redis-persistence/src/main/java/com/netflix/conductor/dao/dynomite/RedisMetadataDAO.java###/RedisMetadataDAO.java###com.netflix.conductor.dao.dynomite.RedisMetadataDAO###insertOrUpdateTaskDef:TaskDef ###dynoClient.hset(nsKey(ALL_TASK_DEFS),taskDef.getName(),toJson(taskDef));###payload###toJson(taskDef)###83:3:83:77
47763468a125cc5079be733fe4c71dd6c991c73e###/Netflix_conductor/server/src/main/java/com/netflix/conductor/server/ConductorConfig.java###/ConductorConfig.java###com.netflix.conductor.server.ConductorConfig###getIntProperty:String int ###returndefaultValue;###value###defaultValue###65:3:65:23
